package eu.sifem.model.owl.impl;

import eu.sifem.model.owl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultSoftwareAgent <br>
 * @version generated on Mon May 11 16:25:21 BST 2015 by jbjares
 */
public class DefaultSoftwareAgent extends WrappedIndividualImpl implements SoftwareAgent {

    public DefaultSoftwareAgent(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.w3.org/ns/prov#actedOnBehalfOf
     */
     
    public Collection<? extends Agent> getActedOnBehalfOf() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ACTEDONBEHALFOF,
                                               DefaultAgent.class);
    }

    public boolean hasActedOnBehalfOf() {
	   return !getActedOnBehalfOf().isEmpty();
    }

    public void addActedOnBehalfOf(Agent newActedOnBehalfOf) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ACTEDONBEHALFOF,
                                       newActedOnBehalfOf);
    }

    public void removeActedOnBehalfOf(Agent oldActedOnBehalfOf) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ACTEDONBEHALFOF,
                                          oldActedOnBehalfOf);
    }


    /* ***************************************************
     * Object Property http://www.w3.org/ns/prov#qualifiedDelegation
     */
     
    public Collection<? extends Delegation> getQualifiedDelegation() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_QUALIFIEDDELEGATION,
                                               DefaultDelegation.class);
    }

    public boolean hasQualifiedDelegation() {
	   return !getQualifiedDelegation().isEmpty();
    }

    public void addQualifiedDelegation(Delegation newQualifiedDelegation) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_QUALIFIEDDELEGATION,
                                       newQualifiedDelegation);
    }

    public void removeQualifiedDelegation(Delegation oldQualifiedDelegation) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_QUALIFIEDDELEGATION,
                                          oldQualifiedDelegation);
    }


}
