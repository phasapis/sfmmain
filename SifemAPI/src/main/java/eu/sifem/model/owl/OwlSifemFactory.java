package eu.sifem.model.owl;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

import eu.sifem.model.owl.impl.*;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: OwlSifemFactory<br>
 * @version generated on Mon May 11 16:25:17 BST 2015 by jbjares
 */
public class OwlSifemFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public OwlSifemFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public OwlSifemFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Atmosphere
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Atmosphere", Atmosphere.class, DefaultAtmosphere.class);
    }

    /**
     * Creates an instance of type Atmosphere.  Modifies the underlying ontology.
     */
    public Atmosphere createAtmosphere(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATMOSPHERE, DefaultAtmosphere.class);
    }

    /**
     * Gets an instance of type Atmosphere with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Atmosphere getAtmosphere(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATMOSPHERE, DefaultAtmosphere.class);
    }

    /**
     * Gets all instances of Atmosphere from the ontology.
     */
    public Collection<? extends Atmosphere> getAllAtmosphereInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATMOSPHERE, DefaultAtmosphere.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#ConcentrationOfSolvent
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#ConcentrationOfSolvent", ConcentrationOfSolvent.class, DefaultConcentrationOfSolvent.class);
    }

    /**
     * Creates an instance of type ConcentrationOfSolvent.  Modifies the underlying ontology.
     */
    public ConcentrationOfSolvent createConcentrationOfSolvent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONCENTRATIONOFSOLVENT, DefaultConcentrationOfSolvent.class);
    }

    /**
     * Gets an instance of type ConcentrationOfSolvent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConcentrationOfSolvent getConcentrationOfSolvent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONCENTRATIONOFSOLVENT, DefaultConcentrationOfSolvent.class);
    }

    /**
     * Gets all instances of ConcentrationOfSolvent from the ontology.
     */
    public Collection<? extends ConcentrationOfSolvent> getAllConcentrationOfSolventInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONCENTRATIONOFSOLVENT, DefaultConcentrationOfSolvent.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Conductivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Conductivity", Conductivity.class, DefaultConductivity.class);
    }

    /**
     * Creates an instance of type Conductivity.  Modifies the underlying ontology.
     */
    public Conductivity createConductivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONDUCTIVITY, DefaultConductivity.class);
    }

    /**
     * Gets an instance of type Conductivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Conductivity getConductivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONDUCTIVITY, DefaultConductivity.class);
    }

    /**
     * Gets all instances of Conductivity from the ontology.
     */
    public Collection<? extends Conductivity> getAllConductivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONDUCTIVITY, DefaultConductivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Contents
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Contents", Contents.class, DefaultContents.class);
    }

    /**
     * Creates an instance of type Contents.  Modifies the underlying ontology.
     */
    public Contents createContents(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTENTS, DefaultContents.class);
    }

    /**
     * Gets an instance of type Contents with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Contents getContents(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTENTS, DefaultContents.class);
    }

    /**
     * Gets all instances of Contents from the ontology.
     */
    public Collection<? extends Contents> getAllContentsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTENTS, DefaultContents.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#CorrosionPotential
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#CorrosionPotential", CorrosionPotential.class, DefaultCorrosionPotential.class);
    }

    /**
     * Creates an instance of type CorrosionPotential.  Modifies the underlying ontology.
     */
    public CorrosionPotential createCorrosionPotential(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CORROSIONPOTENTIAL, DefaultCorrosionPotential.class);
    }

    /**
     * Gets an instance of type CorrosionPotential with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CorrosionPotential getCorrosionPotential(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CORROSIONPOTENTIAL, DefaultCorrosionPotential.class);
    }

    /**
     * Gets all instances of CorrosionPotential from the ontology.
     */
    public Collection<? extends CorrosionPotential> getAllCorrosionPotentialInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CORROSIONPOTENTIAL, DefaultCorrosionPotential.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Current
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Current", Current.class, DefaultCurrent.class);
    }

    /**
     * Creates an instance of type Current.  Modifies the underlying ontology.
     */
    public Current createCurrent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENT, DefaultCurrent.class);
    }

    /**
     * Gets an instance of type Current with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Current getCurrent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENT, DefaultCurrent.class);
    }

    /**
     * Gets all instances of Current from the ontology.
     */
    public Collection<? extends Current> getAllCurrentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENT, DefaultCurrent.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#CurrentDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#CurrentDensity", CurrentDensity.class, DefaultCurrentDensity.class);
    }




    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#DissolvedOxygen
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#DissolvedOxygen", DissolvedOxygen.class, DefaultDissolvedOxygen.class);
    }

    /**
     * Creates an instance of type DissolvedOxygen.  Modifies the underlying ontology.
     */
    public DissolvedOxygen createDissolvedOxygen(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISSOLVEDOXYGEN, DefaultDissolvedOxygen.class);
    }

    /**
     * Gets an instance of type DissolvedOxygen with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DissolvedOxygen getDissolvedOxygen(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISSOLVEDOXYGEN, DefaultDissolvedOxygen.class);
    }

    /**
     * Gets all instances of DissolvedOxygen from the ontology.
     */
    public Collection<? extends DissolvedOxygen> getAllDissolvedOxygenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISSOLVEDOXYGEN, DefaultDissolvedOxygen.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#ElectricPotential
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#ElectricPotential", ElectricPotential.class, DefaultElectricPotential.class);
    }

    /**
     * Creates an instance of type ElectricPotential.  Modifies the underlying ontology.
     */
    public ElectricPotential createElectricPotential(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICPOTENTIAL, DefaultElectricPotential.class);
    }

    /**
     * Gets an instance of type ElectricPotential with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricPotential getElectricPotential(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICPOTENTIAL, DefaultElectricPotential.class);
    }

    /**
     * Gets all instances of ElectricPotential from the ontology.
     */
    public Collection<? extends ElectricPotential> getAllElectricPotentialInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICPOTENTIAL, DefaultElectricPotential.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Electrolyte
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Electrolyte", Electrolyte.class, DefaultElectrolyte.class);
    }

    /**
     * Creates an instance of type Electrolyte.  Modifies the underlying ontology.
     */
    public Electrolyte createElectrolyte(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTROLYTE, DefaultElectrolyte.class);
    }

    /**
     * Gets an instance of type Electrolyte with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Electrolyte getElectrolyte(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTROLYTE, DefaultElectrolyte.class);
    }

    /**
     * Gets all instances of Electrolyte from the ontology.
     */
    public Collection<? extends Electrolyte> getAllElectrolyteInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTROLYTE, DefaultElectrolyte.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Environment
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Environment", Environment.class, DefaultEnvironment.class);
    }

    /**
     * Creates an instance of type Environment.  Modifies the underlying ontology.
     */
    public Environment createEnvironment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENVIRONMENT, DefaultEnvironment.class);
    }

    /**
     * Gets an instance of type Environment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Environment getEnvironment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENVIRONMENT, DefaultEnvironment.class);
    }

    /**
     * Gets all instances of Environment from the ontology.
     */
    public Collection<? extends Environment> getAllEnvironmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENVIRONMENT, DefaultEnvironment.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#EnvironmentalPressure
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#EnvironmentalPressure", EnvironmentalPressure.class, DefaultEnvironmentalPressure.class);
    }

    /**
     * Creates an instance of type EnvironmentalPressure.  Modifies the underlying ontology.
     */
    public EnvironmentalPressure createEnvironmentalPressure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENVIRONMENTALPRESSURE, DefaultEnvironmentalPressure.class);
    }

    /**
     * Gets an instance of type EnvironmentalPressure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EnvironmentalPressure getEnvironmentalPressure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENVIRONMENTALPRESSURE, DefaultEnvironmentalPressure.class);
    }

    /**
     * Gets all instances of EnvironmentalPressure from the ontology.
     */
    public Collection<? extends EnvironmentalPressure> getAllEnvironmentalPressureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENVIRONMENTALPRESSURE, DefaultEnvironmentalPressure.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#EnvironmentalTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#EnvironmentalTemperature", EnvironmentalTemperature.class, DefaultEnvironmentalTemperature.class);
    }

    /**
     * Creates an instance of type EnvironmentalTemperature.  Modifies the underlying ontology.
     */
    public EnvironmentalTemperature createEnvironmentalTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENVIRONMENTALTEMPERATURE, DefaultEnvironmentalTemperature.class);
    }

    /**
     * Gets an instance of type EnvironmentalTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EnvironmentalTemperature getEnvironmentalTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENVIRONMENTALTEMPERATURE, DefaultEnvironmentalTemperature.class);
    }

    /**
     * Gets all instances of EnvironmentalTemperature from the ontology.
     */
    public Collection<? extends EnvironmentalTemperature> getAllEnvironmentalTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENVIRONMENTALTEMPERATURE, DefaultEnvironmentalTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#FlowRate
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#FlowRate", FlowRate.class, DefaultFlowRate.class);
    }

    /**
     * Creates an instance of type FlowRate.  Modifies the underlying ontology.
     */
    public FlowRate createFlowRate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FLOWRATE, DefaultFlowRate.class);
    }

    /**
     * Gets an instance of type FlowRate with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FlowRate getFlowRate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FLOWRATE, DefaultFlowRate.class);
    }

    /**
     * Gets all instances of FlowRate from the ontology.
     */
    public Collection<? extends FlowRate> getAllFlowRateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FLOWRATE, DefaultFlowRate.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#FlowState
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#FlowState", FlowState.class, DefaultFlowState.class);
    }

    /**
     * Creates an instance of type FlowState.  Modifies the underlying ontology.
     */
    public FlowState createFlowState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FLOWSTATE, DefaultFlowState.class);
    }

    /**
     * Gets an instance of type FlowState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FlowState getFlowState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FLOWSTATE, DefaultFlowState.class);
    }

    /**
     * Gets all instances of FlowState from the ontology.
     */
    public Collection<? extends FlowState> getAllFlowStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FLOWSTATE, DefaultFlowState.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Gas
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Gas", Gas.class, DefaultGas.class);
    }

    /**
     * Creates an instance of type Gas.  Modifies the underlying ontology.
     */
    public Gas createGas(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GAS, DefaultGas.class);
    }

    /**
     * Gets an instance of type Gas with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Gas getGas(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GAS, DefaultGas.class);
    }

    /**
     * Gets all instances of Gas from the ontology.
     */
    public Collection<? extends Gas> getAllGasInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GAS, DefaultGas.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#HoldingTime
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#HoldingTime", HoldingTime.class, DefaultHoldingTime.class);
    }

    /**
     * Creates an instance of type HoldingTime.  Modifies the underlying ontology.
     */
    public HoldingTime createHoldingTime(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOLDINGTIME, DefaultHoldingTime.class);
    }

    /**
     * Gets an instance of type HoldingTime with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HoldingTime getHoldingTime(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOLDINGTIME, DefaultHoldingTime.class);
    }

    /**
     * Gets all instances of HoldingTime from the ontology.
     */
    public Collection<? extends HoldingTime> getAllHoldingTimeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOLDINGTIME, DefaultHoldingTime.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Humidity
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Humidity", Humidity.class, DefaultHumidity.class);
    }

    /**
     * Creates an instance of type Humidity.  Modifies the underlying ontology.
     */
    public Humidity createHumidity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HUMIDITY, DefaultHumidity.class);
    }

    /**
     * Gets an instance of type Humidity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Humidity getHumidity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HUMIDITY, DefaultHumidity.class);
    }

    /**
     * Gets all instances of Humidity from the ontology.
     */
    public Collection<? extends Humidity> getAllHumidityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HUMIDITY, DefaultHumidity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Irradiation
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Irradiation", Irradiation.class, DefaultIrradiation.class);
    }

    /**
     * Creates an instance of type Irradiation.  Modifies the underlying ontology.
     */
    public Irradiation createIrradiation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IRRADIATION, DefaultIrradiation.class);
    }

    /**
     * Gets an instance of type Irradiation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Irradiation getIrradiation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IRRADIATION, DefaultIrradiation.class);
    }

    /**
     * Gets all instances of Irradiation from the ontology.
     */
    public Collection<? extends Irradiation> getAllIrradiationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IRRADIATION, DefaultIrradiation.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#IrradiationEnergy
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#IrradiationEnergy", IrradiationEnergy.class, DefaultIrradiationEnergy.class);
    }

    /**
     * Creates an instance of type IrradiationEnergy.  Modifies the underlying ontology.
     */
    public IrradiationEnergy createIrradiationEnergy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IRRADIATIONENERGY, DefaultIrradiationEnergy.class);
    }

    /**
     * Gets an instance of type IrradiationEnergy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IrradiationEnergy getIrradiationEnergy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IRRADIATIONENERGY, DefaultIrradiationEnergy.class);
    }

    /**
     * Gets all instances of IrradiationEnergy from the ontology.
     */
    public Collection<? extends IrradiationEnergy> getAllIrradiationEnergyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IRRADIATIONENERGY, DefaultIrradiationEnergy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#IrradiationTime
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#IrradiationTime", IrradiationTime.class, DefaultIrradiationTime.class);
    }

    /**
     * Creates an instance of type IrradiationTime.  Modifies the underlying ontology.
     */
    public IrradiationTime createIrradiationTime(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IRRADIATIONTIME, DefaultIrradiationTime.class);
    }

    /**
     * Gets an instance of type IrradiationTime with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IrradiationTime getIrradiationTime(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IRRADIATIONTIME, DefaultIrradiationTime.class);
    }

    /**
     * Gets all instances of IrradiationTime from the ontology.
     */
    public Collection<? extends IrradiationTime> getAllIrradiationTimeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IRRADIATIONTIME, DefaultIrradiationTime.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Liquid
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Liquid", Liquid.class, DefaultLiquid.class);
    }

    /**
     * Creates an instance of type Liquid.  Modifies the underlying ontology.
     */
    public Liquid createLiquid(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LIQUID, DefaultLiquid.class);
    }

    /**
     * Gets an instance of type Liquid with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Liquid getLiquid(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LIQUID, DefaultLiquid.class);
    }

    /**
     * Gets all instances of Liquid from the ontology.
     */
    public Collection<? extends Liquid> getAllLiquidInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LIQUID, DefaultLiquid.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Loading
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Loading", Loading.class, DefaultLoading.class);
    }

    /**
     * Creates an instance of type Loading.  Modifies the underlying ontology.
     */
    public Loading createLoading(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOADING, DefaultLoading.class);
    }

    /**
     * Gets an instance of type Loading with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Loading getLoading(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOADING, DefaultLoading.class);
    }

    /**
     * Gets all instances of Loading from the ontology.
     */
    public Collection<? extends Loading> getAllLoadingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOADING, DefaultLoading.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Ph
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Ph", Ph.class, DefaultPh.class);
    }

    /**
     * Creates an instance of type Ph.  Modifies the underlying ontology.
     */
    public Ph createPh(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PH, DefaultPh.class);
    }

    /**
     * Gets an instance of type Ph with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ph getPh(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PH, DefaultPh.class);
    }

    /**
     * Gets all instances of Ph from the ontology.
     */
    public Collection<? extends Ph> getAllPhInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PH, DefaultPh.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Solvent
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Solvent", Solvent.class, DefaultSolvent.class);
    }

    /**
     * Creates an instance of type Solvent.  Modifies the underlying ontology.
     */
    public Solvent createSolvent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOLVENT, DefaultSolvent.class);
    }

    /**
     * Gets an instance of type Solvent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Solvent getSolvent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOLVENT, DefaultSolvent.class);
    }

    /**
     * Gets all instances of Solvent from the ontology.
     */
    public Collection<? extends Solvent> getAllSolventInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOLVENT, DefaultSolvent.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Environment.owl#Vacuum
     */

    {
        javaMapping.add("http://codata.jp/OML-Environment.owl#Vacuum", Vacuum.class, DefaultVacuum.class);
    }

    /**
     * Creates an instance of type Vacuum.  Modifies the underlying ontology.
     */
    public Vacuum createVacuum(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VACUUM, DefaultVacuum.class);
    }

    /**
     * Gets an instance of type Vacuum with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Vacuum getVacuum(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VACUUM, DefaultVacuum.class);
    }

    /**
     * Gets all instances of Vacuum from the ontology.
     */
    public Collection<? extends Vacuum> getAllVacuumInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VACUUM, DefaultVacuum.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-MaterialInformation.owl#EngineeringMaterial
     */

    {
        javaMapping.add("http://codata.jp/OML-MaterialInformation.owl#EngineeringMaterial", EngineeringMaterial.class, DefaultEngineeringMaterial.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-MaterialInformation.owl#InformationSource
     */

    {
        javaMapping.add("http://codata.jp/OML-MaterialInformation.owl#InformationSource", InformationSource.class, DefaultInformationSource.class);
    }

    /**
     * Creates an instance of type InformationSource.  Modifies the underlying ontology.
     */
    public InformationSource createInformationSource(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INFORMATIONSOURCE, DefaultInformationSource.class);
    }

    /**
     * Gets an instance of type InformationSource with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public InformationSource getInformationSource(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INFORMATIONSOURCE, DefaultInformationSource.class);
    }

    /**
     * Gets all instances of InformationSource from the ontology.
     */
    public Collection<? extends InformationSource> getAllInformationSourceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INFORMATIONSOURCE, DefaultInformationSource.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-MaterialInformation.owl#MaterialInformation
     */

    {
        javaMapping.add("http://codata.jp/OML-MaterialInformation.owl#MaterialInformation", MaterialInformation.class, DefaultMaterialInformation.class);
    }

    /**
     * Creates an instance of type MaterialInformation.  Modifies the underlying ontology.
     */
    public MaterialInformation createMaterialInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATERIALINFORMATION, DefaultMaterialInformation.class);
    }

    /**
     * Gets an instance of type MaterialInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MaterialInformation getMaterialInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATERIALINFORMATION, DefaultMaterialInformation.class);
    }

    /**
     * Gets all instances of MaterialInformation from the ontology.
     */
    public Collection<? extends MaterialInformation> getAllMaterialInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATERIALINFORMATION, DefaultMaterialInformation.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-MaterialInformation.owl#MaterialProperty
     */

    {
        javaMapping.add("http://codata.jp/OML-MaterialInformation.owl#MaterialProperty", MaterialProperty.class, DefaultMaterialProperty.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-Process.owl#ManufacturingProcess
     */

    {
        javaMapping.add("http://codata.jp/OML-Process.owl#ManufacturingProcess", ManufacturingProcess.class, DefaultManufacturingProcess.class);
    }

    /**
     * Creates an instance of type ManufacturingProcess.  Modifies the underlying ontology.
     */
    public ManufacturingProcess createManufacturingProcess(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MANUFACTURINGPROCESS, DefaultManufacturingProcess.class);
    }

    /**
     * Gets an instance of type ManufacturingProcess with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ManufacturingProcess getManufacturingProcess(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MANUFACTURINGPROCESS, DefaultManufacturingProcess.class);
    }

    /**
     * Gets all instances of ManufacturingProcess from the ontology.
     */
    public Collection<? extends ManufacturingProcess> getAllManufacturingProcessInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MANUFACTURINGPROCESS, DefaultManufacturingProcess.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ActivationEnergy
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ActivationEnergy", ActivationEnergy.class, DefaultActivationEnergy.class);
    }

    /**
     * Creates an instance of type ActivationEnergy.  Modifies the underlying ontology.
     */
    public ActivationEnergy createActivationEnergy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTIVATIONENERGY, DefaultActivationEnergy.class);
    }

    /**
     * Gets an instance of type ActivationEnergy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ActivationEnergy getActivationEnergy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTIVATIONENERGY, DefaultActivationEnergy.class);
    }

    /**
     * Gets all instances of ActivationEnergy from the ontology.
     */
    public Collection<? extends ActivationEnergy> getAllActivationEnergyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTIVATIONENERGY, DefaultActivationEnergy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#AdiabaticBulkModulus
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#AdiabaticBulkModulus", AdiabaticBulkModulus.class, DefaultAdiabaticBulkModulus.class);
    }

    /**
     * Creates an instance of type AdiabaticBulkModulus.  Modifies the underlying ontology.
     */
    public AdiabaticBulkModulus createAdiabaticBulkModulus(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADIABATICBULKMODULUS, DefaultAdiabaticBulkModulus.class);
    }

    /**
     * Gets an instance of type AdiabaticBulkModulus with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AdiabaticBulkModulus getAdiabaticBulkModulus(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADIABATICBULKMODULUS, DefaultAdiabaticBulkModulus.class);
    }

    /**
     * Gets all instances of AdiabaticBulkModulus from the ontology.
     */
    public Collection<? extends AdiabaticBulkModulus> getAllAdiabaticBulkModulusInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADIABATICBULKMODULUS, DefaultAdiabaticBulkModulus.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#AdiabaticBulkModulusDiscontinuityAtNeelTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#AdiabaticBulkModulusDiscontinuityAtNeelTemperature", AdiabaticBulkModulusDiscontinuityAtNeelTemperature.class, DefaultAdiabaticBulkModulusDiscontinuityAtNeelTemperature.class);
    }

    /**
     * Creates an instance of type AdiabaticBulkModulusDiscontinuityAtNeelTemperature.  Modifies the underlying ontology.
     */
    public AdiabaticBulkModulusDiscontinuityAtNeelTemperature createAdiabaticBulkModulusDiscontinuityAtNeelTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADIABATICBULKMODULUSDISCONTINUITYATNEELTEMPERATURE, DefaultAdiabaticBulkModulusDiscontinuityAtNeelTemperature.class);
    }

    /**
     * Gets an instance of type AdiabaticBulkModulusDiscontinuityAtNeelTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AdiabaticBulkModulusDiscontinuityAtNeelTemperature getAdiabaticBulkModulusDiscontinuityAtNeelTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADIABATICBULKMODULUSDISCONTINUITYATNEELTEMPERATURE, DefaultAdiabaticBulkModulusDiscontinuityAtNeelTemperature.class);
    }

    /**
     * Gets all instances of AdiabaticBulkModulusDiscontinuityAtNeelTemperature from the ontology.
     */
    public Collection<? extends AdiabaticBulkModulusDiscontinuityAtNeelTemperature> getAllAdiabaticBulkModulusDiscontinuityAtNeelTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADIABATICBULKMODULUSDISCONTINUITYATNEELTEMPERATURE, DefaultAdiabaticBulkModulusDiscontinuityAtNeelTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#BulkModulus
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#BulkModulus", BulkModulus.class, DefaultBulkModulus.class);
    }

    /**
     * Creates an instance of type BulkModulus.  Modifies the underlying ontology.
     */
    public BulkModulus createBulkModulus(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BULKMODULUS, DefaultBulkModulus.class);
    }

    /**
     * Gets an instance of type BulkModulus with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BulkModulus getBulkModulus(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BULKMODULUS, DefaultBulkModulus.class);
    }

    /**
     * Gets all instances of BulkModulus from the ontology.
     */
    public Collection<? extends BulkModulus> getAllBulkModulusInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BULKMODULUS, DefaultBulkModulus.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C11
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C11", C11.class, DefaultC11.class);
    }

    /**
     * Creates an instance of type C11.  Modifies the underlying ontology.
     */
    public C11 createC11(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C11, DefaultC11.class);
    }

    /**
     * Gets an instance of type C11 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C11 getC11(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C11, DefaultC11.class);
    }

    /**
     * Gets all instances of C11 from the ontology.
     */
    public Collection<? extends C11> getAllC11Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C11, DefaultC11.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C11-C12
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C11-C12", C11_C12.class, DefaultC11_C12.class);
    }

    /**
     * Creates an instance of type C11_C12.  Modifies the underlying ontology.
     */
    public C11_C12 createC11_C12(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C11_C12, DefaultC11_C12.class);
    }

    /**
     * Gets an instance of type C11_C12 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C11_C12 getC11_C12(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C11_C12, DefaultC11_C12.class);
    }

    /**
     * Gets all instances of C11_C12 from the ontology.
     */
    public Collection<? extends C11_C12> getAllC11_C12Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C11_C12, DefaultC11_C12.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C12
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C12", C12.class, DefaultC12.class);
    }

    /**
     * Creates an instance of type C12.  Modifies the underlying ontology.
     */
    public C12 createC12(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C12, DefaultC12.class);
    }

    /**
     * Gets an instance of type C12 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C12 getC12(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C12, DefaultC12.class);
    }

    /**
     * Gets all instances of C12 from the ontology.
     */
    public Collection<? extends C12> getAllC12Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C12, DefaultC12.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C13
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C13", C13.class, DefaultC13.class);
    }

    /**
     * Creates an instance of type C13.  Modifies the underlying ontology.
     */
    public C13 createC13(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C13, DefaultC13.class);
    }

    /**
     * Gets an instance of type C13 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C13 getC13(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C13, DefaultC13.class);
    }

    /**
     * Gets all instances of C13 from the ontology.
     */
    public Collection<? extends C13> getAllC13Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C13, DefaultC13.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C14
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C14", C14.class, DefaultC14.class);
    }

    /**
     * Creates an instance of type C14.  Modifies the underlying ontology.
     */
    public C14 createC14(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C14, DefaultC14.class);
    }

    /**
     * Gets an instance of type C14 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C14 getC14(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C14, DefaultC14.class);
    }

    /**
     * Gets all instances of C14 from the ontology.
     */
    public Collection<? extends C14> getAllC14Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C14, DefaultC14.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C22
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C22", C22.class, DefaultC22.class);
    }

    /**
     * Creates an instance of type C22.  Modifies the underlying ontology.
     */
    public C22 createC22(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C22, DefaultC22.class);
    }

    /**
     * Gets an instance of type C22 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C22 getC22(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C22, DefaultC22.class);
    }

    /**
     * Gets all instances of C22 from the ontology.
     */
    public Collection<? extends C22> getAllC22Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C22, DefaultC22.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C23
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C23", C23.class, DefaultC23.class);
    }

    /**
     * Creates an instance of type C23.  Modifies the underlying ontology.
     */
    public C23 createC23(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C23, DefaultC23.class);
    }

    /**
     * Gets an instance of type C23 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C23 getC23(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C23, DefaultC23.class);
    }

    /**
     * Gets all instances of C23 from the ontology.
     */
    public Collection<? extends C23> getAllC23Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C23, DefaultC23.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C33
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C33", C33.class, DefaultC33.class);
    }

    /**
     * Creates an instance of type C33.  Modifies the underlying ontology.
     */
    public C33 createC33(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C33, DefaultC33.class);
    }

    /**
     * Gets an instance of type C33 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C33 getC33(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C33, DefaultC33.class);
    }

    /**
     * Gets all instances of C33 from the ontology.
     */
    public Collection<? extends C33> getAllC33Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C33, DefaultC33.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C44
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C44", C44.class, DefaultC44.class);
    }

    /**
     * Creates an instance of type C44.  Modifies the underlying ontology.
     */
    public C44 createC44(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C44, DefaultC44.class);
    }

    /**
     * Gets an instance of type C44 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C44 getC44(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C44, DefaultC44.class);
    }

    /**
     * Gets all instances of C44 from the ontology.
     */
    public Collection<? extends C44> getAllC44Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C44, DefaultC44.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C55
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C55", C55.class, DefaultC55.class);
    }

    /**
     * Creates an instance of type C55.  Modifies the underlying ontology.
     */
    public C55 createC55(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C55, DefaultC55.class);
    }

    /**
     * Gets an instance of type C55 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C55 getC55(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C55, DefaultC55.class);
    }

    /**
     * Gets all instances of C55 from the ontology.
     */
    public Collection<? extends C55> getAllC55Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C55, DefaultC55.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#C66
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#C66", C66.class, DefaultC66.class);
    }

    /**
     * Creates an instance of type C66.  Modifies the underlying ontology.
     */
    public C66 createC66(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_C66, DefaultC66.class);
    }

    /**
     * Gets an instance of type C66 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public C66 getC66(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_C66, DefaultC66.class);
    }

    /**
     * Gets all instances of C66 from the ontology.
     */
    public Collection<? extends C66> getAllC66Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_C66, DefaultC66.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Chemical
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Chemical", Chemical.class, DefaultChemical.class);
    }

    /**
     * Creates an instance of type Chemical.  Modifies the underlying ontology.
     */
    public Chemical createChemical(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHEMICAL, DefaultChemical.class);
    }

    /**
     * Gets an instance of type Chemical with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Chemical getChemical(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHEMICAL, DefaultChemical.class);
    }

    /**
     * Gets all instances of Chemical from the ontology.
     */
    public Collection<? extends Chemical> getAllChemicalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHEMICAL, DefaultChemical.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#CoherenceLength
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#CoherenceLength", CoherenceLength.class, DefaultCoherenceLength.class);
    }

    /**
     * Creates an instance of type CoherenceLength.  Modifies the underlying ontology.
     */
    public CoherenceLength createCoherenceLength(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COHERENCELENGTH, DefaultCoherenceLength.class);
    }

    /**
     * Gets an instance of type CoherenceLength with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CoherenceLength getCoherenceLength(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COHERENCELENGTH, DefaultCoherenceLength.class);
    }

    /**
     * Gets all instances of CoherenceLength from the ontology.
     */
    public Collection<? extends CoherenceLength> getAllCoherenceLengthInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COHERENCELENGTH, DefaultCoherenceLength.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#CoherenceLengthAt0K
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#CoherenceLengthAt0K", CoherenceLengthAt0K.class, DefaultCoherenceLengthAt0K.class);
    }

    /**
     * Creates an instance of type CoherenceLengthAt0K.  Modifies the underlying ontology.
     */
    public CoherenceLengthAt0K createCoherenceLengthAt0K(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COHERENCELENGTHAT0K, DefaultCoherenceLengthAt0K.class);
    }

    /**
     * Gets an instance of type CoherenceLengthAt0K with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CoherenceLengthAt0K getCoherenceLengthAt0K(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COHERENCELENGTHAT0K, DefaultCoherenceLengthAt0K.class);
    }

    /**
     * Gets all instances of CoherenceLengthAt0K from the ontology.
     */
    public Collection<? extends CoherenceLengthAt0K> getAllCoherenceLengthAt0KInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COHERENCELENGTHAT0K, DefaultCoherenceLengthAt0K.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Creep
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Creep", Creep.class, DefaultCreep.class);
    }

    /**
     * Creates an instance of type Creep.  Modifies the underlying ontology.
     */
    public Creep createCreep(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CREEP, DefaultCreep.class);
    }

    /**
     * Gets an instance of type Creep with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Creep getCreep(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CREEP, DefaultCreep.class);
    }

    /**
     * Gets all instances of Creep from the ontology.
     */
    public Collection<? extends Creep> getAllCreepInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CREEP, DefaultCreep.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#CriticalFieldForMagneticTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#CriticalFieldForMagneticTransition", CriticalFieldForMagneticTransition.class, DefaultCriticalFieldForMagneticTransition.class);
    }

    /**
     * Creates an instance of type CriticalFieldForMagneticTransition.  Modifies the underlying ontology.
     */
    public CriticalFieldForMagneticTransition createCriticalFieldForMagneticTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CRITICALFIELDFORMAGNETICTRANSITION, DefaultCriticalFieldForMagneticTransition.class);
    }

    /**
     * Gets an instance of type CriticalFieldForMagneticTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CriticalFieldForMagneticTransition getCriticalFieldForMagneticTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CRITICALFIELDFORMAGNETICTRANSITION, DefaultCriticalFieldForMagneticTransition.class);
    }

    /**
     * Gets all instances of CriticalFieldForMagneticTransition from the ontology.
     */
    public Collection<? extends CriticalFieldForMagneticTransition> getAllCriticalFieldForMagneticTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CRITICALFIELDFORMAGNETICTRANSITION, DefaultCriticalFieldForMagneticTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#CriticalMagneticFieldStrength
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#CriticalMagneticFieldStrength", CriticalMagneticFieldStrength.class, DefaultCriticalMagneticFieldStrength.class);
    }

    /**
     * Creates an instance of type CriticalMagneticFieldStrength.  Modifies the underlying ontology.
     */
    public CriticalMagneticFieldStrength createCriticalMagneticFieldStrength(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CRITICALMAGNETICFIELDSTRENGTH, DefaultCriticalMagneticFieldStrength.class);
    }

    /**
     * Gets an instance of type CriticalMagneticFieldStrength with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CriticalMagneticFieldStrength getCriticalMagneticFieldStrength(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CRITICALMAGNETICFIELDSTRENGTH, DefaultCriticalMagneticFieldStrength.class);
    }

    /**
     * Gets all instances of CriticalMagneticFieldStrength from the ontology.
     */
    public Collection<? extends CriticalMagneticFieldStrength> getAllCriticalMagneticFieldStrengthInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CRITICALMAGNETICFIELDSTRENGTH, DefaultCriticalMagneticFieldStrength.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#CriticalMagneticFieldStrengthAt0K
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#CriticalMagneticFieldStrengthAt0K", CriticalMagneticFieldStrengthAt0K.class, DefaultCriticalMagneticFieldStrengthAt0K.class);
    }

    /**
     * Creates an instance of type CriticalMagneticFieldStrengthAt0K.  Modifies the underlying ontology.
     */
    public CriticalMagneticFieldStrengthAt0K createCriticalMagneticFieldStrengthAt0K(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CRITICALMAGNETICFIELDSTRENGTHAT0K, DefaultCriticalMagneticFieldStrengthAt0K.class);
    }

    /**
     * Gets an instance of type CriticalMagneticFieldStrengthAt0K with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CriticalMagneticFieldStrengthAt0K getCriticalMagneticFieldStrengthAt0K(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CRITICALMAGNETICFIELDSTRENGTHAT0K, DefaultCriticalMagneticFieldStrengthAt0K.class);
    }

    /**
     * Gets all instances of CriticalMagneticFieldStrengthAt0K from the ontology.
     */
    public Collection<? extends CriticalMagneticFieldStrengthAt0K> getAllCriticalMagneticFieldStrengthAt0KInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CRITICALMAGNETICFIELDSTRENGTHAT0K, DefaultCriticalMagneticFieldStrengthAt0K.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#CriticalTemperatureForMagneticTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#CriticalTemperatureForMagneticTransition", CriticalTemperatureForMagneticTransition.class, DefaultCriticalTemperatureForMagneticTransition.class);
    }

    /**
     * Creates an instance of type CriticalTemperatureForMagneticTransition.  Modifies the underlying ontology.
     */
    public CriticalTemperatureForMagneticTransition createCriticalTemperatureForMagneticTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CRITICALTEMPERATUREFORMAGNETICTRANSITION, DefaultCriticalTemperatureForMagneticTransition.class);
    }

    /**
     * Gets an instance of type CriticalTemperatureForMagneticTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CriticalTemperatureForMagneticTransition getCriticalTemperatureForMagneticTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CRITICALTEMPERATUREFORMAGNETICTRANSITION, DefaultCriticalTemperatureForMagneticTransition.class);
    }

    /**
     * Gets all instances of CriticalTemperatureForMagneticTransition from the ontology.
     */
    public Collection<? extends CriticalTemperatureForMagneticTransition> getAllCriticalTemperatureForMagneticTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CRITICALTEMPERATUREFORMAGNETICTRANSITION, DefaultCriticalTemperatureForMagneticTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#CurieTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#CurieTemperature", CurieTemperature.class, DefaultCurieTemperature.class);
    }

    /**
     * Creates an instance of type CurieTemperature.  Modifies the underlying ontology.
     */
    public CurieTemperature createCurieTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURIETEMPERATURE, DefaultCurieTemperature.class);
    }

    /**
     * Gets an instance of type CurieTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurieTemperature getCurieTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURIETEMPERATURE, DefaultCurieTemperature.class);
    }

    /**
     * Gets all instances of CurieTemperature from the ontology.
     */
    public Collection<? extends CurieTemperature> getAllCurieTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURIETEMPERATURE, DefaultCurieTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#DebyeTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#DebyeTemperature", DebyeTemperature.class, DefaultDebyeTemperature.class);
    }

    /**
     * Creates an instance of type DebyeTemperature.  Modifies the underlying ontology.
     */
    public DebyeTemperature createDebyeTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEBYETEMPERATURE, DefaultDebyeTemperature.class);
    }

    /**
     * Gets an instance of type DebyeTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DebyeTemperature getDebyeTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEBYETEMPERATURE, DefaultDebyeTemperature.class);
    }

    /**
     * Gets all instances of DebyeTemperature from the ontology.
     */
    public Collection<? extends DebyeTemperature> getAllDebyeTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEBYETEMPERATURE, DefaultDebyeTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Density
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Density", Density.class, DefaultDensity.class);
    }

    /**
     * Creates an instance of type Density.  Modifies the underlying ontology.
     */
    public Density createDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DENSITY, DefaultDensity.class);
    }

    /**
     * Gets an instance of type Density with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Density getDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DENSITY, DefaultDensity.class);
    }

    /**
     * Gets all instances of Density from the ontology.
     */
    public Collection<? extends Density> getAllDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DENSITY, DefaultDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#EffectiveBohrMagnetonNumber
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#EffectiveBohrMagnetonNumber", EffectiveBohrMagnetonNumber.class, DefaultEffectiveBohrMagnetonNumber.class);
    }

    /**
     * Creates an instance of type EffectiveBohrMagnetonNumber.  Modifies the underlying ontology.
     */
    public EffectiveBohrMagnetonNumber createEffectiveBohrMagnetonNumber(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EFFECTIVEBOHRMAGNETONNUMBER, DefaultEffectiveBohrMagnetonNumber.class);
    }

    /**
     * Gets an instance of type EffectiveBohrMagnetonNumber with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EffectiveBohrMagnetonNumber getEffectiveBohrMagnetonNumber(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EFFECTIVEBOHRMAGNETONNUMBER, DefaultEffectiveBohrMagnetonNumber.class);
    }

    /**
     * Gets all instances of EffectiveBohrMagnetonNumber from the ontology.
     */
    public Collection<? extends EffectiveBohrMagnetonNumber> getAllEffectiveBohrMagnetonNumberInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EFFECTIVEBOHRMAGNETONNUMBER, DefaultEffectiveBohrMagnetonNumber.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#EffectiveCharge
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#EffectiveCharge", EffectiveCharge.class, DefaultEffectiveCharge.class);
    }

    /**
     * Creates an instance of type EffectiveCharge.  Modifies the underlying ontology.
     */
    public EffectiveCharge createEffectiveCharge(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EFFECTIVECHARGE, DefaultEffectiveCharge.class);
    }

    /**
     * Gets an instance of type EffectiveCharge with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EffectiveCharge getEffectiveCharge(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EFFECTIVECHARGE, DefaultEffectiveCharge.class);
    }

    /**
     * Gets all instances of EffectiveCharge from the ontology.
     */
    public Collection<? extends EffectiveCharge> getAllEffectiveChargeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EFFECTIVECHARGE, DefaultEffectiveCharge.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#EffectiveMassOfElectronsInConductionBand
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#EffectiveMassOfElectronsInConductionBand", EffectiveMassOfElectronsInConductionBand.class, DefaultEffectiveMassOfElectronsInConductionBand.class);
    }

    /**
     * Creates an instance of type EffectiveMassOfElectronsInConductionBand.  Modifies the underlying ontology.
     */
    public EffectiveMassOfElectronsInConductionBand createEffectiveMassOfElectronsInConductionBand(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EFFECTIVEMASSOFELECTRONSINCONDUCTIONBAND, DefaultEffectiveMassOfElectronsInConductionBand.class);
    }

    /**
     * Gets an instance of type EffectiveMassOfElectronsInConductionBand with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EffectiveMassOfElectronsInConductionBand getEffectiveMassOfElectronsInConductionBand(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EFFECTIVEMASSOFELECTRONSINCONDUCTIONBAND, DefaultEffectiveMassOfElectronsInConductionBand.class);
    }

    /**
     * Gets all instances of EffectiveMassOfElectronsInConductionBand from the ontology.
     */
    public Collection<? extends EffectiveMassOfElectronsInConductionBand> getAllEffectiveMassOfElectronsInConductionBandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EFFECTIVEMASSOFELECTRONSINCONDUCTIONBAND, DefaultEffectiveMassOfElectronsInConductionBand.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#EffectiveMassOfHolesInValenceBand
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#EffectiveMassOfHolesInValenceBand", EffectiveMassOfHolesInValenceBand.class, DefaultEffectiveMassOfHolesInValenceBand.class);
    }

    /**
     * Creates an instance of type EffectiveMassOfHolesInValenceBand.  Modifies the underlying ontology.
     */
    public EffectiveMassOfHolesInValenceBand createEffectiveMassOfHolesInValenceBand(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EFFECTIVEMASSOFHOLESINVALENCEBAND, DefaultEffectiveMassOfHolesInValenceBand.class);
    }

    /**
     * Gets an instance of type EffectiveMassOfHolesInValenceBand with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EffectiveMassOfHolesInValenceBand getEffectiveMassOfHolesInValenceBand(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EFFECTIVEMASSOFHOLESINVALENCEBAND, DefaultEffectiveMassOfHolesInValenceBand.class);
    }

    /**
     * Gets all instances of EffectiveMassOfHolesInValenceBand from the ontology.
     */
    public Collection<? extends EffectiveMassOfHolesInValenceBand> getAllEffectiveMassOfHolesInValenceBandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EFFECTIVEMASSOFHOLESINVALENCEBAND, DefaultEffectiveMassOfHolesInValenceBand.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ElasticStiffnessCoefficient
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ElasticStiffnessCoefficient", ElasticStiffnessCoefficient.class, DefaultElasticStiffnessCoefficient.class);
    }

    /**
     * Creates an instance of type ElasticStiffnessCoefficient.  Modifies the underlying ontology.
     */
    public ElasticStiffnessCoefficient createElasticStiffnessCoefficient(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELASTICSTIFFNESSCOEFFICIENT, DefaultElasticStiffnessCoefficient.class);
    }

    /**
     * Gets an instance of type ElasticStiffnessCoefficient with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElasticStiffnessCoefficient getElasticStiffnessCoefficient(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELASTICSTIFFNESSCOEFFICIENT, DefaultElasticStiffnessCoefficient.class);
    }

    /**
     * Gets all instances of ElasticStiffnessCoefficient from the ontology.
     */
    public Collection<? extends ElasticStiffnessCoefficient> getAllElasticStiffnessCoefficientInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELASTICSTIFFNESSCOEFFICIENT, DefaultElasticStiffnessCoefficient.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ElectricStrengthOfDielectric
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ElectricStrengthOfDielectric", ElectricStrengthOfDielectric.class, DefaultElectricStrengthOfDielectric.class);
    }

    /**
     * Creates an instance of type ElectricStrengthOfDielectric.  Modifies the underlying ontology.
     */
    public ElectricStrengthOfDielectric createElectricStrengthOfDielectric(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICSTRENGTHOFDIELECTRIC, DefaultElectricStrengthOfDielectric.class);
    }

    /**
     * Gets an instance of type ElectricStrengthOfDielectric with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricStrengthOfDielectric getElectricStrengthOfDielectric(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICSTRENGTHOFDIELECTRIC, DefaultElectricStrengthOfDielectric.class);
    }

    /**
     * Gets all instances of ElectricStrengthOfDielectric from the ontology.
     */
    public Collection<? extends ElectricStrengthOfDielectric> getAllElectricStrengthOfDielectricInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICSTRENGTHOFDIELECTRIC, DefaultElectricStrengthOfDielectric.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ElectricalConductivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ElectricalConductivity", ElectricalConductivity.class, DefaultElectricalConductivity.class);
    }

    /**
     * Creates an instance of type ElectricalConductivity.  Modifies the underlying ontology.
     */
    public ElectricalConductivity createElectricalConductivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICALCONDUCTIVITY, DefaultElectricalConductivity.class);
    }

    /**
     * Gets an instance of type ElectricalConductivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricalConductivity getElectricalConductivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICALCONDUCTIVITY, DefaultElectricalConductivity.class);
    }

    /**
     * Gets all instances of ElectricalConductivity from the ontology.
     */
    public Collection<? extends ElectricalConductivity> getAllElectricalConductivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICALCONDUCTIVITY, DefaultElectricalConductivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ElectricalResistivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ElectricalResistivity", ElectricalResistivity.class, DefaultElectricalResistivity.class);
    }

    /**
     * Creates an instance of type ElectricalResistivity.  Modifies the underlying ontology.
     */
    public ElectricalResistivity createElectricalResistivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICALRESISTIVITY, DefaultElectricalResistivity.class);
    }

    /**
     * Gets an instance of type ElectricalResistivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricalResistivity getElectricalResistivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICALRESISTIVITY, DefaultElectricalResistivity.class);
    }

    /**
     * Gets all instances of ElectricalResistivity from the ontology.
     */
    public Collection<? extends ElectricalResistivity> getAllElectricalResistivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICALRESISTIVITY, DefaultElectricalResistivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Electron-PhononInteractionParameter
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Electron-PhononInteractionParameter", Electron_PhononInteractionParameter.class, DefaultElectron_PhononInteractionParameter.class);
    }

    /**
     * Creates an instance of type Electron_PhononInteractionParameter.  Modifies the underlying ontology.
     */
    public Electron_PhononInteractionParameter createElectron_PhononInteractionParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRON_PHONONINTERACTIONPARAMETER, DefaultElectron_PhononInteractionParameter.class);
    }

    /**
     * Gets an instance of type Electron_PhononInteractionParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Electron_PhononInteractionParameter getElectron_PhononInteractionParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRON_PHONONINTERACTIONPARAMETER, DefaultElectron_PhononInteractionParameter.class);
    }

    /**
     * Gets all instances of Electron_PhononInteractionParameter from the ontology.
     */
    public Collection<? extends Electron_PhononInteractionParameter> getAllElectron_PhononInteractionParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRON_PHONONINTERACTIONPARAMETER, DefaultElectron_PhononInteractionParameter.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ElectronConcentration
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ElectronConcentration", ElectronConcentration.class, DefaultElectronConcentration.class);
    }

    /**
     * Creates an instance of type ElectronConcentration.  Modifies the underlying ontology.
     */
    public ElectronConcentration createElectronConcentration(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRONCONCENTRATION, DefaultElectronConcentration.class);
    }

    /**
     * Gets an instance of type ElectronConcentration with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectronConcentration getElectronConcentration(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRONCONCENTRATION, DefaultElectronConcentration.class);
    }

    /**
     * Gets all instances of ElectronConcentration from the ontology.
     */
    public Collection<? extends ElectronConcentration> getAllElectronConcentrationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRONCONCENTRATION, DefaultElectronConcentration.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ElectronDensityOfStatesAtFermiLevel
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ElectronDensityOfStatesAtFermiLevel", ElectronDensityOfStatesAtFermiLevel.class, DefaultElectronDensityOfStatesAtFermiLevel.class);
    }

    /**
     * Creates an instance of type ElectronDensityOfStatesAtFermiLevel.  Modifies the underlying ontology.
     */
    public ElectronDensityOfStatesAtFermiLevel createElectronDensityOfStatesAtFermiLevel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRONDENSITYOFSTATESATFERMILEVEL, DefaultElectronDensityOfStatesAtFermiLevel.class);
    }

    /**
     * Gets an instance of type ElectronDensityOfStatesAtFermiLevel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectronDensityOfStatesAtFermiLevel getElectronDensityOfStatesAtFermiLevel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRONDENSITYOFSTATESATFERMILEVEL, DefaultElectronDensityOfStatesAtFermiLevel.class);
    }

    /**
     * Gets all instances of ElectronDensityOfStatesAtFermiLevel from the ontology.
     */
    public Collection<? extends ElectronDensityOfStatesAtFermiLevel> getAllElectronDensityOfStatesAtFermiLevelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRONDENSITYOFSTATESATFERMILEVEL, DefaultElectronDensityOfStatesAtFermiLevel.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ElectronDensityOfStatesAtFermiLevelPerSpin
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ElectronDensityOfStatesAtFermiLevelPerSpin", ElectronDensityOfStatesAtFermiLevelPerSpin.class, DefaultElectronDensityOfStatesAtFermiLevelPerSpin.class);
    }

    /**
     * Creates an instance of type ElectronDensityOfStatesAtFermiLevelPerSpin.  Modifies the underlying ontology.
     */
    public ElectronDensityOfStatesAtFermiLevelPerSpin createElectronDensityOfStatesAtFermiLevelPerSpin(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRONDENSITYOFSTATESATFERMILEVELPERSPIN, DefaultElectronDensityOfStatesAtFermiLevelPerSpin.class);
    }

    /**
     * Gets an instance of type ElectronDensityOfStatesAtFermiLevelPerSpin with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectronDensityOfStatesAtFermiLevelPerSpin getElectronDensityOfStatesAtFermiLevelPerSpin(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRONDENSITYOFSTATESATFERMILEVELPERSPIN, DefaultElectronDensityOfStatesAtFermiLevelPerSpin.class);
    }

    /**
     * Gets all instances of ElectronDensityOfStatesAtFermiLevelPerSpin from the ontology.
     */
    public Collection<? extends ElectronDensityOfStatesAtFermiLevelPerSpin> getAllElectronDensityOfStatesAtFermiLevelPerSpinInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRONDENSITYOFSTATESATFERMILEVELPERSPIN, DefaultElectronDensityOfStatesAtFermiLevelPerSpin.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ElectronMobility
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ElectronMobility", ElectronMobility.class, DefaultElectronMobility.class);
    }

    /**
     * Creates an instance of type ElectronMobility.  Modifies the underlying ontology.
     */
    public ElectronMobility createElectronMobility(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRONMOBILITY, DefaultElectronMobility.class);
    }

    /**
     * Gets an instance of type ElectronMobility with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectronMobility getElectronMobility(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRONMOBILITY, DefaultElectronMobility.class);
    }

    /**
     * Gets all instances of ElectronMobility from the ontology.
     */
    public Collection<? extends ElectronMobility> getAllElectronMobilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRONMOBILITY, DefaultElectronMobility.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ElectronicAndElectrical
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ElectronicAndElectrical", ElectronicAndElectrical.class, DefaultElectronicAndElectrical.class);
    }

    /**
     * Creates an instance of type ElectronicAndElectrical.  Modifies the underlying ontology.
     */
    public ElectronicAndElectrical createElectronicAndElectrical(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRONICANDELECTRICAL, DefaultElectronicAndElectrical.class);
    }

    /**
     * Gets an instance of type ElectronicAndElectrical with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectronicAndElectrical getElectronicAndElectrical(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRONICANDELECTRICAL, DefaultElectronicAndElectrical.class);
    }

    /**
     * Gets all instances of ElectronicAndElectrical from the ontology.
     */
    public Collection<? extends ElectronicAndElectrical> getAllElectronicAndElectricalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRONICANDELECTRICAL, DefaultElectronicAndElectrical.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#EnergyGap
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#EnergyGap", EnergyGap.class, DefaultEnergyGap.class);
    }

    /**
     * Creates an instance of type EnergyGap.  Modifies the underlying ontology.
     */
    public EnergyGap createEnergyGap(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENERGYGAP, DefaultEnergyGap.class);
    }

    /**
     * Gets an instance of type EnergyGap with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EnergyGap getEnergyGap(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENERGYGAP, DefaultEnergyGap.class);
    }

    /**
     * Gets all instances of EnergyGap from the ontology.
     */
    public Collection<? extends EnergyGap> getAllEnergyGapInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENERGYGAP, DefaultEnergyGap.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#EnergyGapForDirectTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#EnergyGapForDirectTransition", EnergyGapForDirectTransition.class, DefaultEnergyGapForDirectTransition.class);
    }

    /**
     * Creates an instance of type EnergyGapForDirectTransition.  Modifies the underlying ontology.
     */
    public EnergyGapForDirectTransition createEnergyGapForDirectTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENERGYGAPFORDIRECTTRANSITION, DefaultEnergyGapForDirectTransition.class);
    }

    /**
     * Gets an instance of type EnergyGapForDirectTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EnergyGapForDirectTransition getEnergyGapForDirectTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENERGYGAPFORDIRECTTRANSITION, DefaultEnergyGapForDirectTransition.class);
    }

    /**
     * Gets all instances of EnergyGapForDirectTransition from the ontology.
     */
    public Collection<? extends EnergyGapForDirectTransition> getAllEnergyGapForDirectTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENERGYGAPFORDIRECTTRANSITION, DefaultEnergyGapForDirectTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#EnergyGapForIndirectTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#EnergyGapForIndirectTransition", EnergyGapForIndirectTransition.class, DefaultEnergyGapForIndirectTransition.class);
    }

    /**
     * Creates an instance of type EnergyGapForIndirectTransition.  Modifies the underlying ontology.
     */
    public EnergyGapForIndirectTransition createEnergyGapForIndirectTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENERGYGAPFORINDIRECTTRANSITION, DefaultEnergyGapForIndirectTransition.class);
    }

    /**
     * Gets an instance of type EnergyGapForIndirectTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EnergyGapForIndirectTransition getEnergyGapForIndirectTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENERGYGAPFORINDIRECTTRANSITION, DefaultEnergyGapForIndirectTransition.class);
    }

    /**
     * Gets all instances of EnergyGapForIndirectTransition from the ontology.
     */
    public Collection<? extends EnergyGapForIndirectTransition> getAllEnergyGapForIndirectTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENERGYGAPFORINDIRECTTRANSITION, DefaultEnergyGapForIndirectTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Equation
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Equation", Equation.class, DefaultEquation.class);
    }

    /**
     * Creates an instance of type Equation.  Modifies the underlying ontology.
     */
    public Equation createEquation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EQUATION, DefaultEquation.class);
    }

    /**
     * Gets an instance of type Equation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Equation getEquation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EQUATION, DefaultEquation.class);
    }

    /**
     * Gets all instances of Equation from the ontology.
     */
    public Collection<? extends Equation> getAllEquationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EQUATION, DefaultEquation.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#HallCoefficient
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#HallCoefficient", HallCoefficient.class, DefaultHallCoefficient.class);
    }

    /**
     * Creates an instance of type HallCoefficient.  Modifies the underlying ontology.
     */
    public HallCoefficient createHallCoefficient(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HALLCOEFFICIENT, DefaultHallCoefficient.class);
    }

    /**
     * Gets an instance of type HallCoefficient with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HallCoefficient getHallCoefficient(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HALLCOEFFICIENT, DefaultHallCoefficient.class);
    }

    /**
     * Gets all instances of HallCoefficient from the ontology.
     */
    public Collection<? extends HallCoefficient> getAllHallCoefficientInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HALLCOEFFICIENT, DefaultHallCoefficient.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#HallMobility
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#HallMobility", HallMobility.class, DefaultHallMobility.class);
    }

    /**
     * Creates an instance of type HallMobility.  Modifies the underlying ontology.
     */
    public HallMobility createHallMobility(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HALLMOBILITY, DefaultHallMobility.class);
    }

    /**
     * Gets an instance of type HallMobility with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HallMobility getHallMobility(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HALLMOBILITY, DefaultHallMobility.class);
    }

    /**
     * Gets all instances of HallMobility from the ontology.
     */
    public Collection<? extends HallMobility> getAllHallMobilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HALLMOBILITY, DefaultHallMobility.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#HeatCapacityDiscontinuity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#HeatCapacityDiscontinuity", HeatCapacityDiscontinuity.class, DefaultHeatCapacityDiscontinuity.class);
    }

    /**
     * Creates an instance of type HeatCapacityDiscontinuity.  Modifies the underlying ontology.
     */
    public HeatCapacityDiscontinuity createHeatCapacityDiscontinuity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HEATCAPACITYDISCONTINUITY, DefaultHeatCapacityDiscontinuity.class);
    }

    /**
     * Gets an instance of type HeatCapacityDiscontinuity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HeatCapacityDiscontinuity getHeatCapacityDiscontinuity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HEATCAPACITYDISCONTINUITY, DefaultHeatCapacityDiscontinuity.class);
    }

    /**
     * Gets all instances of HeatCapacityDiscontinuity from the ontology.
     */
    public Collection<? extends HeatCapacityDiscontinuity> getAllHeatCapacityDiscontinuityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HEATCAPACITYDISCONTINUITY, DefaultHeatCapacityDiscontinuity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#HeatCapacityDiscontinuityAtPhaseTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#HeatCapacityDiscontinuityAtPhaseTransition", HeatCapacityDiscontinuityAtPhaseTransition.class, DefaultHeatCapacityDiscontinuityAtPhaseTransition.class);
    }

    /**
     * Creates an instance of type HeatCapacityDiscontinuityAtPhaseTransition.  Modifies the underlying ontology.
     */
    public HeatCapacityDiscontinuityAtPhaseTransition createHeatCapacityDiscontinuityAtPhaseTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HEATCAPACITYDISCONTINUITYATPHASETRANSITION, DefaultHeatCapacityDiscontinuityAtPhaseTransition.class);
    }

    /**
     * Gets an instance of type HeatCapacityDiscontinuityAtPhaseTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HeatCapacityDiscontinuityAtPhaseTransition getHeatCapacityDiscontinuityAtPhaseTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HEATCAPACITYDISCONTINUITYATPHASETRANSITION, DefaultHeatCapacityDiscontinuityAtPhaseTransition.class);
    }

    /**
     * Gets all instances of HeatCapacityDiscontinuityAtPhaseTransition from the ontology.
     */
    public Collection<? extends HeatCapacityDiscontinuityAtPhaseTransition> getAllHeatCapacityDiscontinuityAtPhaseTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HEATCAPACITYDISCONTINUITYATPHASETRANSITION, DefaultHeatCapacityDiscontinuityAtPhaseTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#High-FrequencyPermittivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#High-FrequencyPermittivity", High_FrequencyPermittivity.class, DefaultHigh_FrequencyPermittivity.class);
    }

    /**
     * Creates an instance of type High_FrequencyPermittivity.  Modifies the underlying ontology.
     */
    public High_FrequencyPermittivity createHigh_FrequencyPermittivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HIGH_FREQUENCYPERMITTIVITY, DefaultHigh_FrequencyPermittivity.class);
    }

    /**
     * Gets an instance of type High_FrequencyPermittivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public High_FrequencyPermittivity getHigh_FrequencyPermittivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HIGH_FREQUENCYPERMITTIVITY, DefaultHigh_FrequencyPermittivity.class);
    }

    /**
     * Gets all instances of High_FrequencyPermittivity from the ontology.
     */
    public Collection<? extends High_FrequencyPermittivity> getAllHigh_FrequencyPermittivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HIGH_FREQUENCYPERMITTIVITY, DefaultHigh_FrequencyPermittivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#HoleConcentration
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#HoleConcentration", HoleConcentration.class, DefaultHoleConcentration.class);
    }

    /**
     * Creates an instance of type HoleConcentration.  Modifies the underlying ontology.
     */
    public HoleConcentration createHoleConcentration(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOLECONCENTRATION, DefaultHoleConcentration.class);
    }

    /**
     * Gets an instance of type HoleConcentration with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HoleConcentration getHoleConcentration(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOLECONCENTRATION, DefaultHoleConcentration.class);
    }

    /**
     * Gets all instances of HoleConcentration from the ontology.
     */
    public Collection<? extends HoleConcentration> getAllHoleConcentrationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOLECONCENTRATION, DefaultHoleConcentration.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#HoleMobility
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#HoleMobility", HoleMobility.class, DefaultHoleMobility.class);
    }

    /**
     * Creates an instance of type HoleMobility.  Modifies the underlying ontology.
     */
    public HoleMobility createHoleMobility(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOLEMOBILITY, DefaultHoleMobility.class);
    }

    /**
     * Gets an instance of type HoleMobility with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HoleMobility getHoleMobility(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOLEMOBILITY, DefaultHoleMobility.class);
    }

    /**
     * Gets all instances of HoleMobility from the ontology.
     */
    public Collection<? extends HoleMobility> getAllHoleMobilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOLEMOBILITY, DefaultHoleMobility.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ImaginaryPartOfPermittivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ImaginaryPartOfPermittivity", ImaginaryPartOfPermittivity.class, DefaultImaginaryPartOfPermittivity.class);
    }

    /**
     * Creates an instance of type ImaginaryPartOfPermittivity.  Modifies the underlying ontology.
     */
    public ImaginaryPartOfPermittivity createImaginaryPartOfPermittivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IMAGINARYPARTOFPERMITTIVITY, DefaultImaginaryPartOfPermittivity.class);
    }

    /**
     * Gets an instance of type ImaginaryPartOfPermittivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ImaginaryPartOfPermittivity getImaginaryPartOfPermittivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IMAGINARYPARTOFPERMITTIVITY, DefaultImaginaryPartOfPermittivity.class);
    }

    /**
     * Gets all instances of ImaginaryPartOfPermittivity from the ontology.
     */
    public Collection<? extends ImaginaryPartOfPermittivity> getAllImaginaryPartOfPermittivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IMAGINARYPARTOFPERMITTIVITY, DefaultImaginaryPartOfPermittivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#InitialSlopeOfBc2AtTc
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#InitialSlopeOfBc2AtTc", InitialSlopeOfBc2AtTc.class, DefaultInitialSlopeOfBc2AtTc.class);
    }

    /**
     * Creates an instance of type InitialSlopeOfBc2AtTc.  Modifies the underlying ontology.
     */
    public InitialSlopeOfBc2AtTc createInitialSlopeOfBc2AtTc(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INITIALSLOPEOFBC2ATTC, DefaultInitialSlopeOfBc2AtTc.class);
    }

    /**
     * Gets an instance of type InitialSlopeOfBc2AtTc with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public InitialSlopeOfBc2AtTc getInitialSlopeOfBc2AtTc(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INITIALSLOPEOFBC2ATTC, DefaultInitialSlopeOfBc2AtTc.class);
    }

    /**
     * Gets all instances of InitialSlopeOfBc2AtTc from the ontology.
     */
    public Collection<? extends InitialSlopeOfBc2AtTc> getAllInitialSlopeOfBc2AtTcInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INITIALSLOPEOFBC2ATTC, DefaultInitialSlopeOfBc2AtTc.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#IsothermalVolumeCompressibility
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#IsothermalVolumeCompressibility", IsothermalVolumeCompressibility.class, DefaultIsothermalVolumeCompressibility.class);
    }

    /**
     * Creates an instance of type IsothermalVolumeCompressibility.  Modifies the underlying ontology.
     */
    public IsothermalVolumeCompressibility createIsothermalVolumeCompressibility(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ISOTHERMALVOLUMECOMPRESSIBILITY, DefaultIsothermalVolumeCompressibility.class);
    }

    /**
     * Gets an instance of type IsothermalVolumeCompressibility with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IsothermalVolumeCompressibility getIsothermalVolumeCompressibility(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ISOTHERMALVOLUMECOMPRESSIBILITY, DefaultIsothermalVolumeCompressibility.class);
    }

    /**
     * Gets all instances of IsothermalVolumeCompressibility from the ontology.
     */
    public Collection<? extends IsothermalVolumeCompressibility> getAllIsothermalVolumeCompressibilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ISOTHERMALVOLUMECOMPRESSIBILITY, DefaultIsothermalVolumeCompressibility.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#KnoopHardnessNumber
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#KnoopHardnessNumber", KnoopHardnessNumber.class, DefaultKnoopHardnessNumber.class);
    }

    /**
     * Creates an instance of type KnoopHardnessNumber.  Modifies the underlying ontology.
     */
    public KnoopHardnessNumber createKnoopHardnessNumber(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_KNOOPHARDNESSNUMBER, DefaultKnoopHardnessNumber.class);
    }

    /**
     * Gets an instance of type KnoopHardnessNumber with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public KnoopHardnessNumber getKnoopHardnessNumber(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_KNOOPHARDNESSNUMBER, DefaultKnoopHardnessNumber.class);
    }

    /**
     * Gets all instances of KnoopHardnessNumber from the ontology.
     */
    public Collection<? extends KnoopHardnessNumber> getAllKnoopHardnessNumberInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_KNOOPHARDNESSNUMBER, DefaultKnoopHardnessNumber.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#LinearCompressibility
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#LinearCompressibility", LinearCompressibility.class, DefaultLinearCompressibility.class);
    }

    /**
     * Creates an instance of type LinearCompressibility.  Modifies the underlying ontology.
     */
    public LinearCompressibility createLinearCompressibility(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LINEARCOMPRESSIBILITY, DefaultLinearCompressibility.class);
    }

    /**
     * Gets an instance of type LinearCompressibility with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LinearCompressibility getLinearCompressibility(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LINEARCOMPRESSIBILITY, DefaultLinearCompressibility.class);
    }

    /**
     * Gets all instances of LinearCompressibility from the ontology.
     */
    public Collection<? extends LinearCompressibility> getAllLinearCompressibilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LINEARCOMPRESSIBILITY, DefaultLinearCompressibility.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#LinearThermalExpansionCoefficient
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#LinearThermalExpansionCoefficient", LinearThermalExpansionCoefficient.class, DefaultLinearThermalExpansionCoefficient.class);
    }

    /**
     * Creates an instance of type LinearThermalExpansionCoefficient.  Modifies the underlying ontology.
     */
    public LinearThermalExpansionCoefficient createLinearThermalExpansionCoefficient(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LINEARTHERMALEXPANSIONCOEFFICIENT, DefaultLinearThermalExpansionCoefficient.class);
    }

    /**
     * Gets an instance of type LinearThermalExpansionCoefficient with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LinearThermalExpansionCoefficient getLinearThermalExpansionCoefficient(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LINEARTHERMALEXPANSIONCOEFFICIENT, DefaultLinearThermalExpansionCoefficient.class);
    }

    /**
     * Gets all instances of LinearThermalExpansionCoefficient from the ontology.
     */
    public Collection<? extends LinearThermalExpansionCoefficient> getAllLinearThermalExpansionCoefficientInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LINEARTHERMALEXPANSIONCOEFFICIENT, DefaultLinearThermalExpansionCoefficient.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#LinearThermalExpansionCoefficient_D
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#LinearThermalExpansionCoefficient_D", LinearThermalExpansionCoefficient_D.class, DefaultLinearThermalExpansionCoefficient_D.class);
    }

    /**
     * Creates an instance of type LinearThermalExpansionCoefficient_D.  Modifies the underlying ontology.
     */
    public LinearThermalExpansionCoefficient_D createLinearThermalExpansionCoefficient_D(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LINEARTHERMALEXPANSIONCOEFFICIENT_D, DefaultLinearThermalExpansionCoefficient_D.class);
    }

    /**
     * Gets an instance of type LinearThermalExpansionCoefficient_D with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LinearThermalExpansionCoefficient_D getLinearThermalExpansionCoefficient_D(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LINEARTHERMALEXPANSIONCOEFFICIENT_D, DefaultLinearThermalExpansionCoefficient_D.class);
    }

    /**
     * Gets all instances of LinearThermalExpansionCoefficient_D from the ontology.
     */
    public Collection<? extends LinearThermalExpansionCoefficient_D> getAllLinearThermalExpansionCoefficient_DInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LINEARTHERMALEXPANSIONCOEFFICIENT_D, DefaultLinearThermalExpansionCoefficient_D.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#LondonPenetrationDepth
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#LondonPenetrationDepth", LondonPenetrationDepth.class, DefaultLondonPenetrationDepth.class);
    }

    /**
     * Creates an instance of type LondonPenetrationDepth.  Modifies the underlying ontology.
     */
    public LondonPenetrationDepth createLondonPenetrationDepth(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LONDONPENETRATIONDEPTH, DefaultLondonPenetrationDepth.class);
    }

    /**
     * Gets an instance of type LondonPenetrationDepth with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LondonPenetrationDepth getLondonPenetrationDepth(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LONDONPENETRATIONDEPTH, DefaultLondonPenetrationDepth.class);
    }

    /**
     * Gets all instances of LondonPenetrationDepth from the ontology.
     */
    public Collection<? extends LondonPenetrationDepth> getAllLondonPenetrationDepthInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LONDONPENETRATIONDEPTH, DefaultLondonPenetrationDepth.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#LongitudinalElasticCoefficient
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#LongitudinalElasticCoefficient", LongitudinalElasticCoefficient.class, DefaultLongitudinalElasticCoefficient.class);
    }

    /**
     * Creates an instance of type LongitudinalElasticCoefficient.  Modifies the underlying ontology.
     */
    public LongitudinalElasticCoefficient createLongitudinalElasticCoefficient(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LONGITUDINALELASTICCOEFFICIENT, DefaultLongitudinalElasticCoefficient.class);
    }

    /**
     * Gets an instance of type LongitudinalElasticCoefficient with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LongitudinalElasticCoefficient getLongitudinalElasticCoefficient(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LONGITUDINALELASTICCOEFFICIENT, DefaultLongitudinalElasticCoefficient.class);
    }

    /**
     * Gets all instances of LongitudinalElasticCoefficient from the ontology.
     */
    public Collection<? extends LongitudinalElasticCoefficient> getAllLongitudinalElasticCoefficientInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LONGITUDINALELASTICCOEFFICIENT, DefaultLongitudinalElasticCoefficient.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#LongitudinalSoundVelocity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#LongitudinalSoundVelocity", LongitudinalSoundVelocity.class, DefaultLongitudinalSoundVelocity.class);
    }

    /**
     * Creates an instance of type LongitudinalSoundVelocity.  Modifies the underlying ontology.
     */
    public LongitudinalSoundVelocity createLongitudinalSoundVelocity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LONGITUDINALSOUNDVELOCITY, DefaultLongitudinalSoundVelocity.class);
    }

    /**
     * Gets an instance of type LongitudinalSoundVelocity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LongitudinalSoundVelocity getLongitudinalSoundVelocity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LONGITUDINALSOUNDVELOCITY, DefaultLongitudinalSoundVelocity.class);
    }

    /**
     * Gets all instances of LongitudinalSoundVelocity from the ontology.
     */
    public Collection<? extends LongitudinalSoundVelocity> getAllLongitudinalSoundVelocityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LONGITUDINALSOUNDVELOCITY, DefaultLongitudinalSoundVelocity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#LowerCriticalMagneticFieldStrength
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#LowerCriticalMagneticFieldStrength", LowerCriticalMagneticFieldStrength.class, DefaultLowerCriticalMagneticFieldStrength.class);
    }

    /**
     * Creates an instance of type LowerCriticalMagneticFieldStrength.  Modifies the underlying ontology.
     */
    public LowerCriticalMagneticFieldStrength createLowerCriticalMagneticFieldStrength(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOWERCRITICALMAGNETICFIELDSTRENGTH, DefaultLowerCriticalMagneticFieldStrength.class);
    }

    /**
     * Gets an instance of type LowerCriticalMagneticFieldStrength with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LowerCriticalMagneticFieldStrength getLowerCriticalMagneticFieldStrength(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOWERCRITICALMAGNETICFIELDSTRENGTH, DefaultLowerCriticalMagneticFieldStrength.class);
    }

    /**
     * Gets all instances of LowerCriticalMagneticFieldStrength from the ontology.
     */
    public Collection<? extends LowerCriticalMagneticFieldStrength> getAllLowerCriticalMagneticFieldStrengthInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOWERCRITICALMAGNETICFIELDSTRENGTH, DefaultLowerCriticalMagneticFieldStrength.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#LowestTemperatureForNormalConductivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#LowestTemperatureForNormalConductivity", LowestTemperatureForNormalConductivity.class, DefaultLowestTemperatureForNormalConductivity.class);
    }

    /**
     * Creates an instance of type LowestTemperatureForNormalConductivity.  Modifies the underlying ontology.
     */
    public LowestTemperatureForNormalConductivity createLowestTemperatureForNormalConductivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOWESTTEMPERATUREFORNORMALCONDUCTIVITY, DefaultLowestTemperatureForNormalConductivity.class);
    }

    /**
     * Gets an instance of type LowestTemperatureForNormalConductivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LowestTemperatureForNormalConductivity getLowestTemperatureForNormalConductivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOWESTTEMPERATUREFORNORMALCONDUCTIVITY, DefaultLowestTemperatureForNormalConductivity.class);
    }

    /**
     * Gets all instances of LowestTemperatureForNormalConductivity from the ontology.
     */
    public Collection<? extends LowestTemperatureForNormalConductivity> getAllLowestTemperatureForNormalConductivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOWESTTEMPERATUREFORNORMALCONDUCTIVITY, DefaultLowestTemperatureForNormalConductivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Magnetic
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Magnetic", Magnetic.class, DefaultMagnetic.class);
    }

    /**
     * Creates an instance of type Magnetic.  Modifies the underlying ontology.
     */
    public Magnetic createMagnetic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAGNETIC, DefaultMagnetic.class);
    }

    /**
     * Gets an instance of type Magnetic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Magnetic getMagnetic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAGNETIC, DefaultMagnetic.class);
    }

    /**
     * Gets all instances of Magnetic from the ontology.
     */
    public Collection<? extends Magnetic> getAllMagneticInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAGNETIC, DefaultMagnetic.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MagneticAnisotropyField
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MagneticAnisotropyField", MagneticAnisotropyField.class, DefaultMagneticAnisotropyField.class);
    }

    /**
     * Creates an instance of type MagneticAnisotropyField.  Modifies the underlying ontology.
     */
    public MagneticAnisotropyField createMagneticAnisotropyField(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAGNETICANISOTROPYFIELD, DefaultMagneticAnisotropyField.class);
    }

    /**
     * Gets an instance of type MagneticAnisotropyField with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MagneticAnisotropyField getMagneticAnisotropyField(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAGNETICANISOTROPYFIELD, DefaultMagneticAnisotropyField.class);
    }

    /**
     * Gets all instances of MagneticAnisotropyField from the ontology.
     */
    public Collection<? extends MagneticAnisotropyField> getAllMagneticAnisotropyFieldInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAGNETICANISOTROPYFIELD, DefaultMagneticAnisotropyField.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MagneticFluxDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MagneticFluxDensity", MagneticFluxDensity.class, DefaultMagneticFluxDensity.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MagneticMoment
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MagneticMoment", MagneticMoment.class, DefaultMagneticMoment.class);
    }

    /**
     * Creates an instance of type MagneticMoment.  Modifies the underlying ontology.
     */
    public MagneticMoment createMagneticMoment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAGNETICMOMENT, DefaultMagneticMoment.class);
    }

    /**
     * Gets an instance of type MagneticMoment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MagneticMoment getMagneticMoment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAGNETICMOMENT, DefaultMagneticMoment.class);
    }

    /**
     * Gets all instances of MagneticMoment from the ontology.
     */
    public Collection<? extends MagneticMoment> getAllMagneticMomentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAGNETICMOMENT, DefaultMagneticMoment.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MassMagneticSusceptibility
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MassMagneticSusceptibility", MassMagneticSusceptibility.class, DefaultMassMagneticSusceptibility.class);
    }

    /**
     * Creates an instance of type MassMagneticSusceptibility.  Modifies the underlying ontology.
     */
    public MassMagneticSusceptibility createMassMagneticSusceptibility(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MASSMAGNETICSUSCEPTIBILITY, DefaultMassMagneticSusceptibility.class);
    }

    /**
     * Gets an instance of type MassMagneticSusceptibility with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MassMagneticSusceptibility getMassMagneticSusceptibility(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MASSMAGNETICSUSCEPTIBILITY, DefaultMassMagneticSusceptibility.class);
    }

    /**
     * Gets all instances of MassMagneticSusceptibility from the ontology.
     */
    public Collection<? extends MassMagneticSusceptibility> getAllMassMagneticSusceptibilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MASSMAGNETICSUSCEPTIBILITY, DefaultMassMagneticSusceptibility.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MeanValence
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MeanValence", MeanValence.class, DefaultMeanValence.class);
    }

    /**
     * Creates an instance of type MeanValence.  Modifies the underlying ontology.
     */
    public MeanValence createMeanValence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEANVALENCE, DefaultMeanValence.class);
    }

    /**
     * Gets an instance of type MeanValence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeanValence getMeanValence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEANVALENCE, DefaultMeanValence.class);
    }

    /**
     * Gets all instances of MeanValence from the ontology.
     */
    public Collection<? extends MeanValence> getAllMeanValenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEANVALENCE, DefaultMeanValence.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Mechanical
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Mechanical", Mechanical.class, DefaultMechanical.class);
    }

    /**
     * Creates an instance of type Mechanical.  Modifies the underlying ontology.
     */
    public Mechanical createMechanical(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MECHANICAL, DefaultMechanical.class);
    }

    /**
     * Gets an instance of type Mechanical with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mechanical getMechanical(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MECHANICAL, DefaultMechanical.class);
    }

    /**
     * Gets all instances of Mechanical from the ontology.
     */
    public Collection<? extends Mechanical> getAllMechanicalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MECHANICAL, DefaultMechanical.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MeltingTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MeltingTemperature", MeltingTemperature.class, DefaultMeltingTemperature.class);
    }

    /**
     * Creates an instance of type MeltingTemperature.  Modifies the underlying ontology.
     */
    public MeltingTemperature createMeltingTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MELTINGTEMPERATURE, DefaultMeltingTemperature.class);
    }

    /**
     * Gets an instance of type MeltingTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeltingTemperature getMeltingTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MELTINGTEMPERATURE, DefaultMeltingTemperature.class);
    }

    /**
     * Gets all instances of MeltingTemperature from the ontology.
     */
    public Collection<? extends MeltingTemperature> getAllMeltingTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MELTINGTEMPERATURE, DefaultMeltingTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Microhardness
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Microhardness", Microhardness.class, DefaultMicrohardness.class);
    }

    /**
     * Creates an instance of type Microhardness.  Modifies the underlying ontology.
     */
    public Microhardness createMicrohardness(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MICROHARDNESS, DefaultMicrohardness.class);
    }

    /**
     * Gets an instance of type Microhardness with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Microhardness getMicrohardness(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MICROHARDNESS, DefaultMicrohardness.class);
    }

    /**
     * Gets all instances of Microhardness from the ontology.
     */
    public Collection<? extends Microhardness> getAllMicrohardnessInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MICROHARDNESS, DefaultMicrohardness.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarElectronicHeatCapacityCoefficient
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarElectronicHeatCapacityCoefficient", MolarElectronicHeatCapacityCoefficient.class, DefaultMolarElectronicHeatCapacityCoefficient.class);
    }

    /**
     * Creates an instance of type MolarElectronicHeatCapacityCoefficient.  Modifies the underlying ontology.
     */
    public MolarElectronicHeatCapacityCoefficient createMolarElectronicHeatCapacityCoefficient(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARELECTRONICHEATCAPACITYCOEFFICIENT, DefaultMolarElectronicHeatCapacityCoefficient.class);
    }

    /**
     * Gets an instance of type MolarElectronicHeatCapacityCoefficient with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarElectronicHeatCapacityCoefficient getMolarElectronicHeatCapacityCoefficient(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARELECTRONICHEATCAPACITYCOEFFICIENT, DefaultMolarElectronicHeatCapacityCoefficient.class);
    }

    /**
     * Gets all instances of MolarElectronicHeatCapacityCoefficient from the ontology.
     */
    public Collection<? extends MolarElectronicHeatCapacityCoefficient> getAllMolarElectronicHeatCapacityCoefficientInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARELECTRONICHEATCAPACITYCOEFFICIENT, DefaultMolarElectronicHeatCapacityCoefficient.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarEnthalpy
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarEnthalpy", MolarEnthalpy.class, DefaultMolarEnthalpy.class);
    }

    /**
     * Creates an instance of type MolarEnthalpy.  Modifies the underlying ontology.
     */
    public MolarEnthalpy createMolarEnthalpy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARENTHALPY, DefaultMolarEnthalpy.class);
    }

    /**
     * Gets an instance of type MolarEnthalpy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarEnthalpy getMolarEnthalpy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARENTHALPY, DefaultMolarEnthalpy.class);
    }

    /**
     * Gets all instances of MolarEnthalpy from the ontology.
     */
    public Collection<? extends MolarEnthalpy> getAllMolarEnthalpyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARENTHALPY, DefaultMolarEnthalpy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarEnthalpyChangeAtMeltingPoint
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarEnthalpyChangeAtMeltingPoint", MolarEnthalpyChangeAtMeltingPoint.class, DefaultMolarEnthalpyChangeAtMeltingPoint.class);
    }

    /**
     * Creates an instance of type MolarEnthalpyChangeAtMeltingPoint.  Modifies the underlying ontology.
     */
    public MolarEnthalpyChangeAtMeltingPoint createMolarEnthalpyChangeAtMeltingPoint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARENTHALPYCHANGEATMELTINGPOINT, DefaultMolarEnthalpyChangeAtMeltingPoint.class);
    }

    /**
     * Gets an instance of type MolarEnthalpyChangeAtMeltingPoint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarEnthalpyChangeAtMeltingPoint getMolarEnthalpyChangeAtMeltingPoint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARENTHALPYCHANGEATMELTINGPOINT, DefaultMolarEnthalpyChangeAtMeltingPoint.class);
    }

    /**
     * Gets all instances of MolarEnthalpyChangeAtMeltingPoint from the ontology.
     */
    public Collection<? extends MolarEnthalpyChangeAtMeltingPoint> getAllMolarEnthalpyChangeAtMeltingPointInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARENTHALPYCHANGEATMELTINGPOINT, DefaultMolarEnthalpyChangeAtMeltingPoint.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarEnthalpyChangeAtPhaseTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarEnthalpyChangeAtPhaseTransition", MolarEnthalpyChangeAtPhaseTransition.class, DefaultMolarEnthalpyChangeAtPhaseTransition.class);
    }

    /**
     * Creates an instance of type MolarEnthalpyChangeAtPhaseTransition.  Modifies the underlying ontology.
     */
    public MolarEnthalpyChangeAtPhaseTransition createMolarEnthalpyChangeAtPhaseTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARENTHALPYCHANGEATPHASETRANSITION, DefaultMolarEnthalpyChangeAtPhaseTransition.class);
    }

    /**
     * Gets an instance of type MolarEnthalpyChangeAtPhaseTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarEnthalpyChangeAtPhaseTransition getMolarEnthalpyChangeAtPhaseTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARENTHALPYCHANGEATPHASETRANSITION, DefaultMolarEnthalpyChangeAtPhaseTransition.class);
    }

    /**
     * Gets all instances of MolarEnthalpyChangeAtPhaseTransition from the ontology.
     */
    public Collection<? extends MolarEnthalpyChangeAtPhaseTransition> getAllMolarEnthalpyChangeAtPhaseTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARENTHALPYCHANGEATPHASETRANSITION, DefaultMolarEnthalpyChangeAtPhaseTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarEnthalpyOfFormation
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarEnthalpyOfFormation", MolarEnthalpyOfFormation.class, DefaultMolarEnthalpyOfFormation.class);
    }

    /**
     * Creates an instance of type MolarEnthalpyOfFormation.  Modifies the underlying ontology.
     */
    public MolarEnthalpyOfFormation createMolarEnthalpyOfFormation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARENTHALPYOFFORMATION, DefaultMolarEnthalpyOfFormation.class);
    }

    /**
     * Gets an instance of type MolarEnthalpyOfFormation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarEnthalpyOfFormation getMolarEnthalpyOfFormation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARENTHALPYOFFORMATION, DefaultMolarEnthalpyOfFormation.class);
    }

    /**
     * Gets all instances of MolarEnthalpyOfFormation from the ontology.
     */
    public Collection<? extends MolarEnthalpyOfFormation> getAllMolarEnthalpyOfFormationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARENTHALPYOFFORMATION, DefaultMolarEnthalpyOfFormation.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarEntropy
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarEntropy", MolarEntropy.class, DefaultMolarEntropy.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarEntropyChangeAtMeltingPoint
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarEntropyChangeAtMeltingPoint", MolarEntropyChangeAtMeltingPoint.class, DefaultMolarEntropyChangeAtMeltingPoint.class);
    }

    /**
     * Creates an instance of type MolarEntropyChangeAtMeltingPoint.  Modifies the underlying ontology.
     */
    public MolarEntropyChangeAtMeltingPoint createMolarEntropyChangeAtMeltingPoint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARENTROPYCHANGEATMELTINGPOINT, DefaultMolarEntropyChangeAtMeltingPoint.class);
    }

    /**
     * Gets an instance of type MolarEntropyChangeAtMeltingPoint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarEntropyChangeAtMeltingPoint getMolarEntropyChangeAtMeltingPoint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARENTROPYCHANGEATMELTINGPOINT, DefaultMolarEntropyChangeAtMeltingPoint.class);
    }

    /**
     * Gets all instances of MolarEntropyChangeAtMeltingPoint from the ontology.
     */
    public Collection<? extends MolarEntropyChangeAtMeltingPoint> getAllMolarEntropyChangeAtMeltingPointInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARENTROPYCHANGEATMELTINGPOINT, DefaultMolarEntropyChangeAtMeltingPoint.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarEntropyChangeAtPhaseTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarEntropyChangeAtPhaseTransition", MolarEntropyChangeAtPhaseTransition.class, DefaultMolarEntropyChangeAtPhaseTransition.class);
    }

    /**
     * Creates an instance of type MolarEntropyChangeAtPhaseTransition.  Modifies the underlying ontology.
     */
    public MolarEntropyChangeAtPhaseTransition createMolarEntropyChangeAtPhaseTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARENTROPYCHANGEATPHASETRANSITION, DefaultMolarEntropyChangeAtPhaseTransition.class);
    }

    /**
     * Gets an instance of type MolarEntropyChangeAtPhaseTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarEntropyChangeAtPhaseTransition getMolarEntropyChangeAtPhaseTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARENTROPYCHANGEATPHASETRANSITION, DefaultMolarEntropyChangeAtPhaseTransition.class);
    }

    /**
     * Gets all instances of MolarEntropyChangeAtPhaseTransition from the ontology.
     */
    public Collection<? extends MolarEntropyChangeAtPhaseTransition> getAllMolarEntropyChangeAtPhaseTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARENTROPYCHANGEATPHASETRANSITION, DefaultMolarEntropyChangeAtPhaseTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarEntropyOfFormation
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarEntropyOfFormation", MolarEntropyOfFormation.class, DefaultMolarEntropyOfFormation.class);
    }

    /**
     * Creates an instance of type MolarEntropyOfFormation.  Modifies the underlying ontology.
     */
    public MolarEntropyOfFormation createMolarEntropyOfFormation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARENTROPYOFFORMATION, DefaultMolarEntropyOfFormation.class);
    }

    /**
     * Gets an instance of type MolarEntropyOfFormation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarEntropyOfFormation getMolarEntropyOfFormation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARENTROPYOFFORMATION, DefaultMolarEntropyOfFormation.class);
    }

    /**
     * Gets all instances of MolarEntropyOfFormation from the ontology.
     */
    public Collection<? extends MolarEntropyOfFormation> getAllMolarEntropyOfFormationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARENTROPYOFFORMATION, DefaultMolarEntropyOfFormation.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarGibbsEnergy
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarGibbsEnergy", MolarGibbsEnergy.class, DefaultMolarGibbsEnergy.class);
    }

    /**
     * Creates an instance of type MolarGibbsEnergy.  Modifies the underlying ontology.
     */
    public MolarGibbsEnergy createMolarGibbsEnergy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARGIBBSENERGY, DefaultMolarGibbsEnergy.class);
    }

    /**
     * Gets an instance of type MolarGibbsEnergy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarGibbsEnergy getMolarGibbsEnergy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARGIBBSENERGY, DefaultMolarGibbsEnergy.class);
    }

    /**
     * Gets all instances of MolarGibbsEnergy from the ontology.
     */
    public Collection<? extends MolarGibbsEnergy> getAllMolarGibbsEnergyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARGIBBSENERGY, DefaultMolarGibbsEnergy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarGibbsEnergyOfFormation
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarGibbsEnergyOfFormation", MolarGibbsEnergyOfFormation.class, DefaultMolarGibbsEnergyOfFormation.class);
    }

    /**
     * Creates an instance of type MolarGibbsEnergyOfFormation.  Modifies the underlying ontology.
     */
    public MolarGibbsEnergyOfFormation createMolarGibbsEnergyOfFormation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARGIBBSENERGYOFFORMATION, DefaultMolarGibbsEnergyOfFormation.class);
    }

    /**
     * Gets an instance of type MolarGibbsEnergyOfFormation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarGibbsEnergyOfFormation getMolarGibbsEnergyOfFormation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARGIBBSENERGYOFFORMATION, DefaultMolarGibbsEnergyOfFormation.class);
    }

    /**
     * Gets all instances of MolarGibbsEnergyOfFormation from the ontology.
     */
    public Collection<? extends MolarGibbsEnergyOfFormation> getAllMolarGibbsEnergyOfFormationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARGIBBSENERGYOFFORMATION, DefaultMolarGibbsEnergyOfFormation.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarHeatCapacityAtConstantPressure
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarHeatCapacityAtConstantPressure", MolarHeatCapacityAtConstantPressure.class, DefaultMolarHeatCapacityAtConstantPressure.class);
    }

    /**
     * Creates an instance of type MolarHeatCapacityAtConstantPressure.  Modifies the underlying ontology.
     */
    public MolarHeatCapacityAtConstantPressure createMolarHeatCapacityAtConstantPressure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARHEATCAPACITYATCONSTANTPRESSURE, DefaultMolarHeatCapacityAtConstantPressure.class);
    }

    /**
     * Gets an instance of type MolarHeatCapacityAtConstantPressure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarHeatCapacityAtConstantPressure getMolarHeatCapacityAtConstantPressure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARHEATCAPACITYATCONSTANTPRESSURE, DefaultMolarHeatCapacityAtConstantPressure.class);
    }

    /**
     * Gets all instances of MolarHeatCapacityAtConstantPressure from the ontology.
     */
    public Collection<? extends MolarHeatCapacityAtConstantPressure> getAllMolarHeatCapacityAtConstantPressureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARHEATCAPACITYATCONSTANTPRESSURE, DefaultMolarHeatCapacityAtConstantPressure.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#MolarMagneticSusceptibility
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#MolarMagneticSusceptibility", MolarMagneticSusceptibility.class, DefaultMolarMagneticSusceptibility.class);
    }

    /**
     * Creates an instance of type MolarMagneticSusceptibility.  Modifies the underlying ontology.
     */
    public MolarMagneticSusceptibility createMolarMagneticSusceptibility(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARMAGNETICSUSCEPTIBILITY, DefaultMolarMagneticSusceptibility.class);
    }

    /**
     * Gets an instance of type MolarMagneticSusceptibility with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarMagneticSusceptibility getMolarMagneticSusceptibility(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARMAGNETICSUSCEPTIBILITY, DefaultMolarMagneticSusceptibility.class);
    }

    /**
     * Gets all instances of MolarMagneticSusceptibility from the ontology.
     */
    public Collection<? extends MolarMagneticSusceptibility> getAllMolarMagneticSusceptibilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARMAGNETICSUSCEPTIBILITY, DefaultMolarMagneticSusceptibility.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#NeelTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#NeelTemperature", NeelTemperature.class, DefaultNeelTemperature.class);
    }

    /**
     * Creates an instance of type NeelTemperature.  Modifies the underlying ontology.
     */
    public NeelTemperature createNeelTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NEELTEMPERATURE, DefaultNeelTemperature.class);
    }

    /**
     * Gets an instance of type NeelTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NeelTemperature getNeelTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NEELTEMPERATURE, DefaultNeelTemperature.class);
    }

    /**
     * Gets all instances of NeelTemperature from the ontology.
     */
    public Collection<? extends NeelTemperature> getAllNeelTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NEELTEMPERATURE, DefaultNeelTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Nuclear
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Nuclear", Nuclear.class, DefaultNuclear.class);
    }

    /**
     * Creates an instance of type Nuclear.  Modifies the underlying ontology.
     */
    public Nuclear createNuclear(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NUCLEAR, DefaultNuclear.class);
    }

    /**
     * Gets an instance of type Nuclear with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Nuclear getNuclear(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NUCLEAR, DefaultNuclear.class);
    }

    /**
     * Gets all instances of Nuclear from the ontology.
     */
    public Collection<? extends Nuclear> getAllNuclearInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NUCLEAR, DefaultNuclear.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Optical
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Optical", Optical.class, DefaultOptical.class);
    }

    /**
     * Creates an instance of type Optical.  Modifies the underlying ontology.
     */
    public Optical createOptical(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OPTICAL, DefaultOptical.class);
    }

    /**
     * Gets an instance of type Optical with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Optical getOptical(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OPTICAL, DefaultOptical.class);
    }

    /**
     * Gets all instances of Optical from the ontology.
     */
    public Collection<? extends Optical> getAllOpticalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OPTICAL, DefaultOptical.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#OpticalAbsorptionCoefficient
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#OpticalAbsorptionCoefficient", OpticalAbsorptionCoefficient.class, DefaultOpticalAbsorptionCoefficient.class);
    }

    /**
     * Creates an instance of type OpticalAbsorptionCoefficient.  Modifies the underlying ontology.
     */
    public OpticalAbsorptionCoefficient createOpticalAbsorptionCoefficient(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OPTICALABSORPTIONCOEFFICIENT, DefaultOpticalAbsorptionCoefficient.class);
    }

    /**
     * Gets an instance of type OpticalAbsorptionCoefficient with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OpticalAbsorptionCoefficient getOpticalAbsorptionCoefficient(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OPTICALABSORPTIONCOEFFICIENT, DefaultOpticalAbsorptionCoefficient.class);
    }

    /**
     * Gets all instances of OpticalAbsorptionCoefficient from the ontology.
     */
    public Collection<? extends OpticalAbsorptionCoefficient> getAllOpticalAbsorptionCoefficientInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OPTICALABSORPTIONCOEFFICIENT, DefaultOpticalAbsorptionCoefficient.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#OpticalConductivitySopt
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#OpticalConductivitySopt", OpticalConductivitySopt.class, DefaultOpticalConductivitySopt.class);
    }

    /**
     * Creates an instance of type OpticalConductivitySopt.  Modifies the underlying ontology.
     */
    public OpticalConductivitySopt createOpticalConductivitySopt(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OPTICALCONDUCTIVITYSOPT, DefaultOpticalConductivitySopt.class);
    }

    /**
     * Gets an instance of type OpticalConductivitySopt with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OpticalConductivitySopt getOpticalConductivitySopt(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OPTICALCONDUCTIVITYSOPT, DefaultOpticalConductivitySopt.class);
    }

    /**
     * Gets all instances of OpticalConductivitySopt from the ontology.
     */
    public Collection<? extends OpticalConductivitySopt> getAllOpticalConductivitySoptInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OPTICALCONDUCTIVITYSOPT, DefaultOpticalConductivitySopt.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ParamagneticCurieTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ParamagneticCurieTemperature", ParamagneticCurieTemperature.class, DefaultParamagneticCurieTemperature.class);
    }

    /**
     * Creates an instance of type ParamagneticCurieTemperature.  Modifies the underlying ontology.
     */
    public ParamagneticCurieTemperature createParamagneticCurieTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PARAMAGNETICCURIETEMPERATURE, DefaultParamagneticCurieTemperature.class);
    }

    /**
     * Gets an instance of type ParamagneticCurieTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ParamagneticCurieTemperature getParamagneticCurieTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PARAMAGNETICCURIETEMPERATURE, DefaultParamagneticCurieTemperature.class);
    }

    /**
     * Gets all instances of ParamagneticCurieTemperature from the ontology.
     */
    public Collection<? extends ParamagneticCurieTemperature> getAllParamagneticCurieTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PARAMAGNETICCURIETEMPERATURE, DefaultParamagneticCurieTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PeritecticTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PeritecticTemperature", PeritecticTemperature.class, DefaultPeritecticTemperature.class);
    }

    /**
     * Creates an instance of type PeritecticTemperature.  Modifies the underlying ontology.
     */
    public PeritecticTemperature createPeritecticTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERITECTICTEMPERATURE, DefaultPeritecticTemperature.class);
    }

    /**
     * Gets an instance of type PeritecticTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PeritecticTemperature getPeritecticTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERITECTICTEMPERATURE, DefaultPeritecticTemperature.class);
    }

    /**
     * Gets all instances of PeritecticTemperature from the ontology.
     */
    public Collection<? extends PeritecticTemperature> getAllPeritecticTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERITECTICTEMPERATURE, DefaultPeritecticTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Permittivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Permittivity", Permittivity.class, DefaultPermittivity.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PhaseTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PhaseTransition", PhaseTransition.class, DefaultPhaseTransition.class);
    }

    /**
     * Creates an instance of type PhaseTransition.  Modifies the underlying ontology.
     */
    public PhaseTransition createPhaseTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHASETRANSITION, DefaultPhaseTransition.class);
    }

    /**
     * Gets an instance of type PhaseTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhaseTransition getPhaseTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHASETRANSITION, DefaultPhaseTransition.class);
    }

    /**
     * Gets all instances of PhaseTransition from the ontology.
     */
    public Collection<? extends PhaseTransition> getAllPhaseTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHASETRANSITION, DefaultPhaseTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PhaseTransitionAtHighPressure
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PhaseTransitionAtHighPressure", PhaseTransitionAtHighPressure.class, DefaultPhaseTransitionAtHighPressure.class);
    }

    /**
     * Creates an instance of type PhaseTransitionAtHighPressure.  Modifies the underlying ontology.
     */
    public PhaseTransitionAtHighPressure createPhaseTransitionAtHighPressure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHASETRANSITIONATHIGHPRESSURE, DefaultPhaseTransitionAtHighPressure.class);
    }

    /**
     * Gets an instance of type PhaseTransitionAtHighPressure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhaseTransitionAtHighPressure getPhaseTransitionAtHighPressure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHASETRANSITIONATHIGHPRESSURE, DefaultPhaseTransitionAtHighPressure.class);
    }

    /**
     * Gets all instances of PhaseTransitionAtHighPressure from the ontology.
     */
    public Collection<? extends PhaseTransitionAtHighPressure> getAllPhaseTransitionAtHighPressureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHASETRANSITIONATHIGHPRESSURE, DefaultPhaseTransitionAtHighPressure.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PhaseTransitionAtHighTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PhaseTransitionAtHighTemperature", PhaseTransitionAtHighTemperature.class, DefaultPhaseTransitionAtHighTemperature.class);
    }

    /**
     * Creates an instance of type PhaseTransitionAtHighTemperature.  Modifies the underlying ontology.
     */
    public PhaseTransitionAtHighTemperature createPhaseTransitionAtHighTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHASETRANSITIONATHIGHTEMPERATURE, DefaultPhaseTransitionAtHighTemperature.class);
    }

    /**
     * Gets an instance of type PhaseTransitionAtHighTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhaseTransitionAtHighTemperature getPhaseTransitionAtHighTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHASETRANSITIONATHIGHTEMPERATURE, DefaultPhaseTransitionAtHighTemperature.class);
    }

    /**
     * Gets all instances of PhaseTransitionAtHighTemperature from the ontology.
     */
    public Collection<? extends PhaseTransitionAtHighTemperature> getAllPhaseTransitionAtHighTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHASETRANSITIONATHIGHTEMPERATURE, DefaultPhaseTransitionAtHighTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PhaseTransitionAtLowPressure
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PhaseTransitionAtLowPressure", PhaseTransitionAtLowPressure.class, DefaultPhaseTransitionAtLowPressure.class);
    }

    /**
     * Creates an instance of type PhaseTransitionAtLowPressure.  Modifies the underlying ontology.
     */
    public PhaseTransitionAtLowPressure createPhaseTransitionAtLowPressure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHASETRANSITIONATLOWPRESSURE, DefaultPhaseTransitionAtLowPressure.class);
    }

    /**
     * Gets an instance of type PhaseTransitionAtLowPressure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhaseTransitionAtLowPressure getPhaseTransitionAtLowPressure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHASETRANSITIONATLOWPRESSURE, DefaultPhaseTransitionAtLowPressure.class);
    }

    /**
     * Gets all instances of PhaseTransitionAtLowPressure from the ontology.
     */
    public Collection<? extends PhaseTransitionAtLowPressure> getAllPhaseTransitionAtLowPressureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHASETRANSITIONATLOWPRESSURE, DefaultPhaseTransitionAtLowPressure.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PhaseTransitionAtLowTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PhaseTransitionAtLowTemperature", PhaseTransitionAtLowTemperature.class, DefaultPhaseTransitionAtLowTemperature.class);
    }

    /**
     * Creates an instance of type PhaseTransitionAtLowTemperature.  Modifies the underlying ontology.
     */
    public PhaseTransitionAtLowTemperature createPhaseTransitionAtLowTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHASETRANSITIONATLOWTEMPERATURE, DefaultPhaseTransitionAtLowTemperature.class);
    }

    /**
     * Gets an instance of type PhaseTransitionAtLowTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhaseTransitionAtLowTemperature getPhaseTransitionAtLowTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHASETRANSITIONATLOWTEMPERATURE, DefaultPhaseTransitionAtLowTemperature.class);
    }

    /**
     * Gets all instances of PhaseTransitionAtLowTemperature from the ontology.
     */
    public Collection<? extends PhaseTransitionAtLowTemperature> getAllPhaseTransitionAtLowTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHASETRANSITIONATLOWTEMPERATURE, DefaultPhaseTransitionAtLowTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Physical
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Physical", Physical.class, DefaultPhysical.class);
    }

    /**
     * Creates an instance of type Physical.  Modifies the underlying ontology.
     */
    public Physical createPhysical(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHYSICAL, DefaultPhysical.class);
    }

    /**
     * Gets an instance of type Physical with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Physical getPhysical(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHYSICAL, DefaultPhysical.class);
    }

    /**
     * Gets all instances of Physical from the ontology.
     */
    public Collection<? extends Physical> getAllPhysicalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHYSICAL, DefaultPhysical.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PhysicalQuantity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PhysicalQuantity", PhysicalQuantity.class, DefaultPhysicalQuantity.class);
    }

    /**
     * Creates an instance of type PhysicalQuantity.  Modifies the underlying ontology.
     */
    public PhysicalQuantity createPhysicalQuantity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHYSICALQUANTITY, DefaultPhysicalQuantity.class);
    }

    /**
     * Gets an instance of type PhysicalQuantity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhysicalQuantity getPhysicalQuantity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHYSICALQUANTITY, DefaultPhysicalQuantity.class);
    }

    /**
     * Gets all instances of PhysicalQuantity from the ontology.
     */
    public Collection<? extends PhysicalQuantity> getAllPhysicalQuantityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHYSICALQUANTITY, DefaultPhysicalQuantity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PoissonRatio
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PoissonRatio", PoissonRatio.class, DefaultPoissonRatio.class);
    }

    /**
     * Creates an instance of type PoissonRatio.  Modifies the underlying ontology.
     */
    public PoissonRatio createPoissonRatio(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POISSONRATIO, DefaultPoissonRatio.class);
    }

    /**
     * Gets an instance of type PoissonRatio with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PoissonRatio getPoissonRatio(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POISSONRATIO, DefaultPoissonRatio.class);
    }

    /**
     * Gets all instances of PoissonRatio from the ontology.
     */
    public Collection<? extends PoissonRatio> getAllPoissonRatioInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POISSONRATIO, DefaultPoissonRatio.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Pressure
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Pressure", Pressure.class, DefaultPressure.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PressureDependenceOfPiezoresistivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PressureDependenceOfPiezoresistivity", PressureDependenceOfPiezoresistivity.class, DefaultPressureDependenceOfPiezoresistivity.class);
    }

    /**
     * Creates an instance of type PressureDependenceOfPiezoresistivity.  Modifies the underlying ontology.
     */
    public PressureDependenceOfPiezoresistivity createPressureDependenceOfPiezoresistivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRESSUREDEPENDENCEOFPIEZORESISTIVITY, DefaultPressureDependenceOfPiezoresistivity.class);
    }

    /**
     * Gets an instance of type PressureDependenceOfPiezoresistivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PressureDependenceOfPiezoresistivity getPressureDependenceOfPiezoresistivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRESSUREDEPENDENCEOFPIEZORESISTIVITY, DefaultPressureDependenceOfPiezoresistivity.class);
    }

    /**
     * Gets all instances of PressureDependenceOfPiezoresistivity from the ontology.
     */
    public Collection<? extends PressureDependenceOfPiezoresistivity> getAllPressureDependenceOfPiezoresistivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRESSUREDEPENDENCEOFPIEZORESISTIVITY, DefaultPressureDependenceOfPiezoresistivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PressureForPhaseTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PressureForPhaseTransition", PressureForPhaseTransition.class, DefaultPressureForPhaseTransition.class);
    }

    /**
     * Creates an instance of type PressureForPhaseTransition.  Modifies the underlying ontology.
     */
    public PressureForPhaseTransition createPressureForPhaseTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRESSUREFORPHASETRANSITION, DefaultPressureForPhaseTransition.class);
    }

    /**
     * Gets an instance of type PressureForPhaseTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PressureForPhaseTransition getPressureForPhaseTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRESSUREFORPHASETRANSITION, DefaultPressureForPhaseTransition.class);
    }

    /**
     * Gets all instances of PressureForPhaseTransition from the ontology.
     */
    public Collection<? extends PressureForPhaseTransition> getAllPressureForPhaseTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRESSUREFORPHASETRANSITION, DefaultPressureForPhaseTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#PressuresForPhaseTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#PressuresForPhaseTransition", PressuresForPhaseTransition.class, DefaultPressuresForPhaseTransition.class);
    }

    /**
     * Creates an instance of type PressuresForPhaseTransition.  Modifies the underlying ontology.
     */
    public PressuresForPhaseTransition createPressuresForPhaseTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRESSURESFORPHASETRANSITION, DefaultPressuresForPhaseTransition.class);
    }

    /**
     * Gets an instance of type PressuresForPhaseTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PressuresForPhaseTransition getPressuresForPhaseTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRESSURESFORPHASETRANSITION, DefaultPressuresForPhaseTransition.class);
    }

    /**
     * Gets all instances of PressuresForPhaseTransition from the ontology.
     */
    public Collection<? extends PressuresForPhaseTransition> getAllPressuresForPhaseTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRESSURESFORPHASETRANSITION, DefaultPressuresForPhaseTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Property
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Property", Property.class, DefaultProperty.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Reflectivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Reflectivity", Reflectivity.class, DefaultReflectivity.class);
    }

    /**
     * Creates an instance of type Reflectivity.  Modifies the underlying ontology.
     */
    public Reflectivity createReflectivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REFLECTIVITY, DefaultReflectivity.class);
    }

    /**
     * Gets an instance of type Reflectivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Reflectivity getReflectivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REFLECTIVITY, DefaultReflectivity.class);
    }

    /**
     * Gets all instances of Reflectivity from the ontology.
     */
    public Collection<? extends Reflectivity> getAllReflectivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REFLECTIVITY, DefaultReflectivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#RefractiveIndex
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#RefractiveIndex", RefractiveIndex.class, DefaultRefractiveIndex.class);
    }

    /**
     * Creates an instance of type RefractiveIndex.  Modifies the underlying ontology.
     */
    public RefractiveIndex createRefractiveIndex(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REFRACTIVEINDEX, DefaultRefractiveIndex.class);
    }

    /**
     * Gets an instance of type RefractiveIndex with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RefractiveIndex getRefractiveIndex(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REFRACTIVEINDEX, DefaultRefractiveIndex.class);
    }

    /**
     * Gets all instances of RefractiveIndex from the ontology.
     */
    public Collection<? extends RefractiveIndex> getAllRefractiveIndexInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REFRACTIVEINDEX, DefaultRefractiveIndex.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#SaturationMagneticMoment
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#SaturationMagneticMoment", SaturationMagneticMoment.class, DefaultSaturationMagneticMoment.class);
    }

    /**
     * Creates an instance of type SaturationMagneticMoment.  Modifies the underlying ontology.
     */
    public SaturationMagneticMoment createSaturationMagneticMoment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SATURATIONMAGNETICMOMENT, DefaultSaturationMagneticMoment.class);
    }

    /**
     * Gets an instance of type SaturationMagneticMoment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SaturationMagneticMoment getSaturationMagneticMoment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SATURATIONMAGNETICMOMENT, DefaultSaturationMagneticMoment.class);
    }

    /**
     * Gets all instances of SaturationMagneticMoment from the ontology.
     */
    public Collection<? extends SaturationMagneticMoment> getAllSaturationMagneticMomentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SATURATIONMAGNETICMOMENT, DefaultSaturationMagneticMoment.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#SaturationVolumeMagnetization
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#SaturationVolumeMagnetization", SaturationVolumeMagnetization.class, DefaultSaturationVolumeMagnetization.class);
    }

    /**
     * Creates an instance of type SaturationVolumeMagnetization.  Modifies the underlying ontology.
     */
    public SaturationVolumeMagnetization createSaturationVolumeMagnetization(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SATURATIONVOLUMEMAGNETIZATION, DefaultSaturationVolumeMagnetization.class);
    }

    /**
     * Gets an instance of type SaturationVolumeMagnetization with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SaturationVolumeMagnetization getSaturationVolumeMagnetization(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SATURATIONVOLUMEMAGNETIZATION, DefaultSaturationVolumeMagnetization.class);
    }

    /**
     * Gets all instances of SaturationVolumeMagnetization from the ontology.
     */
    public Collection<? extends SaturationVolumeMagnetization> getAllSaturationVolumeMagnetizationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SATURATIONVOLUMEMAGNETIZATION, DefaultSaturationVolumeMagnetization.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ShearModulus
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ShearModulus", ShearModulus.class, DefaultShearModulus.class);
    }

    /**
     * Creates an instance of type ShearModulus.  Modifies the underlying ontology.
     */
    public ShearModulus createShearModulus(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SHEARMODULUS, DefaultShearModulus.class);
    }

    /**
     * Gets an instance of type ShearModulus with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ShearModulus getShearModulus(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SHEARMODULUS, DefaultShearModulus.class);
    }

    /**
     * Gets all instances of ShearModulus from the ontology.
     */
    public Collection<? extends ShearModulus> getAllShearModulusInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SHEARMODULUS, DefaultShearModulus.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#SlopeOfTcAt0GPa
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#SlopeOfTcAt0GPa", SlopeOfTcAt0GPa.class, DefaultSlopeOfTcAt0GPa.class);
    }

    /**
     * Creates an instance of type SlopeOfTcAt0GPa.  Modifies the underlying ontology.
     */
    public SlopeOfTcAt0GPa createSlopeOfTcAt0GPa(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SLOPEOFTCAT0GPA, DefaultSlopeOfTcAt0GPa.class);
    }

    /**
     * Gets an instance of type SlopeOfTcAt0GPa with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SlopeOfTcAt0GPa getSlopeOfTcAt0GPa(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SLOPEOFTCAT0GPA, DefaultSlopeOfTcAt0GPa.class);
    }

    /**
     * Gets all instances of SlopeOfTcAt0GPa from the ontology.
     */
    public Collection<? extends SlopeOfTcAt0GPa> getAllSlopeOfTcAt0GPaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SLOPEOFTCAT0GPA, DefaultSlopeOfTcAt0GPa.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#SoundVelocity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#SoundVelocity", SoundVelocity.class, DefaultSoundVelocity.class);
    }

    /**
     * Creates an instance of type SoundVelocity.  Modifies the underlying ontology.
     */
    public SoundVelocity createSoundVelocity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOUNDVELOCITY, DefaultSoundVelocity.class);
    }

    /**
     * Gets an instance of type SoundVelocity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SoundVelocity getSoundVelocity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOUNDVELOCITY, DefaultSoundVelocity.class);
    }

    /**
     * Gets all instances of SoundVelocity from the ontology.
     */
    public Collection<? extends SoundVelocity> getAllSoundVelocityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOUNDVELOCITY, DefaultSoundVelocity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#SpecificHeatCapacityAtConstantPressure
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#SpecificHeatCapacityAtConstantPressure", SpecificHeatCapacityAtConstantPressure.class, DefaultSpecificHeatCapacityAtConstantPressure.class);
    }

    /**
     * Creates an instance of type SpecificHeatCapacityAtConstantPressure.  Modifies the underlying ontology.
     */
    public SpecificHeatCapacityAtConstantPressure createSpecificHeatCapacityAtConstantPressure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIFICHEATCAPACITYATCONSTANTPRESSURE, DefaultSpecificHeatCapacityAtConstantPressure.class);
    }

    /**
     * Gets an instance of type SpecificHeatCapacityAtConstantPressure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpecificHeatCapacityAtConstantPressure getSpecificHeatCapacityAtConstantPressure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIFICHEATCAPACITYATCONSTANTPRESSURE, DefaultSpecificHeatCapacityAtConstantPressure.class);
    }

    /**
     * Gets all instances of SpecificHeatCapacityAtConstantPressure from the ontology.
     */
    public Collection<? extends SpecificHeatCapacityAtConstantPressure> getAllSpecificHeatCapacityAtConstantPressureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIFICHEATCAPACITYATCONSTANTPRESSURE, DefaultSpecificHeatCapacityAtConstantPressure.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#SpontaneousMagneticMoment
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#SpontaneousMagneticMoment", SpontaneousMagneticMoment.class, DefaultSpontaneousMagneticMoment.class);
    }

    /**
     * Creates an instance of type SpontaneousMagneticMoment.  Modifies the underlying ontology.
     */
    public SpontaneousMagneticMoment createSpontaneousMagneticMoment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPONTANEOUSMAGNETICMOMENT, DefaultSpontaneousMagneticMoment.class);
    }

    /**
     * Gets an instance of type SpontaneousMagneticMoment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpontaneousMagneticMoment getSpontaneousMagneticMoment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPONTANEOUSMAGNETICMOMENT, DefaultSpontaneousMagneticMoment.class);
    }

    /**
     * Gets all instances of SpontaneousMagneticMoment from the ontology.
     */
    public Collection<? extends SpontaneousMagneticMoment> getAllSpontaneousMagneticMomentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPONTANEOUSMAGNETICMOMENT, DefaultSpontaneousMagneticMoment.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#SpontaneousMagnetization
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#SpontaneousMagnetization", SpontaneousMagnetization.class, DefaultSpontaneousMagnetization.class);
    }

    /**
     * Creates an instance of type SpontaneousMagnetization.  Modifies the underlying ontology.
     */
    public SpontaneousMagnetization createSpontaneousMagnetization(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPONTANEOUSMAGNETIZATION, DefaultSpontaneousMagnetization.class);
    }

    /**
     * Gets an instance of type SpontaneousMagnetization with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpontaneousMagnetization getSpontaneousMagnetization(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPONTANEOUSMAGNETIZATION, DefaultSpontaneousMagnetization.class);
    }

    /**
     * Gets all instances of SpontaneousMagnetization from the ontology.
     */
    public Collection<? extends SpontaneousMagnetization> getAllSpontaneousMagnetizationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPONTANEOUSMAGNETIZATION, DefaultSpontaneousMagnetization.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#StaticPermittivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#StaticPermittivity", StaticPermittivity.class, DefaultStaticPermittivity.class);
    }

    /**
     * Creates an instance of type StaticPermittivity.  Modifies the underlying ontology.
     */
    public StaticPermittivity createStaticPermittivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATICPERMITTIVITY, DefaultStaticPermittivity.class);
    }

    /**
     * Gets an instance of type StaticPermittivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public StaticPermittivity getStaticPermittivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATICPERMITTIVITY, DefaultStaticPermittivity.class);
    }

    /**
     * Gets all instances of StaticPermittivity from the ontology.
     */
    public Collection<? extends StaticPermittivity> getAllStaticPermittivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATICPERMITTIVITY, DefaultStaticPermittivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#StressDependenceOfTransitionTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#StressDependenceOfTransitionTemperature", StressDependenceOfTransitionTemperature.class, DefaultStressDependenceOfTransitionTemperature.class);
    }

    /**
     * Creates an instance of type StressDependenceOfTransitionTemperature.  Modifies the underlying ontology.
     */
    public StressDependenceOfTransitionTemperature createStressDependenceOfTransitionTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STRESSDEPENDENCEOFTRANSITIONTEMPERATURE, DefaultStressDependenceOfTransitionTemperature.class);
    }

    /**
     * Gets an instance of type StressDependenceOfTransitionTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public StressDependenceOfTransitionTemperature getStressDependenceOfTransitionTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STRESSDEPENDENCEOFTRANSITIONTEMPERATURE, DefaultStressDependenceOfTransitionTemperature.class);
    }

    /**
     * Gets all instances of StressDependenceOfTransitionTemperature from the ontology.
     */
    public Collection<? extends StressDependenceOfTransitionTemperature> getAllStressDependenceOfTransitionTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STRESSDEPENDENCEOFTRANSITIONTEMPERATURE, DefaultStressDependenceOfTransitionTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Structural
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Structural", Structural.class, DefaultStructural.class);
    }

    /**
     * Creates an instance of type Structural.  Modifies the underlying ontology.
     */
    public Structural createStructural(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STRUCTURAL, DefaultStructural.class);
    }

    /**
     * Gets an instance of type Structural with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Structural getStructural(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STRUCTURAL, DefaultStructural.class);
    }

    /**
     * Gets all instances of Structural from the ontology.
     */
    public Collection<? extends Structural> getAllStructuralInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STRUCTURAL, DefaultStructural.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Superconducting
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Superconducting", Superconducting.class, DefaultSuperconducting.class);
    }

    /**
     * Creates an instance of type Superconducting.  Modifies the underlying ontology.
     */
    public Superconducting createSuperconducting(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUPERCONDUCTING, DefaultSuperconducting.class);
    }

    /**
     * Gets an instance of type Superconducting with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Superconducting getSuperconducting(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUPERCONDUCTING, DefaultSuperconducting.class);
    }

    /**
     * Gets all instances of Superconducting from the ontology.
     */
    public Collection<? extends Superconducting> getAllSuperconductingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUPERCONDUCTING, DefaultSuperconducting.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#SuperconductingTransitionTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#SuperconductingTransitionTemperature", SuperconductingTransitionTemperature.class, DefaultSuperconductingTransitionTemperature.class);
    }

    /**
     * Creates an instance of type SuperconductingTransitionTemperature.  Modifies the underlying ontology.
     */
    public SuperconductingTransitionTemperature createSuperconductingTransitionTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUPERCONDUCTINGTRANSITIONTEMPERATURE, DefaultSuperconductingTransitionTemperature.class);
    }

    /**
     * Gets an instance of type SuperconductingTransitionTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SuperconductingTransitionTemperature getSuperconductingTransitionTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUPERCONDUCTINGTRANSITIONTEMPERATURE, DefaultSuperconductingTransitionTemperature.class);
    }

    /**
     * Gets all instances of SuperconductingTransitionTemperature from the ontology.
     */
    public Collection<? extends SuperconductingTransitionTemperature> getAllSuperconductingTransitionTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUPERCONDUCTINGTRANSITIONTEMPERATURE, DefaultSuperconductingTransitionTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Symbol
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Symbol", Symbol.class, DefaultSymbol.class);
    }

    /**
     * Creates an instance of type Symbol.  Modifies the underlying ontology.
     */
    public Symbol createSymbol(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SYMBOL, DefaultSymbol.class);
    }

    /**
     * Gets an instance of type Symbol with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Symbol getSymbol(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SYMBOL, DefaultSymbol.class);
    }

    /**
     * Gets all instances of Symbol from the ontology.
     */
    public Collection<? extends Symbol> getAllSymbolInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SYMBOL, DefaultSymbol.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Temperature
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Temperature", Temperature.class, DefaultTemperature.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Temperature-IndependentPartOfMagneticSusceptibility
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Temperature-IndependentPartOfMagneticSusceptibility", Temperature_IndependentPartOfMagneticSusceptibility.class, DefaultTemperature_IndependentPartOfMagneticSusceptibility.class);
    }

    /**
     * Creates an instance of type Temperature_IndependentPartOfMagneticSusceptibility.  Modifies the underlying ontology.
     */
    public Temperature_IndependentPartOfMagneticSusceptibility createTemperature_IndependentPartOfMagneticSusceptibility(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPERATURE_INDEPENDENTPARTOFMAGNETICSUSCEPTIBILITY, DefaultTemperature_IndependentPartOfMagneticSusceptibility.class);
    }

    /**
     * Gets an instance of type Temperature_IndependentPartOfMagneticSusceptibility with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Temperature_IndependentPartOfMagneticSusceptibility getTemperature_IndependentPartOfMagneticSusceptibility(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPERATURE_INDEPENDENTPARTOFMAGNETICSUSCEPTIBILITY, DefaultTemperature_IndependentPartOfMagneticSusceptibility.class);
    }

    /**
     * Gets all instances of Temperature_IndependentPartOfMagneticSusceptibility from the ontology.
     */
    public Collection<? extends Temperature_IndependentPartOfMagneticSusceptibility> getAllTemperature_IndependentPartOfMagneticSusceptibilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPERATURE_INDEPENDENTPARTOFMAGNETICSUSCEPTIBILITY, DefaultTemperature_IndependentPartOfMagneticSusceptibility.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#TemperatureDerivativeOfAdiabaticBulkModulus
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#TemperatureDerivativeOfAdiabaticBulkModulus", TemperatureDerivativeOfAdiabaticBulkModulus.class, DefaultTemperatureDerivativeOfAdiabaticBulkModulus.class);
    }

    /**
     * Creates an instance of type TemperatureDerivativeOfAdiabaticBulkModulus.  Modifies the underlying ontology.
     */
    public TemperatureDerivativeOfAdiabaticBulkModulus createTemperatureDerivativeOfAdiabaticBulkModulus(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPERATUREDERIVATIVEOFADIABATICBULKMODULUS, DefaultTemperatureDerivativeOfAdiabaticBulkModulus.class);
    }

    /**
     * Gets an instance of type TemperatureDerivativeOfAdiabaticBulkModulus with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TemperatureDerivativeOfAdiabaticBulkModulus getTemperatureDerivativeOfAdiabaticBulkModulus(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPERATUREDERIVATIVEOFADIABATICBULKMODULUS, DefaultTemperatureDerivativeOfAdiabaticBulkModulus.class);
    }

    /**
     * Gets all instances of TemperatureDerivativeOfAdiabaticBulkModulus from the ontology.
     */
    public Collection<? extends TemperatureDerivativeOfAdiabaticBulkModulus> getAllTemperatureDerivativeOfAdiabaticBulkModulusInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPERATUREDERIVATIVEOFADIABATICBULKMODULUS, DefaultTemperatureDerivativeOfAdiabaticBulkModulus.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#TemperatureDerivativeOfEnergyGap
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#TemperatureDerivativeOfEnergyGap", TemperatureDerivativeOfEnergyGap.class, DefaultTemperatureDerivativeOfEnergyGap.class);
    }

    /**
     * Creates an instance of type TemperatureDerivativeOfEnergyGap.  Modifies the underlying ontology.
     */
    public TemperatureDerivativeOfEnergyGap createTemperatureDerivativeOfEnergyGap(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPERATUREDERIVATIVEOFENERGYGAP, DefaultTemperatureDerivativeOfEnergyGap.class);
    }

    /**
     * Gets an instance of type TemperatureDerivativeOfEnergyGap with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TemperatureDerivativeOfEnergyGap getTemperatureDerivativeOfEnergyGap(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPERATUREDERIVATIVEOFENERGYGAP, DefaultTemperatureDerivativeOfEnergyGap.class);
    }

    /**
     * Gets all instances of TemperatureDerivativeOfEnergyGap from the ontology.
     */
    public Collection<? extends TemperatureDerivativeOfEnergyGap> getAllTemperatureDerivativeOfEnergyGapInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPERATUREDERIVATIVEOFENERGYGAP, DefaultTemperatureDerivativeOfEnergyGap.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#TemperatureDerivativeOfEnergyGapForDirectTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#TemperatureDerivativeOfEnergyGapForDirectTransition", TemperatureDerivativeOfEnergyGapForDirectTransition.class, DefaultTemperatureDerivativeOfEnergyGapForDirectTransition.class);
    }

    /**
     * Creates an instance of type TemperatureDerivativeOfEnergyGapForDirectTransition.  Modifies the underlying ontology.
     */
    public TemperatureDerivativeOfEnergyGapForDirectTransition createTemperatureDerivativeOfEnergyGapForDirectTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPERATUREDERIVATIVEOFENERGYGAPFORDIRECTTRANSITION, DefaultTemperatureDerivativeOfEnergyGapForDirectTransition.class);
    }

    /**
     * Gets an instance of type TemperatureDerivativeOfEnergyGapForDirectTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TemperatureDerivativeOfEnergyGapForDirectTransition getTemperatureDerivativeOfEnergyGapForDirectTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPERATUREDERIVATIVEOFENERGYGAPFORDIRECTTRANSITION, DefaultTemperatureDerivativeOfEnergyGapForDirectTransition.class);
    }

    /**
     * Gets all instances of TemperatureDerivativeOfEnergyGapForDirectTransition from the ontology.
     */
    public Collection<? extends TemperatureDerivativeOfEnergyGapForDirectTransition> getAllTemperatureDerivativeOfEnergyGapForDirectTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPERATUREDERIVATIVEOFENERGYGAPFORDIRECTTRANSITION, DefaultTemperatureDerivativeOfEnergyGapForDirectTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#TemperaturesForPhaseTransition
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#TemperaturesForPhaseTransition", TemperaturesForPhaseTransition.class, DefaultTemperaturesForPhaseTransition.class);
    }

    /**
     * Creates an instance of type TemperaturesForPhaseTransition.  Modifies the underlying ontology.
     */
    public TemperaturesForPhaseTransition createTemperaturesForPhaseTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPERATURESFORPHASETRANSITION, DefaultTemperaturesForPhaseTransition.class);
    }

    /**
     * Gets an instance of type TemperaturesForPhaseTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TemperaturesForPhaseTransition getTemperaturesForPhaseTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPERATURESFORPHASETRANSITION, DefaultTemperaturesForPhaseTransition.class);
    }

    /**
     * Gets all instances of TemperaturesForPhaseTransition from the ontology.
     */
    public Collection<? extends TemperaturesForPhaseTransition> getAllTemperaturesForPhaseTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPERATURESFORPHASETRANSITION, DefaultTemperaturesForPhaseTransition.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Thermal
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Thermal", Thermal.class, DefaultThermal.class);
    }

    /**
     * Creates an instance of type Thermal.  Modifies the underlying ontology.
     */
    public Thermal createThermal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THERMAL, DefaultThermal.class);
    }

    /**
     * Gets an instance of type Thermal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Thermal getThermal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THERMAL, DefaultThermal.class);
    }

    /**
     * Gets all instances of Thermal from the ontology.
     */
    public Collection<? extends Thermal> getAllThermalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THERMAL, DefaultThermal.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ThermalConductance
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ThermalConductance", ThermalConductance.class, DefaultThermalConductance.class);
    }

    /**
     * Creates an instance of type ThermalConductance.  Modifies the underlying ontology.
     */
    public ThermalConductance createThermalConductance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THERMALCONDUCTANCE, DefaultThermalConductance.class);
    }

    /**
     * Gets an instance of type ThermalConductance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ThermalConductance getThermalConductance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THERMALCONDUCTANCE, DefaultThermalConductance.class);
    }

    /**
     * Gets all instances of ThermalConductance from the ontology.
     */
    public Collection<? extends ThermalConductance> getAllThermalConductanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THERMALCONDUCTANCE, DefaultThermalConductance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ThermalConductivity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ThermalConductivity", ThermalConductivity.class, DefaultThermalConductivity.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ThermalEnergyGap
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ThermalEnergyGap", ThermalEnergyGap.class, DefaultThermalEnergyGap.class);
    }

    /**
     * Creates an instance of type ThermalEnergyGap.  Modifies the underlying ontology.
     */
    public ThermalEnergyGap createThermalEnergyGap(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THERMALENERGYGAP, DefaultThermalEnergyGap.class);
    }

    /**
     * Gets an instance of type ThermalEnergyGap with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ThermalEnergyGap getThermalEnergyGap(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THERMALENERGYGAP, DefaultThermalEnergyGap.class);
    }

    /**
     * Gets all instances of ThermalEnergyGap from the ontology.
     */
    public Collection<? extends ThermalEnergyGap> getAllThermalEnergyGapInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THERMALENERGYGAP, DefaultThermalEnergyGap.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ThermalExpansionCoefficient
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ThermalExpansionCoefficient", ThermalExpansionCoefficient.class, DefaultThermalExpansionCoefficient.class);
    }

    /**
     * Creates an instance of type ThermalExpansionCoefficient.  Modifies the underlying ontology.
     */
    public ThermalExpansionCoefficient createThermalExpansionCoefficient(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THERMALEXPANSIONCOEFFICIENT, DefaultThermalExpansionCoefficient.class);
    }

    /**
     * Gets an instance of type ThermalExpansionCoefficient with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ThermalExpansionCoefficient getThermalExpansionCoefficient(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THERMALEXPANSIONCOEFFICIENT, DefaultThermalExpansionCoefficient.class);
    }

    /**
     * Gets all instances of ThermalExpansionCoefficient from the ontology.
     */
    public Collection<? extends ThermalExpansionCoefficient> getAllThermalExpansionCoefficientInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THERMALEXPANSIONCOEFFICIENT, DefaultThermalExpansionCoefficient.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ThermalExpansionCoefficient_D
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ThermalExpansionCoefficient_D", ThermalExpansionCoefficient_D.class, DefaultThermalExpansionCoefficient_D.class);
    }

    /**
     * Creates an instance of type ThermalExpansionCoefficient_D.  Modifies the underlying ontology.
     */
    public ThermalExpansionCoefficient_D createThermalExpansionCoefficient_D(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THERMALEXPANSIONCOEFFICIENT_D, DefaultThermalExpansionCoefficient_D.class);
    }

    /**
     * Gets an instance of type ThermalExpansionCoefficient_D with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ThermalExpansionCoefficient_D getThermalExpansionCoefficient_D(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THERMALEXPANSIONCOEFFICIENT_D, DefaultThermalExpansionCoefficient_D.class);
    }

    /**
     * Gets all instances of ThermalExpansionCoefficient_D from the ontology.
     */
    public Collection<? extends ThermalExpansionCoefficient_D> getAllThermalExpansionCoefficient_DInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THERMALEXPANSIONCOEFFICIENT_D, DefaultThermalExpansionCoefficient_D.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#ThermoelectricPower
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#ThermoelectricPower", ThermoelectricPower.class, DefaultThermoelectricPower.class);
    }

    /**
     * Creates an instance of type ThermoelectricPower.  Modifies the underlying ontology.
     */
    public ThermoelectricPower createThermoelectricPower(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THERMOELECTRICPOWER, DefaultThermoelectricPower.class);
    }

    /**
     * Gets an instance of type ThermoelectricPower with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ThermoelectricPower getThermoelectricPower(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THERMOELECTRICPOWER, DefaultThermoelectricPower.class);
    }

    /**
     * Gets all instances of ThermoelectricPower from the ontology.
     */
    public Collection<? extends ThermoelectricPower> getAllThermoelectricPowerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THERMOELECTRICPOWER, DefaultThermoelectricPower.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Thickness
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Thickness", Thickness.class, DefaultThickness.class);
    }

    /**
     * Creates an instance of type Thickness.  Modifies the underlying ontology.
     */
    public Thickness createThickness(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THICKNESS, DefaultThickness.class);
    }

    /**
     * Gets an instance of type Thickness with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Thickness getThickness(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THICKNESS, DefaultThickness.class);
    }

    /**
     * Gets all instances of Thickness from the ontology.
     */
    public Collection<? extends Thickness> getAllThicknessInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THICKNESS, DefaultThickness.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#Time
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#Time", Time.class, DefaultTime.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#TransverseSoundVelocity
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#TransverseSoundVelocity", TransverseSoundVelocity.class, DefaultTransverseSoundVelocity.class);
    }

    /**
     * Creates an instance of type TransverseSoundVelocity.  Modifies the underlying ontology.
     */
    public TransverseSoundVelocity createTransverseSoundVelocity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRANSVERSESOUNDVELOCITY, DefaultTransverseSoundVelocity.class);
    }

    /**
     * Gets an instance of type TransverseSoundVelocity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TransverseSoundVelocity getTransverseSoundVelocity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRANSVERSESOUNDVELOCITY, DefaultTransverseSoundVelocity.class);
    }

    /**
     * Gets all instances of TransverseSoundVelocity from the ontology.
     */
    public Collection<? extends TransverseSoundVelocity> getAllTransverseSoundVelocityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRANSVERSESOUNDVELOCITY, DefaultTransverseSoundVelocity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#UpperCriticalMagneticFieldStrength
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#UpperCriticalMagneticFieldStrength", UpperCriticalMagneticFieldStrength.class, DefaultUpperCriticalMagneticFieldStrength.class);
    }

    /**
     * Creates an instance of type UpperCriticalMagneticFieldStrength.  Modifies the underlying ontology.
     */
    public UpperCriticalMagneticFieldStrength createUpperCriticalMagneticFieldStrength(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UPPERCRITICALMAGNETICFIELDSTRENGTH, DefaultUpperCriticalMagneticFieldStrength.class);
    }

    /**
     * Gets an instance of type UpperCriticalMagneticFieldStrength with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UpperCriticalMagneticFieldStrength getUpperCriticalMagneticFieldStrength(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UPPERCRITICALMAGNETICFIELDSTRENGTH, DefaultUpperCriticalMagneticFieldStrength.class);
    }

    /**
     * Gets all instances of UpperCriticalMagneticFieldStrength from the ontology.
     */
    public Collection<? extends UpperCriticalMagneticFieldStrength> getAllUpperCriticalMagneticFieldStrengthInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UPPERCRITICALMAGNETICFIELDSTRENGTH, DefaultUpperCriticalMagneticFieldStrength.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#UpperCriticalMagneticFieldStrengthAt0K
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#UpperCriticalMagneticFieldStrengthAt0K", UpperCriticalMagneticFieldStrengthAt0K.class, DefaultUpperCriticalMagneticFieldStrengthAt0K.class);
    }

    /**
     * Creates an instance of type UpperCriticalMagneticFieldStrengthAt0K.  Modifies the underlying ontology.
     */
    public UpperCriticalMagneticFieldStrengthAt0K createUpperCriticalMagneticFieldStrengthAt0K(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UPPERCRITICALMAGNETICFIELDSTRENGTHAT0K, DefaultUpperCriticalMagneticFieldStrengthAt0K.class);
    }

    /**
     * Gets an instance of type UpperCriticalMagneticFieldStrengthAt0K with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UpperCriticalMagneticFieldStrengthAt0K getUpperCriticalMagneticFieldStrengthAt0K(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UPPERCRITICALMAGNETICFIELDSTRENGTHAT0K, DefaultUpperCriticalMagneticFieldStrengthAt0K.class);
    }

    /**
     * Gets all instances of UpperCriticalMagneticFieldStrengthAt0K from the ontology.
     */
    public Collection<? extends UpperCriticalMagneticFieldStrengthAt0K> getAllUpperCriticalMagneticFieldStrengthAt0KInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UPPERCRITICALMAGNETICFIELDSTRENGTHAT0K, DefaultUpperCriticalMagneticFieldStrengthAt0K.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#VickersHardnessNumber
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#VickersHardnessNumber", VickersHardnessNumber.class, DefaultVickersHardnessNumber.class);
    }

    /**
     * Creates an instance of type VickersHardnessNumber.  Modifies the underlying ontology.
     */
    public VickersHardnessNumber createVickersHardnessNumber(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VICKERSHARDNESSNUMBER, DefaultVickersHardnessNumber.class);
    }

    /**
     * Gets an instance of type VickersHardnessNumber with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VickersHardnessNumber getVickersHardnessNumber(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VICKERSHARDNESSNUMBER, DefaultVickersHardnessNumber.class);
    }

    /**
     * Gets all instances of VickersHardnessNumber from the ontology.
     */
    public Collection<? extends VickersHardnessNumber> getAllVickersHardnessNumberInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VICKERSHARDNESSNUMBER, DefaultVickersHardnessNumber.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#VolumeCompressibility
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#VolumeCompressibility", VolumeCompressibility.class, DefaultVolumeCompressibility.class);
    }

    /**
     * Creates an instance of type VolumeCompressibility.  Modifies the underlying ontology.
     */
    public VolumeCompressibility createVolumeCompressibility(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VOLUMECOMPRESSIBILITY, DefaultVolumeCompressibility.class);
    }

    /**
     * Gets an instance of type VolumeCompressibility with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VolumeCompressibility getVolumeCompressibility(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VOLUMECOMPRESSIBILITY, DefaultVolumeCompressibility.class);
    }

    /**
     * Gets all instances of VolumeCompressibility from the ontology.
     */
    public Collection<? extends VolumeCompressibility> getAllVolumeCompressibilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VOLUMECOMPRESSIBILITY, DefaultVolumeCompressibility.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#VolumeMagnetization
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#VolumeMagnetization", VolumeMagnetization.class, DefaultVolumeMagnetization.class);
    }

    /**
     * Creates an instance of type VolumeMagnetization.  Modifies the underlying ontology.
     */
    public VolumeMagnetization createVolumeMagnetization(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VOLUMEMAGNETIZATION, DefaultVolumeMagnetization.class);
    }

    /**
     * Gets an instance of type VolumeMagnetization with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VolumeMagnetization getVolumeMagnetization(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VOLUMEMAGNETIZATION, DefaultVolumeMagnetization.class);
    }

    /**
     * Gets all instances of VolumeMagnetization from the ontology.
     */
    public Collection<? extends VolumeMagnetization> getAllVolumeMagnetizationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VOLUMEMAGNETIZATION, DefaultVolumeMagnetization.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#VolumeThermalExpansionCoefficient
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#VolumeThermalExpansionCoefficient", VolumeThermalExpansionCoefficient.class, DefaultVolumeThermalExpansionCoefficient.class);
    }

    /**
     * Creates an instance of type VolumeThermalExpansionCoefficient.  Modifies the underlying ontology.
     */
    public VolumeThermalExpansionCoefficient createVolumeThermalExpansionCoefficient(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VOLUMETHERMALEXPANSIONCOEFFICIENT, DefaultVolumeThermalExpansionCoefficient.class);
    }

    /**
     * Gets an instance of type VolumeThermalExpansionCoefficient with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VolumeThermalExpansionCoefficient getVolumeThermalExpansionCoefficient(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VOLUMETHERMALEXPANSIONCOEFFICIENT, DefaultVolumeThermalExpansionCoefficient.class);
    }

    /**
     * Gets all instances of VolumeThermalExpansionCoefficient from the ontology.
     */
    public Collection<? extends VolumeThermalExpansionCoefficient> getAllVolumeThermalExpansionCoefficientInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VOLUMETHERMALEXPANSIONCOEFFICIENT, DefaultVolumeThermalExpansionCoefficient.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#VolumeThermalExpansionCoefficient_D
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#VolumeThermalExpansionCoefficient_D", VolumeThermalExpansionCoefficient_D.class, DefaultVolumeThermalExpansionCoefficient_D.class);
    }

    /**
     * Creates an instance of type VolumeThermalExpansionCoefficient_D.  Modifies the underlying ontology.
     */
    public VolumeThermalExpansionCoefficient_D createVolumeThermalExpansionCoefficient_D(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VOLUMETHERMALEXPANSIONCOEFFICIENT_D, DefaultVolumeThermalExpansionCoefficient_D.class);
    }

    /**
     * Gets an instance of type VolumeThermalExpansionCoefficient_D with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VolumeThermalExpansionCoefficient_D getVolumeThermalExpansionCoefficient_D(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VOLUMETHERMALEXPANSIONCOEFFICIENT_D, DefaultVolumeThermalExpansionCoefficient_D.class);
    }

    /**
     * Gets all instances of VolumeThermalExpansionCoefficient_D from the ontology.
     */
    public Collection<? extends VolumeThermalExpansionCoefficient_D> getAllVolumeThermalExpansionCoefficient_DInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VOLUMETHERMALEXPANSIONCOEFFICIENT_D, DefaultVolumeThermalExpansionCoefficient_D.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Property.owl#YoungsModulus
     */

    {
        javaMapping.add("http://codata.jp/OML-Property.owl#YoungsModulus", YoungsModulus.class, DefaultYoungsModulus.class);
    }

    /**
     * Creates an instance of type YoungsModulus.  Modifies the underlying ontology.
     */
    public YoungsModulus createYoungsModulus(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_YOUNGSMODULUS, DefaultYoungsModulus.class);
    }

    /**
     * Gets an instance of type YoungsModulus with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public YoungsModulus getYoungsModulus(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_YOUNGSMODULUS, DefaultYoungsModulus.class);
    }

    /**
     * Gets all instances of YoungsModulus from the ontology.
     */
    public Collection<? extends YoungsModulus> getAllYoungsModulusInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_YOUNGSMODULUS, DefaultYoungsModulus.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Substance.owl#Atom
     */

    {
        javaMapping.add("http://codata.jp/OML-Substance.owl#Atom", Atom.class, DefaultAtom.class);
    }

    /**
     * Creates an instance of type Atom.  Modifies the underlying ontology.
     */
    public Atom createAtom(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATOM, DefaultAtom.class);
    }

    /**
     * Gets an instance of type Atom with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Atom getAtom(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATOM, DefaultAtom.class);
    }

    /**
     * Gets all instances of Atom from the ontology.
     */
    public Collection<? extends Atom> getAllAtomInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATOM, DefaultAtom.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-Substance.owl#Substance
     */

    {
        javaMapping.add("http://codata.jp/OML-Substance.owl#Substance", Substance.class, DefaultSubstance.class);
    }

    /**
     * Creates an instance of type Substance.  Modifies the underlying ontology.
     */
    public Substance createSubstance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUBSTANCE, DefaultSubstance.class);
    }

    /**
     * Gets an instance of type Substance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Substance getSubstance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUBSTANCE, DefaultSubstance.class);
    }

    /**
     * Gets all instances of Substance from the ontology.
     */
    public Collection<? extends Substance> getAllSubstanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUBSTANCE, DefaultSubstance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#AbsorbedDoseRate
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#AbsorbedDoseRate", AbsorbedDoseRate.class, DefaultAbsorbedDoseRate.class);
    }

    /**
     * Creates an instance of type AbsorbedDoseRate.  Modifies the underlying ontology.
     */
    public AbsorbedDoseRate createAbsorbedDoseRate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ABSORBEDDOSERATE, DefaultAbsorbedDoseRate.class);
    }

    /**
     * Gets an instance of type AbsorbedDoseRate with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AbsorbedDoseRate getAbsorbedDoseRate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ABSORBEDDOSERATE, DefaultAbsorbedDoseRate.class);
    }

    /**
     * Gets all instances of AbsorbedDoseRate from the ontology.
     */
    public Collection<? extends AbsorbedDoseRate> getAllAbsorbedDoseRateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ABSORBEDDOSERATE, DefaultAbsorbedDoseRate.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Acceleration
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Acceleration", Acceleration.class, DefaultAcceleration.class);
    }

    /**
     * Creates an instance of type Acceleration.  Modifies the underlying ontology.
     */
    public Acceleration createAcceleration(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACCELERATION, DefaultAcceleration.class);
    }

    /**
     * Gets an instance of type Acceleration with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Acceleration getAcceleration(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACCELERATION, DefaultAcceleration.class);
    }

    /**
     * Gets all instances of Acceleration from the ontology.
     */
    public Collection<? extends Acceleration> getAllAccelerationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACCELERATION, DefaultAcceleration.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Action
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Action", Action.class, DefaultAction.class);
    }

    /**
     * Creates an instance of type Action.  Modifies the underlying ontology.
     */
    public Action createAction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTION, DefaultAction.class);
    }

    /**
     * Gets an instance of type Action with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Action getAction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTION, DefaultAction.class);
    }

    /**
     * Gets all instances of Action from the ontology.
     */
    public Collection<? extends Action> getAllActionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTION, DefaultAction.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#AmountOfInformation
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#AmountOfInformation", AmountOfInformation.class, DefaultAmountOfInformation.class);
    }

    /**
     * Creates an instance of type AmountOfInformation.  Modifies the underlying ontology.
     */
    public AmountOfInformation createAmountOfInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AMOUNTOFINFORMATION, DefaultAmountOfInformation.class);
    }

    /**
     * Gets an instance of type AmountOfInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AmountOfInformation getAmountOfInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AMOUNTOFINFORMATION, DefaultAmountOfInformation.class);
    }

    /**
     * Gets all instances of AmountOfInformation from the ontology.
     */
    public Collection<? extends AmountOfInformation> getAllAmountOfInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AMOUNTOFINFORMATION, DefaultAmountOfInformation.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#AmountOfSubstance
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#AmountOfSubstance", AmountOfSubstance.class, DefaultAmountOfSubstance.class);
    }

    /**
     * Creates an instance of type AmountOfSubstance.  Modifies the underlying ontology.
     */
    public AmountOfSubstance createAmountOfSubstance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AMOUNTOFSUBSTANCE, DefaultAmountOfSubstance.class);
    }

    /**
     * Gets an instance of type AmountOfSubstance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AmountOfSubstance getAmountOfSubstance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AMOUNTOFSUBSTANCE, DefaultAmountOfSubstance.class);
    }

    /**
     * Gets all instances of AmountOfSubstance from the ontology.
     */
    public Collection<? extends AmountOfSubstance> getAllAmountOfSubstanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AMOUNTOFSUBSTANCE, DefaultAmountOfSubstance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#AngularAcceleration
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#AngularAcceleration", AngularAcceleration.class, DefaultAngularAcceleration.class);
    }

    /**
     * Creates an instance of type AngularAcceleration.  Modifies the underlying ontology.
     */
    public AngularAcceleration createAngularAcceleration(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANGULARACCELERATION, DefaultAngularAcceleration.class);
    }

    /**
     * Gets an instance of type AngularAcceleration with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AngularAcceleration getAngularAcceleration(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANGULARACCELERATION, DefaultAngularAcceleration.class);
    }

    /**
     * Gets all instances of AngularAcceleration from the ontology.
     */
    public Collection<? extends AngularAcceleration> getAllAngularAccelerationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANGULARACCELERATION, DefaultAngularAcceleration.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#AngularSpeed
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#AngularSpeed", AngularSpeed.class, DefaultAngularSpeed.class);
    }

    /**
     * Creates an instance of type AngularSpeed.  Modifies the underlying ontology.
     */
    public AngularSpeed createAngularSpeed(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANGULARSPEED, DefaultAngularSpeed.class);
    }

    /**
     * Gets an instance of type AngularSpeed with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AngularSpeed getAngularSpeed(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANGULARSPEED, DefaultAngularSpeed.class);
    }

    /**
     * Gets all instances of AngularSpeed from the ontology.
     */
    public Collection<? extends AngularSpeed> getAllAngularSpeedInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANGULARSPEED, DefaultAngularSpeed.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Area
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Area", Area.class, DefaultArea.class);
    }

    /**
     * Creates an instance of type Area.  Modifies the underlying ontology.
     */
    public Area createArea(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AREA, DefaultArea.class);
    }

    /**
     * Gets an instance of type Area with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Area getArea(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AREA, DefaultArea.class);
    }

    /**
     * Gets all instances of Area from the ontology.
     */
    public Collection<? extends Area> getAllAreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AREA, DefaultArea.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Base
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Base", Base.class, DefaultBase.class);
    }

    /**
     * Creates an instance of type Base.  Modifies the underlying ontology.
     */
    public Base createBase(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BASE, DefaultBase.class);
    }

    /**
     * Gets an instance of type Base with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Base getBase(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BASE, DefaultBase.class);
    }

    /**
     * Gets all instances of Base from the ontology.
     */
    public Collection<? extends Base> getAllBaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BASE, DefaultBase.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#CGS_units
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#CGS_units", CGS_units.class, DefaultCGS_units.class);
    }

    /**
     * Creates an instance of type CGS_units.  Modifies the underlying ontology.
     */
    public CGS_units createCGS_units(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CGS_UNITS, DefaultCGS_units.class);
    }

    /**
     * Gets an instance of type CGS_units with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CGS_units getCGS_units(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CGS_UNITS, DefaultCGS_units.class);
    }

    /**
     * Gets all instances of CGS_units from the ontology.
     */
    public Collection<? extends CGS_units> getAllCGS_unitsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CGS_UNITS, DefaultCGS_units.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Compound
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Compound", Compound.class, DefaultCompound.class);
    }

    /**
     * Creates an instance of type Compound.  Modifies the underlying ontology.
     */
    public Compound createCompound(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMPOUND, DefaultCompound.class);
    }

    /**
     * Gets an instance of type Compound with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Compound getCompound(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMPOUND, DefaultCompound.class);
    }

    /**
     * Gets all instances of Compound from the ontology.
     */
    public Collection<? extends Compound> getAllCompoundInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMPOUND, DefaultCompound.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Concentration
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Concentration", Concentration.class, DefaultConcentration.class);
    }

    /**
     * Creates an instance of type Concentration.  Modifies the underlying ontology.
     */
    public Concentration createConcentration(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONCENTRATION, DefaultConcentration.class);
    }

    /**
     * Gets an instance of type Concentration with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Concentration getConcentration(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONCENTRATION, DefaultConcentration.class);
    }

    /**
     * Gets all instances of Concentration from the ontology.
     */
    public Collection<? extends Concentration> getAllConcentrationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONCENTRATION, DefaultConcentration.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#CurrentDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#CurrentDensity", CurrentDensity.class, DefaultCurrentDensity.class);
    }

    /**
     * Creates an instance of type CurrentDensity.  Modifies the underlying ontology.
     */
    public CurrentDensity createCurrentDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTDENSITY, DefaultCurrentDensity.class);
    }

    /**
     * Gets an instance of type CurrentDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentDensity getCurrentDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTDENSITY, DefaultCurrentDensity.class);
    }

    /**
     * Gets all instances of CurrentDensity from the ontology.
     */
    public Collection<? extends CurrentDensity> getAllCurrentDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTDENSITY, DefaultCurrentDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#DynamicViscosity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#DynamicViscosity", DynamicViscosity.class, DefaultDynamicViscosity.class);
    }

    /**
     * Creates an instance of type DynamicViscosity.  Modifies the underlying ontology.
     */
    public DynamicViscosity createDynamicViscosity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DYNAMICVISCOSITY, DefaultDynamicViscosity.class);
    }

    /**
     * Gets an instance of type DynamicViscosity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DynamicViscosity getDynamicViscosity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DYNAMICVISCOSITY, DefaultDynamicViscosity.class);
    }

    /**
     * Gets all instances of DynamicViscosity from the ontology.
     */
    public Collection<? extends DynamicViscosity> getAllDynamicViscosityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DYNAMICVISCOSITY, DefaultDynamicViscosity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ElectricCapacitance
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ElectricCapacitance", ElectricCapacitance.class, DefaultElectricCapacitance.class);
    }

    /**
     * Creates an instance of type ElectricCapacitance.  Modifies the underlying ontology.
     */
    public ElectricCapacitance createElectricCapacitance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICCAPACITANCE, DefaultElectricCapacitance.class);
    }

    /**
     * Gets an instance of type ElectricCapacitance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricCapacitance getElectricCapacitance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICCAPACITANCE, DefaultElectricCapacitance.class);
    }

    /**
     * Gets all instances of ElectricCapacitance from the ontology.
     */
    public Collection<? extends ElectricCapacitance> getAllElectricCapacitanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICCAPACITANCE, DefaultElectricCapacitance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ElectricCharge
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ElectricCharge", ElectricCharge.class, DefaultElectricCharge.class);
    }

    /**
     * Creates an instance of type ElectricCharge.  Modifies the underlying ontology.
     */
    public ElectricCharge createElectricCharge(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICCHARGE, DefaultElectricCharge.class);
    }

    /**
     * Gets an instance of type ElectricCharge with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricCharge getElectricCharge(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICCHARGE, DefaultElectricCharge.class);
    }

    /**
     * Gets all instances of ElectricCharge from the ontology.
     */
    public Collection<? extends ElectricCharge> getAllElectricChargeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICCHARGE, DefaultElectricCharge.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ElectricChargeDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ElectricChargeDensity", ElectricChargeDensity.class, DefaultElectricChargeDensity.class);
    }

    /**
     * Creates an instance of type ElectricChargeDensity.  Modifies the underlying ontology.
     */
    public ElectricChargeDensity createElectricChargeDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICCHARGEDENSITY, DefaultElectricChargeDensity.class);
    }

    /**
     * Gets an instance of type ElectricChargeDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricChargeDensity getElectricChargeDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICCHARGEDENSITY, DefaultElectricChargeDensity.class);
    }

    /**
     * Gets all instances of ElectricChargeDensity from the ontology.
     */
    public Collection<? extends ElectricChargeDensity> getAllElectricChargeDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICCHARGEDENSITY, DefaultElectricChargeDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ElectricConductance
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ElectricConductance", ElectricConductance.class, DefaultElectricConductance.class);
    }

    /**
     * Creates an instance of type ElectricConductance.  Modifies the underlying ontology.
     */
    public ElectricConductance createElectricConductance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICCONDUCTANCE, DefaultElectricConductance.class);
    }

    /**
     * Gets an instance of type ElectricConductance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricConductance getElectricConductance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICCONDUCTANCE, DefaultElectricConductance.class);
    }

    /**
     * Gets all instances of ElectricConductance from the ontology.
     */
    public Collection<? extends ElectricConductance> getAllElectricConductanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICCONDUCTANCE, DefaultElectricConductance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ElectricCurrent
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ElectricCurrent", ElectricCurrent.class, DefaultElectricCurrent.class);
    }

    /**
     * Creates an instance of type ElectricCurrent.  Modifies the underlying ontology.
     */
    public ElectricCurrent createElectricCurrent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICCURRENT, DefaultElectricCurrent.class);
    }

    /**
     * Gets an instance of type ElectricCurrent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricCurrent getElectricCurrent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICCURRENT, DefaultElectricCurrent.class);
    }

    /**
     * Gets all instances of ElectricCurrent from the ontology.
     */
    public Collection<? extends ElectricCurrent> getAllElectricCurrentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICCURRENT, DefaultElectricCurrent.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ElectricFieldStrength
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ElectricFieldStrength", ElectricFieldStrength.class, DefaultElectricFieldStrength.class);
    }

    /**
     * Creates an instance of type ElectricFieldStrength.  Modifies the underlying ontology.
     */
    public ElectricFieldStrength createElectricFieldStrength(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICFIELDSTRENGTH, DefaultElectricFieldStrength.class);
    }

    /**
     * Gets an instance of type ElectricFieldStrength with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricFieldStrength getElectricFieldStrength(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICFIELDSTRENGTH, DefaultElectricFieldStrength.class);
    }

    /**
     * Gets all instances of ElectricFieldStrength from the ontology.
     */
    public Collection<? extends ElectricFieldStrength> getAllElectricFieldStrengthInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICFIELDSTRENGTH, DefaultElectricFieldStrength.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ElectricFluxDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ElectricFluxDensity", ElectricFluxDensity.class, DefaultElectricFluxDensity.class);
    }

    /**
     * Creates an instance of type ElectricFluxDensity.  Modifies the underlying ontology.
     */
    public ElectricFluxDensity createElectricFluxDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICFLUXDENSITY, DefaultElectricFluxDensity.class);
    }

    /**
     * Gets an instance of type ElectricFluxDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricFluxDensity getElectricFluxDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICFLUXDENSITY, DefaultElectricFluxDensity.class);
    }

    /**
     * Gets all instances of ElectricFluxDensity from the ontology.
     */
    public Collection<? extends ElectricFluxDensity> getAllElectricFluxDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICFLUXDENSITY, DefaultElectricFluxDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ElectricInductance
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ElectricInductance", ElectricInductance.class, DefaultElectricInductance.class);
    }

    /**
     * Creates an instance of type ElectricInductance.  Modifies the underlying ontology.
     */
    public ElectricInductance createElectricInductance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICINDUCTANCE, DefaultElectricInductance.class);
    }

    /**
     * Gets an instance of type ElectricInductance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricInductance getElectricInductance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICINDUCTANCE, DefaultElectricInductance.class);
    }

    /**
     * Gets all instances of ElectricInductance from the ontology.
     */
    public Collection<? extends ElectricInductance> getAllElectricInductanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICINDUCTANCE, DefaultElectricInductance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ElectricPotentialDifference
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ElectricPotentialDifference", ElectricPotentialDifference.class, DefaultElectricPotentialDifference.class);
    }

    /**
     * Creates an instance of type ElectricPotentialDifference.  Modifies the underlying ontology.
     */
    public ElectricPotentialDifference createElectricPotentialDifference(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICPOTENTIALDIFFERENCE, DefaultElectricPotentialDifference.class);
    }

    /**
     * Gets an instance of type ElectricPotentialDifference with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricPotentialDifference getElectricPotentialDifference(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICPOTENTIALDIFFERENCE, DefaultElectricPotentialDifference.class);
    }

    /**
     * Gets all instances of ElectricPotentialDifference from the ontology.
     */
    public Collection<? extends ElectricPotentialDifference> getAllElectricPotentialDifferenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICPOTENTIALDIFFERENCE, DefaultElectricPotentialDifference.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ElectricResistance
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ElectricResistance", ElectricResistance.class, DefaultElectricResistance.class);
    }

    /**
     * Creates an instance of type ElectricResistance.  Modifies the underlying ontology.
     */
    public ElectricResistance createElectricResistance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRICRESISTANCE, DefaultElectricResistance.class);
    }

    /**
     * Gets an instance of type ElectricResistance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElectricResistance getElectricResistance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRICRESISTANCE, DefaultElectricResistance.class);
    }

    /**
     * Gets all instances of ElectricResistance from the ontology.
     */
    public Collection<? extends ElectricResistance> getAllElectricResistanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRICRESISTANCE, DefaultElectricResistance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Energy
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Energy", Energy.class, DefaultEnergy.class);
    }

    /**
     * Creates an instance of type Energy.  Modifies the underlying ontology.
     */
    public Energy createEnergy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENERGY, DefaultEnergy.class);
    }

    /**
     * Gets an instance of type Energy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Energy getEnergy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENERGY, DefaultEnergy.class);
    }

    /**
     * Gets all instances of Energy from the ontology.
     */
    public Collection<? extends Energy> getAllEnergyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENERGY, DefaultEnergy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#EnergyDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#EnergyDensity", EnergyDensity.class, DefaultEnergyDensity.class);
    }

    /**
     * Creates an instance of type EnergyDensity.  Modifies the underlying ontology.
     */
    public EnergyDensity createEnergyDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENERGYDENSITY, DefaultEnergyDensity.class);
    }

    /**
     * Gets an instance of type EnergyDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EnergyDensity getEnergyDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENERGYDENSITY, DefaultEnergyDensity.class);
    }

    /**
     * Gets all instances of EnergyDensity from the ontology.
     */
    public Collection<? extends EnergyDensity> getAllEnergyDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENERGYDENSITY, DefaultEnergyDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Entropy
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Entropy", Entropy.class, DefaultEntropy.class);
    }

    /**
     * Creates an instance of type Entropy.  Modifies the underlying ontology.
     */
    public Entropy createEntropy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENTROPY, DefaultEntropy.class);
    }

    /**
     * Gets an instance of type Entropy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Entropy getEntropy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENTROPY, DefaultEntropy.class);
    }

    /**
     * Gets all instances of Entropy from the ontology.
     */
    public Collection<? extends Entropy> getAllEntropyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENTROPY, DefaultEntropy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Exposure
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Exposure", Exposure.class, DefaultExposure.class);
    }

    /**
     * Creates an instance of type Exposure.  Modifies the underlying ontology.
     */
    public Exposure createExposure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXPOSURE, DefaultExposure.class);
    }

    /**
     * Gets an instance of type Exposure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Exposure getExposure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXPOSURE, DefaultExposure.class);
    }

    /**
     * Gets all instances of Exposure from the ontology.
     */
    public Collection<? extends Exposure> getAllExposureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXPOSURE, DefaultExposure.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Force
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Force", Force.class, DefaultForce.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Frequency
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Frequency", Frequency.class, DefaultFrequency.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#HeatCapacity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#HeatCapacity", HeatCapacity.class, DefaultHeatCapacity.class);
    }

    /**
     * Creates an instance of type HeatCapacity.  Modifies the underlying ontology.
     */
    public HeatCapacity createHeatCapacity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HEATCAPACITY, DefaultHeatCapacity.class);
    }

    /**
     * Gets an instance of type HeatCapacity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HeatCapacity getHeatCapacity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HEATCAPACITY, DefaultHeatCapacity.class);
    }

    /**
     * Gets all instances of HeatCapacity from the ontology.
     */
    public Collection<? extends HeatCapacity> getAllHeatCapacityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HEATCAPACITY, DefaultHeatCapacity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#HeatFluxDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#HeatFluxDensity", HeatFluxDensity.class, DefaultHeatFluxDensity.class);
    }

    /**
     * Creates an instance of type HeatFluxDensity.  Modifies the underlying ontology.
     */
    public HeatFluxDensity createHeatFluxDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HEATFLUXDENSITY, DefaultHeatFluxDensity.class);
    }

    /**
     * Gets an instance of type HeatFluxDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HeatFluxDensity getHeatFluxDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HEATFLUXDENSITY, DefaultHeatFluxDensity.class);
    }

    /**
     * Gets all instances of HeatFluxDensity from the ontology.
     */
    public Collection<? extends HeatFluxDensity> getAllHeatFluxDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HEATFLUXDENSITY, DefaultHeatFluxDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Illuminance
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Illuminance", Illuminance.class, DefaultIlluminance.class);
    }

    /**
     * Creates an instance of type Illuminance.  Modifies the underlying ontology.
     */
    public Illuminance createIlluminance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ILLUMINANCE, DefaultIlluminance.class);
    }

    /**
     * Gets an instance of type Illuminance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Illuminance getIlluminance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ILLUMINANCE, DefaultIlluminance.class);
    }

    /**
     * Gets all instances of Illuminance from the ontology.
     */
    public Collection<? extends Illuminance> getAllIlluminanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ILLUMINANCE, DefaultIlluminance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Irradiance
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Irradiance", Irradiance.class, DefaultIrradiance.class);
    }

    /**
     * Creates an instance of type Irradiance.  Modifies the underlying ontology.
     */
    public Irradiance createIrradiance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IRRADIANCE, DefaultIrradiance.class);
    }

    /**
     * Gets an instance of type Irradiance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Irradiance getIrradiance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IRRADIANCE, DefaultIrradiance.class);
    }

    /**
     * Gets all instances of Irradiance from the ontology.
     */
    public Collection<? extends Irradiance> getAllIrradianceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IRRADIANCE, DefaultIrradiance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#KinematicViscosity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#KinematicViscosity", KinematicViscosity.class, DefaultKinematicViscosity.class);
    }

    /**
     * Creates an instance of type KinematicViscosity.  Modifies the underlying ontology.
     */
    public KinematicViscosity createKinematicViscosity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_KINEMATICVISCOSITY, DefaultKinematicViscosity.class);
    }

    /**
     * Gets an instance of type KinematicViscosity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public KinematicViscosity getKinematicViscosity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_KINEMATICVISCOSITY, DefaultKinematicViscosity.class);
    }

    /**
     * Gets all instances of KinematicViscosity from the ontology.
     */
    public Collection<? extends KinematicViscosity> getAllKinematicViscosityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_KINEMATICVISCOSITY, DefaultKinematicViscosity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Length
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Length", Length.class, DefaultLength.class);
    }

    /**
     * Creates an instance of type Length.  Modifies the underlying ontology.
     */
    public Length createLength(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LENGTH, DefaultLength.class);
    }

    /**
     * Gets an instance of type Length with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Length getLength(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LENGTH, DefaultLength.class);
    }

    /**
     * Gets all instances of Length from the ontology.
     */
    public Collection<? extends Length> getAllLengthInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LENGTH, DefaultLength.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#LinearFrequency
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#LinearFrequency", LinearFrequency.class, DefaultLinearFrequency.class);
    }

    /**
     * Creates an instance of type LinearFrequency.  Modifies the underlying ontology.
     */
    public LinearFrequency createLinearFrequency(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LINEARFREQUENCY, DefaultLinearFrequency.class);
    }

    /**
     * Gets an instance of type LinearFrequency with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LinearFrequency getLinearFrequency(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LINEARFREQUENCY, DefaultLinearFrequency.class);
    }

    /**
     * Gets all instances of LinearFrequency from the ontology.
     */
    public Collection<? extends LinearFrequency> getAllLinearFrequencyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LINEARFREQUENCY, DefaultLinearFrequency.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#LinearMassDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#LinearMassDensity", LinearMassDensity.class, DefaultLinearMassDensity.class);
    }

    /**
     * Creates an instance of type LinearMassDensity.  Modifies the underlying ontology.
     */
    public LinearMassDensity createLinearMassDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LINEARMASSDENSITY, DefaultLinearMassDensity.class);
    }

    /**
     * Gets an instance of type LinearMassDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LinearMassDensity getLinearMassDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LINEARMASSDENSITY, DefaultLinearMassDensity.class);
    }

    /**
     * Gets all instances of LinearMassDensity from the ontology.
     */
    public Collection<? extends LinearMassDensity> getAllLinearMassDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LINEARMASSDENSITY, DefaultLinearMassDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Luminance
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Luminance", Luminance.class, DefaultLuminance.class);
    }

    /**
     * Creates an instance of type Luminance.  Modifies the underlying ontology.
     */
    public Luminance createLuminance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LUMINANCE, DefaultLuminance.class);
    }

    /**
     * Gets an instance of type Luminance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Luminance getLuminance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LUMINANCE, DefaultLuminance.class);
    }

    /**
     * Gets all instances of Luminance from the ontology.
     */
    public Collection<? extends Luminance> getAllLuminanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LUMINANCE, DefaultLuminance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#LuminousFlux
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#LuminousFlux", LuminousFlux.class, DefaultLuminousFlux.class);
    }

    /**
     * Creates an instance of type LuminousFlux.  Modifies the underlying ontology.
     */
    public LuminousFlux createLuminousFlux(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LUMINOUSFLUX, DefaultLuminousFlux.class);
    }

    /**
     * Gets an instance of type LuminousFlux with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LuminousFlux getLuminousFlux(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LUMINOUSFLUX, DefaultLuminousFlux.class);
    }

    /**
     * Gets all instances of LuminousFlux from the ontology.
     */
    public Collection<? extends LuminousFlux> getAllLuminousFluxInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LUMINOUSFLUX, DefaultLuminousFlux.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#LuminousIntensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#LuminousIntensity", LuminousIntensity.class, DefaultLuminousIntensity.class);
    }

    /**
     * Creates an instance of type LuminousIntensity.  Modifies the underlying ontology.
     */
    public LuminousIntensity createLuminousIntensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LUMINOUSINTENSITY, DefaultLuminousIntensity.class);
    }

    /**
     * Gets an instance of type LuminousIntensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LuminousIntensity getLuminousIntensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LUMINOUSINTENSITY, DefaultLuminousIntensity.class);
    }

    /**
     * Gets all instances of LuminousIntensity from the ontology.
     */
    public Collection<? extends LuminousIntensity> getAllLuminousIntensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LUMINOUSINTENSITY, DefaultLuminousIntensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#MagneticFieldStrength
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#MagneticFieldStrength", MagneticFieldStrength.class, DefaultMagneticFieldStrength.class);
    }

    /**
     * Creates an instance of type MagneticFieldStrength.  Modifies the underlying ontology.
     */
    public MagneticFieldStrength createMagneticFieldStrength(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAGNETICFIELDSTRENGTH, DefaultMagneticFieldStrength.class);
    }

    /**
     * Gets an instance of type MagneticFieldStrength with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MagneticFieldStrength getMagneticFieldStrength(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAGNETICFIELDSTRENGTH, DefaultMagneticFieldStrength.class);
    }

    /**
     * Gets all instances of MagneticFieldStrength from the ontology.
     */
    public Collection<? extends MagneticFieldStrength> getAllMagneticFieldStrengthInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAGNETICFIELDSTRENGTH, DefaultMagneticFieldStrength.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#MagneticFlux
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#MagneticFlux", MagneticFlux.class, DefaultMagneticFlux.class);
    }

    /**
     * Creates an instance of type MagneticFlux.  Modifies the underlying ontology.
     */
    public MagneticFlux createMagneticFlux(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAGNETICFLUX, DefaultMagneticFlux.class);
    }

    /**
     * Gets an instance of type MagneticFlux with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MagneticFlux getMagneticFlux(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAGNETICFLUX, DefaultMagneticFlux.class);
    }

    /**
     * Gets all instances of MagneticFlux from the ontology.
     */
    public Collection<? extends MagneticFlux> getAllMagneticFluxInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAGNETICFLUX, DefaultMagneticFlux.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#MagneticFluxDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#MagneticFluxDensity", MagneticFluxDensity.class, DefaultMagneticFluxDensity.class);
    }

    /**
     * Creates an instance of type MagneticFluxDensity.  Modifies the underlying ontology.
     */
    public MagneticFluxDensity createMagneticFluxDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAGNETICFLUXDENSITY, DefaultMagneticFluxDensity.class);
    }

    /**
     * Gets an instance of type MagneticFluxDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MagneticFluxDensity getMagneticFluxDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAGNETICFLUXDENSITY, DefaultMagneticFluxDensity.class);
    }

    /**
     * Gets all instances of MagneticFluxDensity from the ontology.
     */
    public Collection<? extends MagneticFluxDensity> getAllMagneticFluxDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAGNETICFLUXDENSITY, DefaultMagneticFluxDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Mass
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Mass", Mass.class, DefaultMass.class);
    }

    /**
     * Creates an instance of type Mass.  Modifies the underlying ontology.
     */
    public Mass createMass(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MASS, DefaultMass.class);
    }

    /**
     * Gets an instance of type Mass with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mass getMass(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MASS, DefaultMass.class);
    }

    /**
     * Gets all instances of Mass from the ontology.
     */
    public Collection<? extends Mass> getAllMassInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MASS, DefaultMass.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#MassDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#MassDensity", MassDensity.class, DefaultMassDensity.class);
    }

    /**
     * Creates an instance of type MassDensity.  Modifies the underlying ontology.
     */
    public MassDensity createMassDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MASSDENSITY, DefaultMassDensity.class);
    }

    /**
     * Gets an instance of type MassDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MassDensity getMassDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MASSDENSITY, DefaultMassDensity.class);
    }

    /**
     * Gets all instances of MassDensity from the ontology.
     */
    public Collection<? extends MassDensity> getAllMassDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MASSDENSITY, DefaultMassDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#MolarEnergy
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#MolarEnergy", MolarEnergy.class, DefaultMolarEnergy.class);
    }

    /**
     * Creates an instance of type MolarEnergy.  Modifies the underlying ontology.
     */
    public MolarEnergy createMolarEnergy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARENERGY, DefaultMolarEnergy.class);
    }

    /**
     * Gets an instance of type MolarEnergy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarEnergy getMolarEnergy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARENERGY, DefaultMolarEnergy.class);
    }

    /**
     * Gets all instances of MolarEnergy from the ontology.
     */
    public Collection<? extends MolarEnergy> getAllMolarEnergyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARENERGY, DefaultMolarEnergy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#MolarEntropy
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#MolarEntropy", MolarEntropy.class, DefaultMolarEntropy.class);
    }

    /**
     * Creates an instance of type MolarEntropy.  Modifies the underlying ontology.
     */
    public MolarEntropy createMolarEntropy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARENTROPY, DefaultMolarEntropy.class);
    }

    /**
     * Gets an instance of type MolarEntropy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarEntropy getMolarEntropy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARENTROPY, DefaultMolarEntropy.class);
    }

    /**
     * Gets all instances of MolarEntropy from the ontology.
     */
    public Collection<? extends MolarEntropy> getAllMolarEntropyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARENTROPY, DefaultMolarEntropy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#MolarHeatCapacity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#MolarHeatCapacity", MolarHeatCapacity.class, DefaultMolarHeatCapacity.class);
    }

    /**
     * Creates an instance of type MolarHeatCapacity.  Modifies the underlying ontology.
     */
    public MolarHeatCapacity createMolarHeatCapacity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOLARHEATCAPACITY, DefaultMolarHeatCapacity.class);
    }

    /**
     * Gets an instance of type MolarHeatCapacity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MolarHeatCapacity getMolarHeatCapacity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOLARHEATCAPACITY, DefaultMolarHeatCapacity.class);
    }

    /**
     * Gets all instances of MolarHeatCapacity from the ontology.
     */
    public Collection<? extends MolarHeatCapacity> getAllMolarHeatCapacityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOLARHEATCAPACITY, DefaultMolarHeatCapacity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#MomentOfForce
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#MomentOfForce", MomentOfForce.class, DefaultMomentOfForce.class);
    }

    /**
     * Creates an instance of type MomentOfForce.  Modifies the underlying ontology.
     */
    public MomentOfForce createMomentOfForce(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOMENTOFFORCE, DefaultMomentOfForce.class);
    }

    /**
     * Gets an instance of type MomentOfForce with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MomentOfForce getMomentOfForce(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOMENTOFFORCE, DefaultMomentOfForce.class);
    }

    /**
     * Gets all instances of MomentOfForce from the ontology.
     */
    public Collection<? extends MomentOfForce> getAllMomentOfForceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOMENTOFFORCE, DefaultMomentOfForce.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#MomentOfInertia
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#MomentOfInertia", MomentOfInertia.class, DefaultMomentOfInertia.class);
    }

    /**
     * Creates an instance of type MomentOfInertia.  Modifies the underlying ontology.
     */
    public MomentOfInertia createMomentOfInertia(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOMENTOFINERTIA, DefaultMomentOfInertia.class);
    }

    /**
     * Gets an instance of type MomentOfInertia with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MomentOfInertia getMomentOfInertia(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOMENTOFINERTIA, DefaultMomentOfInertia.class);
    }

    /**
     * Gets all instances of MomentOfInertia from the ontology.
     */
    public Collection<? extends MomentOfInertia> getAllMomentOfInertiaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOMENTOFINERTIA, DefaultMomentOfInertia.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Momentum
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Momentum", Momentum.class, DefaultMomentum.class);
    }

    /**
     * Creates an instance of type Momentum.  Modifies the underlying ontology.
     */
    public Momentum createMomentum(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOMENTUM, DefaultMomentum.class);
    }

    /**
     * Gets an instance of type Momentum with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Momentum getMomentum(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOMENTUM, DefaultMomentum.class);
    }

    /**
     * Gets all instances of Momentum from the ontology.
     */
    public Collection<? extends Momentum> getAllMomentumInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOMENTUM, DefaultMomentum.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Permeability
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Permeability", Permeability.class, DefaultPermeability.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Permittivity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Permittivity", Permittivity.class, DefaultPermittivity.class);
    }

    /**
     * Creates an instance of type Permittivity.  Modifies the underlying ontology.
     */
    public Permittivity createPermittivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERMITTIVITY, DefaultPermittivity.class);
    }

    /**
     * Gets an instance of type Permittivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Permittivity getPermittivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERMITTIVITY, DefaultPermittivity.class);
    }

    /**
     * Gets all instances of Permittivity from the ontology.
     */
    public Collection<? extends Permittivity> getAllPermittivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERMITTIVITY, DefaultPermittivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#PlaneAngle
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#PlaneAngle", PlaneAngle.class, DefaultPlaneAngle.class);
    }

    /**
     * Creates an instance of type PlaneAngle.  Modifies the underlying ontology.
     */
    public PlaneAngle createPlaneAngle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLANEANGLE, DefaultPlaneAngle.class);
    }

    /**
     * Gets an instance of type PlaneAngle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PlaneAngle getPlaneAngle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLANEANGLE, DefaultPlaneAngle.class);
    }

    /**
     * Gets all instances of PlaneAngle from the ontology.
     */
    public Collection<? extends PlaneAngle> getAllPlaneAngleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLANEANGLE, DefaultPlaneAngle.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Power
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Power", Power.class, DefaultPower.class);
    }

    /**
     * Creates an instance of type Power.  Modifies the underlying ontology.
     */
    public Power createPower(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POWER, DefaultPower.class);
    }

    /**
     * Gets an instance of type Power with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Power getPower(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POWER, DefaultPower.class);
    }

    /**
     * Gets all instances of Power from the ontology.
     */
    public Collection<? extends Power> getAllPowerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POWER, DefaultPower.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#PowerDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#PowerDensity", PowerDensity.class, DefaultPowerDensity.class);
    }

    /**
     * Creates an instance of type PowerDensity.  Modifies the underlying ontology.
     */
    public PowerDensity createPowerDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POWERDENSITY, DefaultPowerDensity.class);
    }

    /**
     * Gets an instance of type PowerDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PowerDensity getPowerDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POWERDENSITY, DefaultPowerDensity.class);
    }

    /**
     * Gets all instances of PowerDensity from the ontology.
     */
    public Collection<? extends PowerDensity> getAllPowerDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POWERDENSITY, DefaultPowerDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Pressure
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Pressure", Pressure.class, DefaultPressure.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Radiance
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Radiance", Radiance.class, DefaultRadiance.class);
    }

    /**
     * Creates an instance of type Radiance.  Modifies the underlying ontology.
     */
    public Radiance createRadiance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RADIANCE, DefaultRadiance.class);
    }

    /**
     * Gets an instance of type Radiance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Radiance getRadiance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RADIANCE, DefaultRadiance.class);
    }

    /**
     * Gets all instances of Radiance from the ontology.
     */
    public Collection<? extends Radiance> getAllRadianceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RADIANCE, DefaultRadiance.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#RadiantIntenstiy
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#RadiantIntenstiy", RadiantIntenstiy.class, DefaultRadiantIntenstiy.class);
    }

    /**
     * Creates an instance of type RadiantIntenstiy.  Modifies the underlying ontology.
     */
    public RadiantIntenstiy createRadiantIntenstiy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RADIANTINTENSTIY, DefaultRadiantIntenstiy.class);
    }

    /**
     * Gets an instance of type RadiantIntenstiy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RadiantIntenstiy getRadiantIntenstiy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RADIANTINTENSTIY, DefaultRadiantIntenstiy.class);
    }

    /**
     * Gets all instances of RadiantIntenstiy from the ontology.
     */
    public Collection<? extends RadiantIntenstiy> getAllRadiantIntenstiyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RADIANTINTENSTIY, DefaultRadiantIntenstiy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#SI_units
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#SI_units", SI_units.class, DefaultSI_units.class);
    }

    /**
     * Creates an instance of type SI_units.  Modifies the underlying ontology.
     */
    public SI_units createSI_units(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SI_UNITS, DefaultSI_units.class);
    }

    /**
     * Gets an instance of type SI_units with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SI_units getSI_units(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SI_UNITS, DefaultSI_units.class);
    }

    /**
     * Gets all instances of SI_units from the ontology.
     */
    public Collection<? extends SI_units> getAllSI_unitsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SI_UNITS, DefaultSI_units.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#SolidAngle
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#SolidAngle", SolidAngle.class, DefaultSolidAngle.class);
    }

    /**
     * Creates an instance of type SolidAngle.  Modifies the underlying ontology.
     */
    public SolidAngle createSolidAngle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOLIDANGLE, DefaultSolidAngle.class);
    }

    /**
     * Gets an instance of type SolidAngle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SolidAngle getSolidAngle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOLIDANGLE, DefaultSolidAngle.class);
    }

    /**
     * Gets all instances of SolidAngle from the ontology.
     */
    public Collection<? extends SolidAngle> getAllSolidAngleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOLIDANGLE, DefaultSolidAngle.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#SpecificEnergy
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#SpecificEnergy", SpecificEnergy.class, DefaultSpecificEnergy.class);
    }

    /**
     * Creates an instance of type SpecificEnergy.  Modifies the underlying ontology.
     */
    public SpecificEnergy createSpecificEnergy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIFICENERGY, DefaultSpecificEnergy.class);
    }

    /**
     * Gets an instance of type SpecificEnergy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpecificEnergy getSpecificEnergy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIFICENERGY, DefaultSpecificEnergy.class);
    }

    /**
     * Gets all instances of SpecificEnergy from the ontology.
     */
    public Collection<? extends SpecificEnergy> getAllSpecificEnergyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIFICENERGY, DefaultSpecificEnergy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#SpecificEntropy
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#SpecificEntropy", SpecificEntropy.class, DefaultSpecificEntropy.class);
    }

    /**
     * Creates an instance of type SpecificEntropy.  Modifies the underlying ontology.
     */
    public SpecificEntropy createSpecificEntropy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIFICENTROPY, DefaultSpecificEntropy.class);
    }

    /**
     * Gets an instance of type SpecificEntropy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpecificEntropy getSpecificEntropy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIFICENTROPY, DefaultSpecificEntropy.class);
    }

    /**
     * Gets all instances of SpecificEntropy from the ontology.
     */
    public Collection<? extends SpecificEntropy> getAllSpecificEntropyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIFICENTROPY, DefaultSpecificEntropy.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#SpecificHeatCapacity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#SpecificHeatCapacity", SpecificHeatCapacity.class, DefaultSpecificHeatCapacity.class);
    }

    /**
     * Creates an instance of type SpecificHeatCapacity.  Modifies the underlying ontology.
     */
    public SpecificHeatCapacity createSpecificHeatCapacity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIFICHEATCAPACITY, DefaultSpecificHeatCapacity.class);
    }

    /**
     * Gets an instance of type SpecificHeatCapacity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpecificHeatCapacity getSpecificHeatCapacity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIFICHEATCAPACITY, DefaultSpecificHeatCapacity.class);
    }

    /**
     * Gets all instances of SpecificHeatCapacity from the ontology.
     */
    public Collection<? extends SpecificHeatCapacity> getAllSpecificHeatCapacityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIFICHEATCAPACITY, DefaultSpecificHeatCapacity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#SpecificVolume
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#SpecificVolume", SpecificVolume.class, DefaultSpecificVolume.class);
    }

    /**
     * Creates an instance of type SpecificVolume.  Modifies the underlying ontology.
     */
    public SpecificVolume createSpecificVolume(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIFICVOLUME, DefaultSpecificVolume.class);
    }

    /**
     * Gets an instance of type SpecificVolume with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpecificVolume getSpecificVolume(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIFICVOLUME, DefaultSpecificVolume.class);
    }

    /**
     * Gets all instances of SpecificVolume from the ontology.
     */
    public Collection<? extends SpecificVolume> getAllSpecificVolumeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIFICVOLUME, DefaultSpecificVolume.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Speed
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Speed", Speed.class, DefaultSpeed.class);
    }

    /**
     * Creates an instance of type Speed.  Modifies the underlying ontology.
     */
    public Speed createSpeed(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPEED, DefaultSpeed.class);
    }

    /**
     * Gets an instance of type Speed with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Speed getSpeed(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPEED, DefaultSpeed.class);
    }

    /**
     * Gets all instances of Speed from the ontology.
     */
    public Collection<? extends Speed> getAllSpeedInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPEED, DefaultSpeed.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#SurfaceEnergyDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#SurfaceEnergyDensity", SurfaceEnergyDensity.class, DefaultSurfaceEnergyDensity.class);
    }

    /**
     * Creates an instance of type SurfaceEnergyDensity.  Modifies the underlying ontology.
     */
    public SurfaceEnergyDensity createSurfaceEnergyDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SURFACEENERGYDENSITY, DefaultSurfaceEnergyDensity.class);
    }

    /**
     * Gets an instance of type SurfaceEnergyDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SurfaceEnergyDensity getSurfaceEnergyDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SURFACEENERGYDENSITY, DefaultSurfaceEnergyDensity.class);
    }

    /**
     * Gets all instances of SurfaceEnergyDensity from the ontology.
     */
    public Collection<? extends SurfaceEnergyDensity> getAllSurfaceEnergyDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SURFACEENERGYDENSITY, DefaultSurfaceEnergyDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#SurfacePowerDensity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#SurfacePowerDensity", SurfacePowerDensity.class, DefaultSurfacePowerDensity.class);
    }

    /**
     * Creates an instance of type SurfacePowerDensity.  Modifies the underlying ontology.
     */
    public SurfacePowerDensity createSurfacePowerDensity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SURFACEPOWERDENSITY, DefaultSurfacePowerDensity.class);
    }

    /**
     * Gets an instance of type SurfacePowerDensity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SurfacePowerDensity getSurfacePowerDensity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SURFACEPOWERDENSITY, DefaultSurfacePowerDensity.class);
    }

    /**
     * Gets all instances of SurfacePowerDensity from the ontology.
     */
    public Collection<? extends SurfacePowerDensity> getAllSurfacePowerDensityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SURFACEPOWERDENSITY, DefaultSurfacePowerDensity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#SurfaceTension
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#SurfaceTension", SurfaceTension.class, DefaultSurfaceTension.class);
    }

    /**
     * Creates an instance of type SurfaceTension.  Modifies the underlying ontology.
     */
    public SurfaceTension createSurfaceTension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SURFACETENSION, DefaultSurfaceTension.class);
    }

    /**
     * Gets an instance of type SurfaceTension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SurfaceTension getSurfaceTension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SURFACETENSION, DefaultSurfaceTension.class);
    }

    /**
     * Gets all instances of SurfaceTension from the ontology.
     */
    public Collection<? extends SurfaceTension> getAllSurfaceTensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SURFACETENSION, DefaultSurfaceTension.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ThermalConductivity
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ThermalConductivity", ThermalConductivity.class, DefaultThermalConductivity.class);
    }

    /**
     * Creates an instance of type ThermalConductivity.  Modifies the underlying ontology.
     */
    public ThermalConductivity createThermalConductivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THERMALCONDUCTIVITY, DefaultThermalConductivity.class);
    }

    /**
     * Gets an instance of type ThermalConductivity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ThermalConductivity getThermalConductivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THERMALCONDUCTIVITY, DefaultThermalConductivity.class);
    }

    /**
     * Gets all instances of ThermalConductivity from the ontology.
     */
    public Collection<? extends ThermalConductivity> getAllThermalConductivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THERMALCONDUCTIVITY, DefaultThermalConductivity.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#ThermodynamicTemperature
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#ThermodynamicTemperature", ThermodynamicTemperature.class, DefaultThermodynamicTemperature.class);
    }

    /**
     * Creates an instance of type ThermodynamicTemperature.  Modifies the underlying ontology.
     */
    public ThermodynamicTemperature createThermodynamicTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THERMODYNAMICTEMPERATURE, DefaultThermodynamicTemperature.class);
    }

    /**
     * Gets an instance of type ThermodynamicTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ThermodynamicTemperature getThermodynamicTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THERMODYNAMICTEMPERATURE, DefaultThermodynamicTemperature.class);
    }

    /**
     * Gets all instances of ThermodynamicTemperature from the ontology.
     */
    public Collection<? extends ThermodynamicTemperature> getAllThermodynamicTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THERMODYNAMICTEMPERATURE, DefaultThermodynamicTemperature.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Time
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Time", Time.class, DefaultTime.class);
    }

    /**
     * Creates an instance of type Time.  Modifies the underlying ontology.
     */
    public Time createTime(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TIME, DefaultTime.class);
    }

    /**
     * Gets an instance of type Time with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Time getTime(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TIME, DefaultTime.class);
    }

    /**
     * Gets all instances of Time from the ontology.
     */
    public Collection<? extends Time> getAllTimeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TIME, DefaultTime.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#UnitDimension
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#UnitDimension", UnitDimension.class, DefaultUnitDimension.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#UnitSystem
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#UnitSystem", UnitSystem.class, DefaultUnitSystem.class);
    }



    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#Volume
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#Volume", Volume.class, DefaultVolume.class);
    }

    /**
     * Creates an instance of type Volume.  Modifies the underlying ontology.
     */
    public Volume createVolume(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VOLUME, DefaultVolume.class);
    }

    /**
     * Gets an instance of type Volume with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Volume getVolume(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VOLUME, DefaultVolume.class);
    }

    /**
     * Gets all instances of Volume from the ontology.
     */
    public Collection<? extends Volume> getAllVolumeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VOLUME, DefaultVolume.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#VolumeFlow
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#VolumeFlow", VolumeFlow.class, DefaultVolumeFlow.class);
    }

    /**
     * Creates an instance of type VolumeFlow.  Modifies the underlying ontology.
     */
    public VolumeFlow createVolumeFlow(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VOLUMEFLOW, DefaultVolumeFlow.class);
    }

    /**
     * Gets an instance of type VolumeFlow with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VolumeFlow getVolumeFlow(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VOLUMEFLOW, DefaultVolumeFlow.class);
    }

    /**
     * Gets all instances of VolumeFlow from the ontology.
     */
    public Collection<? extends VolumeFlow> getAllVolumeFlowInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VOLUMEFLOW, DefaultVolumeFlow.class);
    }


    /* ***************************************************
     * Class http://codata.jp/OML-UnitDimension.owl#WaveNumber
     */

    {
        javaMapping.add("http://codata.jp/OML-UnitDimension.owl#WaveNumber", WaveNumber.class, DefaultWaveNumber.class);
    }

    /**
     * Creates an instance of type WaveNumber.  Modifies the underlying ontology.
     */
    public WaveNumber createWaveNumber(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WAVENUMBER, DefaultWaveNumber.class);
    }

    /**
     * Gets an instance of type WaveNumber with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WaveNumber getWaveNumber(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WAVENUMBER, DefaultWaveNumber.class);
    }

    /**
     * Gets all instances of WaveNumber from the ontology.
     */
    public Collection<? extends WaveNumber> getAllWaveNumberInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WAVENUMBER, DefaultWaveNumber.class);
    }


    /* ***************************************************
     * Class http://www.matinfo#ChemicalComposition
     */

    {
        javaMapping.add("http://www.matinfo#ChemicalComposition", ChemicalComposition.class, DefaultChemicalComposition.class);
    }

    /**
     * Creates an instance of type ChemicalComposition.  Modifies the underlying ontology.
     */
    public ChemicalComposition createChemicalComposition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHEMICALCOMPOSITION, DefaultChemicalComposition.class);
    }

    /**
     * Gets an instance of type ChemicalComposition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ChemicalComposition getChemicalComposition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHEMICALCOMPOSITION, DefaultChemicalComposition.class);
    }

    /**
     * Gets all instances of ChemicalComposition from the ontology.
     */
    public Collection<? extends ChemicalComposition> getAllChemicalCompositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHEMICALCOMPOSITION, DefaultChemicalComposition.class);
    }


    /* ***************************************************
     * Class http://www.matinfo#CommonName
     */

    {
        javaMapping.add("http://www.matinfo#CommonName", CommonName.class, DefaultCommonName.class);
    }

    /**
     * Creates an instance of type CommonName.  Modifies the underlying ontology.
     */
    public CommonName createCommonName(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMONNAME, DefaultCommonName.class);
    }

    /**
     * Gets an instance of type CommonName with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CommonName getCommonName(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMONNAME, DefaultCommonName.class);
    }

    /**
     * Gets all instances of CommonName from the ontology.
     */
    public Collection<? extends CommonName> getAllCommonNameInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMONNAME, DefaultCommonName.class);
    }


    /* ***************************************************
     * Class http://www.matinfo#EngineeringMaterial
     */

    {
        javaMapping.add("http://www.matinfo#EngineeringMaterial", EngineeringMaterial.class, DefaultEngineeringMaterial.class);
    }

    /**
     * Creates an instance of type EngineeringMaterial.  Modifies the underlying ontology.
     */
    public EngineeringMaterial createEngineeringMaterial(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENGINEERINGMATERIAL, DefaultEngineeringMaterial.class);
    }

    /**
     * Gets an instance of type EngineeringMaterial with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EngineeringMaterial getEngineeringMaterial(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENGINEERINGMATERIAL, DefaultEngineeringMaterial.class);
    }

    /**
     * Gets all instances of EngineeringMaterial from the ontology.
     */
    public Collection<? extends EngineeringMaterial> getAllEngineeringMaterialInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENGINEERINGMATERIAL, DefaultEngineeringMaterial.class);
    }


    /* ***************************************************
     * Class http://www.matinfo#MaterialProperty
     */

    {
        javaMapping.add("http://www.matinfo#MaterialProperty", MaterialProperty.class, DefaultMaterialProperty.class);
    }

    /**
     * Creates an instance of type MaterialProperty.  Modifies the underlying ontology.
     */
    public MaterialProperty createMaterialProperty(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATERIALPROPERTY, DefaultMaterialProperty.class);
    }

    /**
     * Gets an instance of type MaterialProperty with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MaterialProperty getMaterialProperty(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATERIALPROPERTY, DefaultMaterialProperty.class);
    }

    /**
     * Gets all instances of MaterialProperty from the ontology.
     */
    public Collection<? extends MaterialProperty> getAllMaterialPropertyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATERIALPROPERTY, DefaultMaterialProperty.class);
    }


    /* ***************************************************
     * Class http://www.matinfo#Property
     */

    {
        javaMapping.add("http://www.matinfo#Property", Property.class, DefaultProperty.class);
    }



    /* ***************************************************
     * Class http://www.matinfo#Specimen
     */

    {
        javaMapping.add("http://www.matinfo#Specimen", Specimen.class, DefaultSpecimen.class);
    }

    /**
     * Creates an instance of type Specimen.  Modifies the underlying ontology.
     */
    public Specimen createSpecimen(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIMEN, DefaultSpecimen.class);
    }

    /**
     * Gets an instance of type Specimen with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Specimen getSpecimen(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIMEN, DefaultSpecimen.class);
    }

    /**
     * Gets all instances of Specimen from the ontology.
     */
    public Collection<? extends Specimen> getAllSpecimenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIMEN, DefaultSpecimen.class);
    }


    /* ***************************************************
     * Class http://www.property#Property
     */

    {
        javaMapping.add("http://www.property#Property", Property.class, DefaultProperty.class);
    }

    /**
     * Creates an instance of type Property.  Modifies the underlying ontology.
     */
    public Property createProperty(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROPERTY, DefaultProperty.class);
    }

    /**
     * Gets an instance of type Property with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Property getProperty(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROPERTY, DefaultProperty.class);
    }

    /**
     * Gets all instances of Property from the ontology.
     */
    public Collection<? extends Property> getAllPropertyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROPERTY, DefaultProperty.class);
    }


    /* ***************************************************
     * Class http://www.property#UnitDimension
     */

    {
        javaMapping.add("http://www.property#UnitDimension", UnitDimension.class, DefaultUnitDimension.class);
    }

    /**
     * Creates an instance of type UnitDimension.  Modifies the underlying ontology.
     */
    public UnitDimension createUnitDimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UNITDIMENSION, DefaultUnitDimension.class);
    }

    /**
     * Gets an instance of type UnitDimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UnitDimension getUnitDimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UNITDIMENSION, DefaultUnitDimension.class);
    }

    /**
     * Gets all instances of UnitDimension from the ontology.
     */
    public Collection<? extends UnitDimension> getAllUnitDimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UNITDIMENSION, DefaultUnitDimension.class);
    }


    /* ***************************************************
     * Class http://www.property#UnitSystem
     */

    {
        javaMapping.add("http://www.property#UnitSystem", UnitSystem.class, DefaultUnitSystem.class);
    }

    /**
     * Creates an instance of type UnitSystem.  Modifies the underlying ontology.
     */
    public UnitSystem createUnitSystem(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UNITSYSTEM, DefaultUnitSystem.class);
    }

    /**
     * Gets an instance of type UnitSystem with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UnitSystem getUnitSystem(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UNITSYSTEM, DefaultUnitSystem.class);
    }

    /**
     * Gets all instances of UnitSystem from the ontology.
     */
    public Collection<? extends UnitSystem> getAllUnitSystemInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UNITSYSTEM, DefaultUnitSystem.class);
    }


    /* ***************************************************
     * Class http://www.property#Value
     */

    {
        javaMapping.add("http://www.property#Value", Value.class, DefaultValue.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#ArgumentFunctionPair
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#ArgumentFunctionPair", ArgumentFunctionPair.class, DefaultArgumentFunctionPair.class);
    }

    /**
     * Creates an instance of type ArgumentFunctionPair.  Modifies the underlying ontology.
     */
    public ArgumentFunctionPair createArgumentFunctionPair(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARGUMENTFUNCTIONPAIR, DefaultArgumentFunctionPair.class);
    }

    /**
     * Gets an instance of type ArgumentFunctionPair with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ArgumentFunctionPair getArgumentFunctionPair(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARGUMENTFUNCTIONPAIR, DefaultArgumentFunctionPair.class);
    }

    /**
     * Gets all instances of ArgumentFunctionPair from the ontology.
     */
    public Collection<? extends ArgumentFunctionPair> getAllArgumentFunctionPairInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARGUMENTFUNCTIONPAIR, DefaultArgumentFunctionPair.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#BoundarySettings
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#BoundarySettings", BoundarySettings.class, DefaultBoundarySettings.class);
    }

    /**
     * Creates an instance of type BoundarySettings.  Modifies the underlying ontology.
     */
    public BoundarySettings createBoundarySettings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOUNDARYSETTINGS, DefaultBoundarySettings.class);
    }

    /**
     * Gets an instance of type BoundarySettings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BoundarySettings getBoundarySettings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOUNDARYSETTINGS, DefaultBoundarySettings.class);
    }

    /**
     * Gets all instances of BoundarySettings from the ontology.
     */
    public Collection<? extends BoundarySettings> getAllBoundarySettingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOUNDARYSETTINGS, DefaultBoundarySettings.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#DomainSettings
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#DomainSettings", DomainSettings.class, DefaultDomainSettings.class);
    }

    /**
     * Creates an instance of type DomainSettings.  Modifies the underlying ontology.
     */
    public DomainSettings createDomainSettings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOMAINSETTINGS, DefaultDomainSettings.class);
    }

    /**
     * Gets an instance of type DomainSettings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DomainSettings getDomainSettings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOMAINSETTINGS, DefaultDomainSettings.class);
    }

    /**
     * Gets all instances of DomainSettings from the ontology.
     */
    public Collection<? extends DomainSettings> getAllDomainSettingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOMAINSETTINGS, DefaultDomainSettings.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#ElementGroupSettings
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#ElementGroupSettings", ElementGroupSettings.class, DefaultElementGroupSettings.class);
    }

    /**
     * Creates an instance of type ElementGroupSettings.  Modifies the underlying ontology.
     */
    public ElementGroupSettings createElementGroupSettings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELEMENTGROUPSETTINGS, DefaultElementGroupSettings.class);
    }

    /**
     * Gets an instance of type ElementGroupSettings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElementGroupSettings getElementGroupSettings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELEMENTGROUPSETTINGS, DefaultElementGroupSettings.class);
    }

    /**
     * Gets all instances of ElementGroupSettings from the ontology.
     */
    public Collection<? extends ElementGroupSettings> getAllElementGroupSettingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELEMENTGROUPSETTINGS, DefaultElementGroupSettings.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#ElementSettings
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#ElementSettings", ElementSettings.class, DefaultElementSettings.class);
    }

    /**
     * Creates an instance of type ElementSettings.  Modifies the underlying ontology.
     */
    public ElementSettings createElementSettings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELEMENTSETTINGS, DefaultElementSettings.class);
    }

    /**
     * Gets an instance of type ElementSettings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElementSettings getElementSettings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELEMENTSETTINGS, DefaultElementSettings.class);
    }

    /**
     * Gets all instances of ElementSettings from the ontology.
     */
    public Collection<? extends ElementSettings> getAllElementSettingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELEMENTSETTINGS, DefaultElementSettings.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#FiniteElementModelSettings
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#FiniteElementModelSettings", FiniteElementModelSettings.class, DefaultFiniteElementModelSettings.class);
    }

    /**
     * Creates an instance of type FiniteElementModelSettings.  Modifies the underlying ontology.
     */
    public FiniteElementModelSettings createFiniteElementModelSettings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINITEELEMENTMODELSETTINGS, DefaultFiniteElementModelSettings.class);
    }

    /**
     * Gets an instance of type FiniteElementModelSettings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FiniteElementModelSettings getFiniteElementModelSettings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINITEELEMENTMODELSETTINGS, DefaultFiniteElementModelSettings.class);
    }

    /**
     * Gets all instances of FiniteElementModelSettings from the ontology.
     */
    public Collection<? extends FiniteElementModelSettings> getAllFiniteElementModelSettingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINITEELEMENTMODELSETTINGS, DefaultFiniteElementModelSettings.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#MaterialSettings
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#MaterialSettings", MaterialSettings.class, DefaultMaterialSettings.class);
    }

    /**
     * Creates an instance of type MaterialSettings.  Modifies the underlying ontology.
     */
    public MaterialSettings createMaterialSettings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATERIALSETTINGS, DefaultMaterialSettings.class);
    }

    /**
     * Gets an instance of type MaterialSettings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MaterialSettings getMaterialSettings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATERIALSETTINGS, DefaultMaterialSettings.class);
    }

    /**
     * Gets all instances of MaterialSettings from the ontology.
     */
    public Collection<? extends MaterialSettings> getAllMaterialSettingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATERIALSETTINGS, DefaultMaterialSettings.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#MeshSettings
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#MeshSettings", MeshSettings.class, DefaultMeshSettings.class);
    }

    /**
     * Creates an instance of type MeshSettings.  Modifies the underlying ontology.
     */
    public MeshSettings createMeshSettings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MESHSETTINGS, DefaultMeshSettings.class);
    }

    /**
     * Gets an instance of type MeshSettings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeshSettings getMeshSettings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MESHSETTINGS, DefaultMeshSettings.class);
    }

    /**
     * Gets all instances of MeshSettings from the ontology.
     */
    public Collection<? extends MeshSettings> getAllMeshSettingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MESHSETTINGS, DefaultMeshSettings.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#NodeSettings
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#NodeSettings", NodeSettings.class, DefaultNodeSettings.class);
    }

    /**
     * Creates an instance of type NodeSettings.  Modifies the underlying ontology.
     */
    public NodeSettings createNodeSettings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NODESETTINGS, DefaultNodeSettings.class);
    }

    /**
     * Gets an instance of type NodeSettings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NodeSettings getNodeSettings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NODESETTINGS, DefaultNodeSettings.class);
    }

    /**
     * Gets all instances of NodeSettings from the ontology.
     */
    public Collection<? extends NodeSettings> getAllNodeSettingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NODESETTINGS, DefaultNodeSettings.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#SolverSettings
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#SolverSettings", SolverSettings.class, DefaultSolverSettings.class);
    }

    /**
     * Creates an instance of type SolverSettings.  Modifies the underlying ontology.
     */
    public SolverSettings createSolverSettings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOLVERSETTINGS, DefaultSolverSettings.class);
    }

    /**
     * Gets an instance of type SolverSettings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SolverSettings getSolverSettings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOLVERSETTINGS, DefaultSolverSettings.class);
    }

    /**
     * Gets all instances of SolverSettings from the ontology.
     */
    public Collection<? extends SolverSettings> getAllSolverSettingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOLVERSETTINGS, DefaultSolverSettings.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#UNVBlock
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#UNVBlock", UNVBlock.class, DefaultUNVBlock.class);
    }

    /**
     * Creates an instance of type UNVBlock.  Modifies the underlying ontology.
     */
    public UNVBlock createUNVBlock(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UNVBLOCK, DefaultUNVBlock.class);
    }

    /**
     * Gets an instance of type UNVBlock with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UNVBlock getUNVBlock(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UNVBLOCK, DefaultUNVBlock.class);
    }

    /**
     * Gets all instances of UNVBlock from the ontology.
     */
    public Collection<? extends UNVBlock> getAllUNVBlockInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UNVBLOCK, DefaultUNVBlock.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#UNVBlockSettings
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#UNVBlockSettings", UNVBlockSettings.class, DefaultUNVBlockSettings.class);
    }

    /**
     * Creates an instance of type UNVBlockSettings.  Modifies the underlying ontology.
     */
    public UNVBlockSettings createUNVBlockSettings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UNVBLOCKSETTINGS, DefaultUNVBlockSettings.class);
    }

    /**
     * Gets an instance of type UNVBlockSettings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UNVBlockSettings getUNVBlockSettings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UNVBLOCKSETTINGS, DefaultUNVBlockSettings.class);
    }

    /**
     * Gets all instances of UNVBlockSettings from the ontology.
     */
    public Collection<? extends UNVBlockSettings> getAllUNVBlockSettingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UNVBLOCKSETTINGS, DefaultUNVBlockSettings.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#UNVOutputFile
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#UNVOutputFile", UNVOutputFile.class, DefaultUNVOutputFile.class);
    }

    /**
     * Creates an instance of type UNVOutputFile.  Modifies the underlying ontology.
     */
    public UNVOutputFile createUNVOutputFile(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UNVOUTPUTFILE, DefaultUNVOutputFile.class);
    }

    /**
     * Gets an instance of type UNVOutputFile with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UNVOutputFile getUNVOutputFile(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UNVOUTPUTFILE, DefaultUNVOutputFile.class);
    }

    /**
     * Gets all instances of UNVOutputFile from the ontology.
     */
    public Collection<? extends UNVOutputFile> getAllUNVOutputFileInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UNVOUTPUTFILE, DefaultUNVOutputFile.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#AngularVelocity
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#AngularVelocity", Angular_Velocity.class, DefaultAngular_Velocity.class);
    }

    /**
     * Creates an instance of type Angular_Velocity.  Modifies the underlying ontology.
     */
    public Angular_Velocity createAngular_Velocity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANGULAR_VELOCITY, DefaultAngular_Velocity.class);
    }

    /**
     * Gets an instance of type Angular_Velocity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Angular_Velocity getAngular_Velocity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANGULAR_VELOCITY, DefaultAngular_Velocity.class);
    }

    /**
     * Gets all instances of Angular_Velocity from the ontology.
     */
    public Collection<? extends Angular_Velocity> getAllAngular_VelocityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANGULAR_VELOCITY, DefaultAngular_Velocity.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Block
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Block", Block.class, DefaultBlock.class);
    }

    /**
     * Creates an instance of type Block.  Modifies the underlying ontology.
     */
    public Block createBlock(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLOCK, DefaultBlock.class);
    }

    /**
     * Gets an instance of type Block with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Block getBlock(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLOCK, DefaultBlock.class);
    }

    /**
     * Gets all instances of Block from the ontology.
     */
    public Collection<? extends Block> getAllBlockInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLOCK, DefaultBlock.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Boundary
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Boundary", Boundary.class, DefaultBoundary.class);
    }

    /**
     * Creates an instance of type Boundary.  Modifies the underlying ontology.
     */
    public Boundary createBoundary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOUNDARY, DefaultBoundary.class);
    }

    /**
     * Gets an instance of type Boundary with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Boundary getBoundary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOUNDARY, DefaultBoundary.class);
    }

    /**
     * Gets all instances of Boundary from the ontology.
     */
    public Collection<? extends Boundary> getAllBoundaryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOUNDARY, DefaultBoundary.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#BoundaryCondition
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#BoundaryCondition", Boundary_Condition.class, DefaultBoundary_Condition.class);
    }

    /**
     * Creates an instance of type Boundary_Condition.  Modifies the underlying ontology.
     */
    public Boundary_Condition createBoundary_Condition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOUNDARY_CONDITION, DefaultBoundary_Condition.class);
    }

    /**
     * Gets an instance of type Boundary_Condition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Boundary_Condition getBoundary_Condition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOUNDARY_CONDITION, DefaultBoundary_Condition.class);
    }

    /**
     * Gets all instances of Boundary_Condition from the ontology.
     */
    public Collection<? extends Boundary_Condition> getAllBoundary_ConditionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOUNDARY_CONDITION, DefaultBoundary_Condition.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#BoxModel
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#BoxModel", Box_Model.class, DefaultBox_Model.class);
    }

    /**
     * Creates an instance of type Box_Model.  Modifies the underlying ontology.
     */
    public Box_Model createBox_Model(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOX_MODEL, DefaultBox_Model.class);
    }

    /**
     * Gets an instance of type Box_Model with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Box_Model getBox_Model(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOX_MODEL, DefaultBox_Model.class);
    }

    /**
     * Gets all instances of Box_Model from the ontology.
     */
    public Collection<? extends Box_Model> getAllBox_ModelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOX_MODEL, DefaultBox_Model.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#BulkModulusDimension
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#BulkModulusDimension", Bulk_Modulus_Dimension.class, DefaultBulk_Modulus_Dimension.class);
    }

    /**
     * Creates an instance of type Bulk_Modulus_Dimension.  Modifies the underlying ontology.
     */
    public Bulk_Modulus_Dimension createBulk_Modulus_Dimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BULK_MODULUS_DIMENSION, DefaultBulk_Modulus_Dimension.class);
    }

    /**
     * Gets an instance of type Bulk_Modulus_Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bulk_Modulus_Dimension getBulk_Modulus_Dimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BULK_MODULUS_DIMENSION, DefaultBulk_Modulus_Dimension.class);
    }

    /**
     * Gets all instances of Bulk_Modulus_Dimension from the ontology.
     */
    public Collection<? extends Bulk_Modulus_Dimension> getAllBulk_Modulus_DimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BULK_MODULUS_DIMENSION, DefaultBulk_Modulus_Dimension.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#BulkModulusForFluid
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#BulkModulusForFluid", Bulk_Modulus_for_Fluid.class, DefaultBulk_Modulus_for_Fluid.class);
    }

    /**
     * Creates an instance of type Bulk_Modulus_for_Fluid.  Modifies the underlying ontology.
     */
    public Bulk_Modulus_for_Fluid createBulk_Modulus_for_Fluid(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BULK_MODULUS_FOR_FLUID, DefaultBulk_Modulus_for_Fluid.class);
    }

    /**
     * Gets an instance of type Bulk_Modulus_for_Fluid with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bulk_Modulus_for_Fluid getBulk_Modulus_for_Fluid(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BULK_MODULUS_FOR_FLUID, DefaultBulk_Modulus_for_Fluid.class);
    }

    /**
     * Gets all instances of Bulk_Modulus_for_Fluid from the ontology.
     */
    public Collection<? extends Bulk_Modulus_for_Fluid> getAllBulk_Modulus_for_FluidInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BULK_MODULUS_FOR_FLUID, DefaultBulk_Modulus_for_Fluid.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#BulkModulusForSolid
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#BulkModulusForSolid", Bulk_Modulus_for_Solid.class, DefaultBulk_Modulus_for_Solid.class);
    }

    /**
     * Creates an instance of type Bulk_Modulus_for_Solid.  Modifies the underlying ontology.
     */
    public Bulk_Modulus_for_Solid createBulk_Modulus_for_Solid(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BULK_MODULUS_FOR_SOLID, DefaultBulk_Modulus_for_Solid.class);
    }

    /**
     * Gets an instance of type Bulk_Modulus_for_Solid with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bulk_Modulus_for_Solid getBulk_Modulus_for_Solid(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BULK_MODULUS_FOR_SOLID, DefaultBulk_Modulus_for_Solid.class);
    }

    /**
     * Gets all instances of Bulk_Modulus_for_Solid from the ontology.
     */
    public Collection<? extends Bulk_Modulus_for_Solid> getAllBulk_Modulus_for_SolidInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BULK_MODULUS_FOR_SOLID, DefaultBulk_Modulus_for_Solid.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Cell
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Cell", Cell.class, DefaultCell.class);
    }

    /**
     * Creates an instance of type Cell.  Modifies the underlying ontology.
     */
    public Cell createCell(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CELL, DefaultCell.class);
    }

    /**
     * Gets an instance of type Cell with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cell getCell(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CELL, DefaultCell.class);
    }

    /**
     * Gets all instances of Cell from the ontology.
     */
    public Collection<? extends Cell> getAllCellInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CELL, DefaultCell.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#ConductionCoefficient
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#ConductionCoefficient", Conduction_Coefficient.class, DefaultConduction_Coefficient.class);
    }

    /**
     * Creates an instance of type Conduction_Coefficient.  Modifies the underlying ontology.
     */
    public Conduction_Coefficient createConduction_Coefficient(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONDUCTION_COEFFICIENT, DefaultConduction_Coefficient.class);
    }

    /**
     * Gets an instance of type Conduction_Coefficient with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Conduction_Coefficient getConduction_Coefficient(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONDUCTION_COEFFICIENT, DefaultConduction_Coefficient.class);
    }

    /**
     * Gets all instances of Conduction_Coefficient from the ontology.
     */
    public Collection<? extends Conduction_Coefficient> getAllConduction_CoefficientInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONDUCTION_COEFFICIENT, DefaultConduction_Coefficient.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DampingCoefficient
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DampingCoefficient", Damoing_Coefficient.class, DefaultDamoing_Coefficient.class);
    }

    /**
     * Creates an instance of type Damoing_Coefficient.  Modifies the underlying ontology.
     */
    public Damoing_Coefficient createDamoing_Coefficient(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DAMOING_COEFFICIENT, DefaultDamoing_Coefficient.class);
    }

    /**
     * Gets an instance of type Damoing_Coefficient with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Damoing_Coefficient getDamoing_Coefficient(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DAMOING_COEFFICIENT, DefaultDamoing_Coefficient.class);
    }

    /**
     * Gets all instances of Damoing_Coefficient from the ontology.
     */
    public Collection<? extends Damoing_Coefficient> getAllDamoing_CoefficientInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DAMOING_COEFFICIENT, DefaultDamoing_Coefficient.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DampingCoefficientDimension
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DampingCoefficientDimension", Damping_Coefficient_Dimension.class, DefaultDamping_Coefficient_Dimension.class);
    }

    /**
     * Creates an instance of type Damping_Coefficient_Dimension.  Modifies the underlying ontology.
     */
    public Damping_Coefficient_Dimension createDamping_Coefficient_Dimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DAMPING_COEFFICIENT_DIMENSION, DefaultDamping_Coefficient_Dimension.class);
    }

    /**
     * Gets an instance of type Damping_Coefficient_Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Damping_Coefficient_Dimension getDamping_Coefficient_Dimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DAMPING_COEFFICIENT_DIMENSION, DefaultDamping_Coefficient_Dimension.class);
    }

    /**
     * Gets all instances of Damping_Coefficient_Dimension from the ontology.
     */
    public Collection<? extends Damping_Coefficient_Dimension> getAllDamping_Coefficient_DimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DAMPING_COEFFICIENT_DIMENSION, DefaultDamping_Coefficient_Dimension.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DensityDimension
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DensityDimension", Density_Dimension.class, DefaultDensity_Dimension.class);
    }

    /**
     * Creates an instance of type Density_Dimension.  Modifies the underlying ontology.
     */
    public Density_Dimension createDensity_Dimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DENSITY_DIMENSION, DefaultDensity_Dimension.class);
    }

    /**
     * Gets an instance of type Density_Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Density_Dimension getDensity_Dimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DENSITY_DIMENSION, DefaultDensity_Dimension.class);
    }

    /**
     * Gets all instances of Density_Dimension from the ontology.
     */
    public Collection<? extends Density_Dimension> getAllDensity_DimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DENSITY_DIMENSION, DefaultDensity_Dimension.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Dimension
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Dimension", Dimension.class, DefaultDimension.class);
    }

    /**
     * Creates an instance of type Dimension.  Modifies the underlying ontology.
     */
    public Dimension createDimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIMENSION, DefaultDimension.class);
    }

    /**
     * Gets an instance of type Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dimension getDimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIMENSION, DefaultDimension.class);
    }

    /**
     * Gets all instances of Dimension from the ontology.
     */
    public Collection<? extends Dimension> getAllDimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIMENSION, DefaultDimension.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DiscreteModel
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DiscreteModel", Discrete_Model.class, DefaultDiscrete_Model.class);
    }

    /**
     * Creates an instance of type Discrete_Model.  Modifies the underlying ontology.
     */
    public Discrete_Model createDiscrete_Model(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISCRETE_MODEL, DefaultDiscrete_Model.class);
    }

    /**
     * Gets an instance of type Discrete_Model with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Discrete_Model getDiscrete_Model(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISCRETE_MODEL, DefaultDiscrete_Model.class);
    }

    /**
     * Gets all instances of Discrete_Model from the ontology.
     */
    public Collection<? extends Discrete_Model> getAllDiscrete_ModelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISCRETE_MODEL, DefaultDiscrete_Model.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DiscreteSolution
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DiscreteSolution", Discrete_Solution.class, DefaultDiscrete_Solution.class);
    }

    /**
     * Creates an instance of type Discrete_Solution.  Modifies the underlying ontology.
     */
    public Discrete_Solution createDiscrete_Solution(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISCRETE_SOLUTION, DefaultDiscrete_Solution.class);
    }

    /**
     * Gets an instance of type Discrete_Solution with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Discrete_Solution getDiscrete_Solution(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISCRETE_SOLUTION, DefaultDiscrete_Solution.class);
    }

    /**
     * Gets all instances of Discrete_Solution from the ontology.
     */
    public Collection<? extends Discrete_Solution> getAllDiscrete_SolutionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISCRETE_SOLUTION, DefaultDiscrete_Solution.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DisplacementParameter
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#DisplacementParameter", Displacement.class, DefaultDisplacement.class);
    }

    /**
     * Creates an instance of type Displacement.  Modifies the underlying ontology.
     */
    public Displacement createDisplacement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISPLACEMENT, DefaultDisplacement.class);
    }

    /**
     * Gets an instance of type Displacement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Displacement getDisplacement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISPLACEMENT, DefaultDisplacement.class);
    }

    /**
     * Gets all instances of Displacement from the ontology.
     */
    public Collection<? extends Displacement> getAllDisplacementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISPLACEMENT, DefaultDisplacement.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Distance
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Distance", Distance.class, DefaultDistance.class);
    }

    /**
     * Creates an instance of type Distance.  Modifies the underlying ontology.
     */
    public Distance createDistance(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISTANCE, DefaultDistance.class);
    }

    /**
     * Gets an instance of type Distance with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Distance getDistance(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISTANCE, DefaultDistance.class);
    }

    /**
     * Gets all instances of Distance from the ontology.
     */
    public Collection<? extends Distance> getAllDistanceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISTANCE, DefaultDistance.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#ElectricCurrent
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#ElectricCurrent", Electric_Current.class, DefaultElectric_Current.class);
    }

    /**
     * Creates an instance of type Electric_Current.  Modifies the underlying ontology.
     */
    public Electric_Current createElectric_Current(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRIC_CURRENT, DefaultElectric_Current.class);
    }

    /**
     * Gets an instance of type Electric_Current with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Electric_Current getElectric_Current(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRIC_CURRENT, DefaultElectric_Current.class);
    }

    /**
     * Gets all instances of Electric_Current from the ontology.
     */
    public Collection<? extends Electric_Current> getAllElectric_CurrentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRIC_CURRENT, DefaultElectric_Current.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Element
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Element", Finite_element.class, DefaultFinite_element.class);
    }

    /**
     * Creates an instance of type Finite_element.  Modifies the underlying ontology.
     */
    public Finite_element createFinite_element(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINITE_ELEMENT, DefaultFinite_element.class);
    }

    /**
     * Gets an instance of type Finite_element with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Finite_element getFinite_element(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINITE_ELEMENT, DefaultFinite_element.class);
    }

    /**
     * Gets all instances of Finite_element from the ontology.
     */
    public Collection<? extends Finite_element> getAllFinite_elementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINITE_ELEMENT, DefaultFinite_element.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#ElementBoundary
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#ElementBoundary", Element_Boundary.class, DefaultElement_Boundary.class);
    }

    /**
     * Creates an instance of type Element_Boundary.  Modifies the underlying ontology.
     */
    public Element_Boundary createElement_Boundary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELEMENT_BOUNDARY, DefaultElement_Boundary.class);
    }

    /**
     * Gets an instance of type Element_Boundary with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Element_Boundary getElement_Boundary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELEMENT_BOUNDARY, DefaultElement_Boundary.class);
    }

    /**
     * Gets all instances of Element_Boundary from the ontology.
     */
    public Collection<? extends Element_Boundary> getAllElement_BoundaryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELEMENT_BOUNDARY, DefaultElement_Boundary.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#ElementGroup
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#ElementGroup", Elemenmt_Group.class, DefaultElemenmt_Group.class);
    }

    /**
     * Creates an instance of type Elemenmt_Group.  Modifies the underlying ontology.
     */
    public Elemenmt_Group createElemenmt_Group(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELEMENMT_GROUP, DefaultElemenmt_Group.class);
    }

    /**
     * Gets an instance of type Elemenmt_Group with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Elemenmt_Group getElemenmt_Group(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELEMENMT_GROUP, DefaultElemenmt_Group.class);
    }

    /**
     * Gets all instances of Elemenmt_Group from the ontology.
     */
    public Collection<? extends Elemenmt_Group> getAllElemenmt_GroupInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELEMENMT_GROUP, DefaultElemenmt_Group.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Empty
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Empty", Empty.class, DefaultEmpty.class);
    }

    /**
     * Creates an instance of type Empty.  Modifies the underlying ontology.
     */
    public Empty createEmpty(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EMPTY, DefaultEmpty.class);
    }

    /**
     * Gets an instance of type Empty with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Empty getEmpty(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EMPTY, DefaultEmpty.class);
    }

    /**
     * Gets all instances of Empty from the ontology.
     */
    public Collection<? extends Empty> getAllEmptyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EMPTY, DefaultEmpty.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Euler
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Euler", Euler_Method.class, DefaultEuler_Method.class);
    }

    /**
     * Creates an instance of type Euler_Method.  Modifies the underlying ontology.
     */
    public Euler_Method createEuler_Method(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EULER_METHOD, DefaultEuler_Method.class);
    }

    /**
     * Gets an instance of type Euler_Method with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Euler_Method getEuler_Method(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EULER_METHOD, DefaultEuler_Method.class);
    }

    /**
     * Gets all instances of Euler_Method from the ontology.
     */
    public Collection<? extends Euler_Method> getAllEuler_MethodInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EULER_METHOD, DefaultEuler_Method.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#FEMDomain
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#FEMDomain", Finite_Element_Model_Domain.class, DefaultFinite_Element_Model_Domain.class);
    }

    /**
     * Creates an instance of type Finite_Element_Model_Domain.  Modifies the underlying ontology.
     */
    public Finite_Element_Model_Domain createFinite_Element_Model_Domain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINITE_ELEMENT_MODEL_DOMAIN, DefaultFinite_Element_Model_Domain.class);
    }

    /**
     * Gets an instance of type Finite_Element_Model_Domain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Finite_Element_Model_Domain getFinite_Element_Model_Domain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINITE_ELEMENT_MODEL_DOMAIN, DefaultFinite_Element_Model_Domain.class);
    }

    /**
     * Gets all instances of Finite_Element_Model_Domain from the ontology.
     */
    public Collection<? extends Finite_Element_Model_Domain> getAllFinite_Element_Model_DomainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINITE_ELEMENT_MODEL_DOMAIN, DefaultFinite_Element_Model_Domain.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#FiniteElementModel
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#FiniteElementModel", Finite_Element_Model.class, DefaultFinite_Element_Model.class);
    }

    /**
     * Creates an instance of type Finite_Element_Model.  Modifies the underlying ontology.
     */
    public Finite_Element_Model createFinite_Element_Model(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINITE_ELEMENT_MODEL, DefaultFinite_Element_Model.class);
    }

    /**
     * Gets an instance of type Finite_Element_Model with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Finite_Element_Model getFinite_Element_Model(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINITE_ELEMENT_MODEL, DefaultFinite_Element_Model.class);
    }

    /**
     * Gets all instances of Finite_Element_Model from the ontology.
     */
    public Collection<? extends Finite_Element_Model> getAllFinite_Element_ModelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINITE_ELEMENT_MODEL, DefaultFinite_Element_Model.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Force
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Force", Force.class, DefaultForce.class);
    }

    /**
     * Creates an instance of type Force.  Modifies the underlying ontology.
     */
    public Force createForce(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FORCE, DefaultForce.class);
    }

    /**
     * Gets an instance of type Force with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Force getForce(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FORCE, DefaultForce.class);
    }

    /**
     * Gets all instances of Force from the ontology.
     */
    public Collection<? extends Force> getAllForceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FORCE, DefaultForce.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Frequency
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Frequency", Frequency.class, DefaultFrequency.class);
    }

    /**
     * Creates an instance of type Frequency.  Modifies the underlying ontology.
     */
    public Frequency createFrequency(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FREQUENCY, DefaultFrequency.class);
    }

    /**
     * Gets an instance of type Frequency with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Frequency getFrequency(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FREQUENCY, DefaultFrequency.class);
    }

    /**
     * Gets all instances of Frequency from the ontology.
     */
    public Collection<? extends Frequency> getAllFrequencyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FREQUENCY, DefaultFrequency.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#GravityAcceleration
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#GravityAcceleration", Gravity_Acceleration.class, DefaultGravity_Acceleration.class);
    }

    /**
     * Creates an instance of type Gravity_Acceleration.  Modifies the underlying ontology.
     */
    public Gravity_Acceleration createGravity_Acceleration(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GRAVITY_ACCELERATION, DefaultGravity_Acceleration.class);
    }

    /**
     * Gets an instance of type Gravity_Acceleration with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Gravity_Acceleration getGravity_Acceleration(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GRAVITY_ACCELERATION, DefaultGravity_Acceleration.class);
    }

    /**
     * Gets all instances of Gravity_Acceleration from the ontology.
     */
    public Collection<? extends Gravity_Acceleration> getAllGravity_AccelerationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GRAVITY_ACCELERATION, DefaultGravity_Acceleration.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#GravityAccelerationInXDirection
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#GravityAccelerationInXDirection", Gravity_Acceleration_in_the_X_Direction.class, DefaultGravity_Acceleration_in_the_X_Direction.class);
    }

    /**
     * Creates an instance of type Gravity_Acceleration_in_the_X_Direction.  Modifies the underlying ontology.
     */
    public Gravity_Acceleration_in_the_X_Direction createGravity_Acceleration_in_the_X_Direction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GRAVITY_ACCELERATION_IN_THE_X_DIRECTION, DefaultGravity_Acceleration_in_the_X_Direction.class);
    }

    /**
     * Gets an instance of type Gravity_Acceleration_in_the_X_Direction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Gravity_Acceleration_in_the_X_Direction getGravity_Acceleration_in_the_X_Direction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GRAVITY_ACCELERATION_IN_THE_X_DIRECTION, DefaultGravity_Acceleration_in_the_X_Direction.class);
    }

    /**
     * Gets all instances of Gravity_Acceleration_in_the_X_Direction from the ontology.
     */
    public Collection<? extends Gravity_Acceleration_in_the_X_Direction> getAllGravity_Acceleration_in_the_X_DirectionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GRAVITY_ACCELERATION_IN_THE_X_DIRECTION, DefaultGravity_Acceleration_in_the_X_Direction.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#GravityAccelerationInYDirection
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#GravityAccelerationInYDirection", Gravity_Acceleration_in_the_Y_Direction.class, DefaultGravity_Acceleration_in_the_Y_Direction.class);
    }

    /**
     * Creates an instance of type Gravity_Acceleration_in_the_Y_Direction.  Modifies the underlying ontology.
     */
    public Gravity_Acceleration_in_the_Y_Direction createGravity_Acceleration_in_the_Y_Direction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GRAVITY_ACCELERATION_IN_THE_Y_DIRECTION, DefaultGravity_Acceleration_in_the_Y_Direction.class);
    }

    /**
     * Gets an instance of type Gravity_Acceleration_in_the_Y_Direction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Gravity_Acceleration_in_the_Y_Direction getGravity_Acceleration_in_the_Y_Direction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GRAVITY_ACCELERATION_IN_THE_Y_DIRECTION, DefaultGravity_Acceleration_in_the_Y_Direction.class);
    }

    /**
     * Gets all instances of Gravity_Acceleration_in_the_Y_Direction from the ontology.
     */
    public Collection<? extends Gravity_Acceleration_in_the_Y_Direction> getAllGravity_Acceleration_in_the_Y_DirectionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GRAVITY_ACCELERATION_IN_THE_Y_DIRECTION, DefaultGravity_Acceleration_in_the_Y_Direction.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#GravityAccelerationInZDirection
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#GravityAccelerationInZDirection", Gravity_Acceleration_in_the_Z_Direction.class, DefaultGravity_Acceleration_in_the_Z_Direction.class);
    }

    /**
     * Creates an instance of type Gravity_Acceleration_in_the_Z_Direction.  Modifies the underlying ontology.
     */
    public Gravity_Acceleration_in_the_Z_Direction createGravity_Acceleration_in_the_Z_Direction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GRAVITY_ACCELERATION_IN_THE_Z_DIRECTION, DefaultGravity_Acceleration_in_the_Z_Direction.class);
    }

    /**
     * Gets an instance of type Gravity_Acceleration_in_the_Z_Direction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Gravity_Acceleration_in_the_Z_Direction getGravity_Acceleration_in_the_Z_Direction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GRAVITY_ACCELERATION_IN_THE_Z_DIRECTION, DefaultGravity_Acceleration_in_the_Z_Direction.class);
    }

    /**
     * Gets all instances of Gravity_Acceleration_in_the_Z_Direction from the ontology.
     */
    public Collection<? extends Gravity_Acceleration_in_the_Z_Direction> getAllGravity_Acceleration_in_the_Z_DirectionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GRAVITY_ACCELERATION_IN_THE_Z_DIRECTION, DefaultGravity_Acceleration_in_the_Z_Direction.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#InitialCondition
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#InitialCondition", Initial_Condition.class, DefaultInitial_Condition.class);
    }

    /**
     * Creates an instance of type Initial_Condition.  Modifies the underlying ontology.
     */
    public Initial_Condition createInitial_Condition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INITIAL_CONDITION, DefaultInitial_Condition.class);
    }

    /**
     * Gets an instance of type Initial_Condition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Initial_Condition getInitial_Condition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INITIAL_CONDITION, DefaultInitial_Condition.class);
    }

    /**
     * Gets all instances of Initial_Condition from the ontology.
     */
    public Collection<? extends Initial_Condition> getAllInitial_ConditionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INITIAL_CONDITION, DefaultInitial_Condition.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#InnerEar
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#InnerEar", Inner_Ear.class, DefaultInner_Ear.class);
    }

    /**
     * Creates an instance of type Inner_Ear.  Modifies the underlying ontology.
     */
    public Inner_Ear createInner_Ear(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INNER_EAR, DefaultInner_Ear.class);
    }

    /**
     * Gets an instance of type Inner_Ear with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Inner_Ear getInner_Ear(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INNER_EAR, DefaultInner_Ear.class);
    }

    /**
     * Gets all instances of Inner_Ear from the ontology.
     */
    public Collection<? extends Inner_Ear> getAllInner_EarInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INNER_EAR, DefaultInner_Ear.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Load
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Load", Loading_.class, DefaultLoading_.class);
    }

    /**
     * Creates an instance of type Loading_.  Modifies the underlying ontology.
     */
    public Loading_ createLoading_(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOADING_, DefaultLoading_.class);
    }

    /**
     * Gets an instance of type Loading_ with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Loading_ getLoading_(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOADING_, DefaultLoading_.class);
    }

    /**
     * Gets all instances of Loading_ from the ontology.
     */
    public Collection<? extends Loading_> getAllLoading_Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOADING_, DefaultLoading_.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Material
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Material", Material.class, DefaultMaterial.class);
    }

    /**
     * Creates an instance of type Material.  Modifies the underlying ontology.
     */
    public Material createMaterial(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATERIAL, DefaultMaterial.class);
    }

    /**
     * Gets an instance of type Material with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Material getMaterial(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATERIAL, DefaultMaterial.class);
    }

    /**
     * Gets all instances of Material from the ontology.
     */
    public Collection<? extends Material> getAllMaterialInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATERIAL, DefaultMaterial.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MaterialProperty
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MaterialProperty", Material_Property.class, DefaultMaterial_Property.class);
    }

    /**
     * Creates an instance of type Material_Property.  Modifies the underlying ontology.
     */
    public Material_Property createMaterial_Property(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATERIAL_PROPERTY, DefaultMaterial_Property.class);
    }

    /**
     * Gets an instance of type Material_Property with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Material_Property getMaterial_Property(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATERIAL_PROPERTY, DefaultMaterial_Property.class);
    }

    /**
     * Gets all instances of Material_Property from the ontology.
     */
    public Collection<? extends Material_Property> getAllMaterial_PropertyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATERIAL_PROPERTY, DefaultMaterial_Property.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MaterialPropertyDynamicViscosity
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MaterialPropertyDynamicViscosity", Dynamic_Viscosity.class, DefaultDynamic_Viscosity.class);
    }

    /**
     * Creates an instance of type Dynamic_Viscosity.  Modifies the underlying ontology.
     */
    public Dynamic_Viscosity createDynamic_Viscosity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DYNAMIC_VISCOSITY, DefaultDynamic_Viscosity.class);
    }

    /**
     * Gets an instance of type Dynamic_Viscosity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dynamic_Viscosity getDynamic_Viscosity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DYNAMIC_VISCOSITY, DefaultDynamic_Viscosity.class);
    }

    /**
     * Gets all instances of Dynamic_Viscosity from the ontology.
     */
    public Collection<? extends Dynamic_Viscosity> getAllDynamic_ViscosityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DYNAMIC_VISCOSITY, DefaultDynamic_Viscosity.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MaterialPropertyKinematicViscosity
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MaterialPropertyKinematicViscosity", Kinematic_Viscosity.class, DefaultKinematic_Viscosity.class);
    }

    /**
     * Creates an instance of type Kinematic_Viscosity.  Modifies the underlying ontology.
     */
    public Kinematic_Viscosity createKinematic_Viscosity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_KINEMATIC_VISCOSITY, DefaultKinematic_Viscosity.class);
    }

    /**
     * Gets an instance of type Kinematic_Viscosity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Kinematic_Viscosity getKinematic_Viscosity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_KINEMATIC_VISCOSITY, DefaultKinematic_Viscosity.class);
    }

    /**
     * Gets all instances of Kinematic_Viscosity from the ontology.
     */
    public Collection<? extends Kinematic_Viscosity> getAllKinematic_ViscosityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_KINEMATIC_VISCOSITY, DefaultKinematic_Viscosity.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MaterialPropertyPermeability
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MaterialPropertyPermeability", Permeability.class, DefaultPermeability.class);
    }

    /**
     * Creates an instance of type Permeability.  Modifies the underlying ontology.
     */
    public Permeability createPermeability(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERMEABILITY, DefaultPermeability.class);
    }

    /**
     * Gets an instance of type Permeability with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Permeability getPermeability(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERMEABILITY, DefaultPermeability.class);
    }

    /**
     * Gets all instances of Permeability from the ontology.
     */
    public Collection<? extends Permeability> getAllPermeabilityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERMEABILITY, DefaultPermeability.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MathematicalModel
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MathematicalModel", Mathematical_Model.class, DefaultMathematical_Model.class);
    }

    /**
     * Creates an instance of type Mathematical_Model.  Modifies the underlying ontology.
     */
    public Mathematical_Model createMathematical_Model(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATHEMATICAL_MODEL, DefaultMathematical_Model.class);
    }

    /**
     * Gets an instance of type Mathematical_Model with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mathematical_Model getMathematical_Model(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATHEMATICAL_MODEL, DefaultMathematical_Model.class);
    }

    /**
     * Gets all instances of Mathematical_Model from the ontology.
     */
    public Collection<? extends Mathematical_Model> getAllMathematical_ModelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATHEMATICAL_MODEL, DefaultMathematical_Model.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MeasurementUnit
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#MeasurementUnit", Measurement_Unit.class, DefaultMeasurement_Unit.class);
    }

    /**
     * Creates an instance of type Measurement_Unit.  Modifies the underlying ontology.
     */
    public Measurement_Unit createMeasurement_Unit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEASUREMENT_UNIT, DefaultMeasurement_Unit.class);
    }

    /**
     * Gets an instance of type Measurement_Unit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Measurement_Unit getMeasurement_Unit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEASUREMENT_UNIT, DefaultMeasurement_Unit.class);
    }

    /**
     * Gets all instances of Measurement_Unit from the ontology.
     */
    public Collection<? extends Measurement_Unit> getAllMeasurement_UnitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEASUREMENT_UNIT, DefaultMeasurement_Unit.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Mesh
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Mesh", Mesh.class, DefaultMesh.class);
    }

    /**
     * Creates an instance of type Mesh.  Modifies the underlying ontology.
     */
    public Mesh createMesh(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MESH, DefaultMesh.class);
    }

    /**
     * Gets an instance of type Mesh with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mesh getMesh(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MESH, DefaultMesh.class);
    }

    /**
     * Gets all instances of Mesh from the ontology.
     */
    public Collection<? extends Mesh> getAllMeshInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MESH, DefaultMesh.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Node
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Node", Node.class, DefaultNode.class);
    }

    /**
     * Creates an instance of type Node.  Modifies the underlying ontology.
     */
    public Node createNode(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NODE, DefaultNode.class);
    }

    /**
     * Gets an instance of type Node with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Node getNode(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NODE, DefaultNode.class);
    }

    /**
     * Gets all instances of Node from the ontology.
     */
    public Collection<? extends Node> getAllNodeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NODE, DefaultNode.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PatchBoundary
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PatchBoundary", Patch_Boundary.class, DefaultPatch_Boundary.class);
    }

    /**
     * Creates an instance of type Patch_Boundary.  Modifies the underlying ontology.
     */
    public Patch_Boundary createPatch_Boundary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PATCH_BOUNDARY, DefaultPatch_Boundary.class);
    }

    /**
     * Gets an instance of type Patch_Boundary with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Patch_Boundary getPatch_Boundary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PATCH_BOUNDARY, DefaultPatch_Boundary.class);
    }

    /**
     * Gets all instances of Patch_Boundary from the ontology.
     */
    public Collection<? extends Patch_Boundary> getAllPatch_BoundaryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PATCH_BOUNDARY, DefaultPatch_Boundary.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PermeabilityDimension
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PermeabilityDimension", Permeability_Dimension.class, DefaultPermeability_Dimension.class);
    }

    /**
     * Creates an instance of type Permeability_Dimension.  Modifies the underlying ontology.
     */
    public Permeability_Dimension createPermeability_Dimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERMEABILITY_DIMENSION, DefaultPermeability_Dimension.class);
    }

    /**
     * Gets an instance of type Permeability_Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Permeability_Dimension getPermeability_Dimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERMEABILITY_DIMENSION, DefaultPermeability_Dimension.class);
    }

    /**
     * Gets all instances of Permeability_Dimension from the ontology.
     */
    public Collection<? extends Permeability_Dimension> getAllPermeability_DimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERMEABILITY_DIMENSION, DefaultPermeability_Dimension.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PhysicalAttribute
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PhysicalAttribute", Physical_Attribute.class, DefaultPhysical_Attribute.class);
    }

    /**
     * Creates an instance of type Physical_Attribute.  Modifies the underlying ontology.
     */
    public Physical_Attribute createPhysical_Attribute(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHYSICAL_ATTRIBUTE, DefaultPhysical_Attribute.class);
    }

    /**
     * Gets an instance of type Physical_Attribute with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Physical_Attribute getPhysical_Attribute(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHYSICAL_ATTRIBUTE, DefaultPhysical_Attribute.class);
    }

    /**
     * Gets all instances of Physical_Attribute from the ontology.
     */
    public Collection<? extends Physical_Attribute> getAllPhysical_AttributeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHYSICAL_ATTRIBUTE, DefaultPhysical_Attribute.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PhysicalSystem
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PhysicalSystem", Physical_System.class, DefaultPhysical_System.class);
    }

    /**
     * Creates an instance of type Physical_System.  Modifies the underlying ontology.
     */
    public Physical_System createPhysical_System(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHYSICAL_SYSTEM, DefaultPhysical_System.class);
    }

    /**
     * Gets an instance of type Physical_System with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Physical_System getPhysical_System(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHYSICAL_SYSTEM, DefaultPhysical_System.class);
    }

    /**
     * Gets all instances of Physical_System from the ontology.
     */
    public Collection<? extends Physical_System> getAllPhysical_SystemInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHYSICAL_SYSTEM, DefaultPhysical_System.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PoissonRatioDimension
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PoissonRatioDimension", Poisson_Ratio_Dimension.class, DefaultPoisson_Ratio_Dimension.class);
    }

    /**
     * Creates an instance of type Poisson_Ratio_Dimension.  Modifies the underlying ontology.
     */
    public Poisson_Ratio_Dimension createPoisson_Ratio_Dimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POISSON_RATIO_DIMENSION, DefaultPoisson_Ratio_Dimension.class);
    }

    /**
     * Gets an instance of type Poisson_Ratio_Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Poisson_Ratio_Dimension getPoisson_Ratio_Dimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POISSON_RATIO_DIMENSION, DefaultPoisson_Ratio_Dimension.class);
    }

    /**
     * Gets all instances of Poisson_Ratio_Dimension from the ontology.
     */
    public Collection<? extends Poisson_Ratio_Dimension> getAllPoisson_Ratio_DimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POISSON_RATIO_DIMENSION, DefaultPoisson_Ratio_Dimension.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Porosity
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Porosity", Porosity.class, DefaultPorosity.class);
    }

    /**
     * Creates an instance of type Porosity.  Modifies the underlying ontology.
     */
    public Porosity createPorosity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POROSITY, DefaultPorosity.class);
    }

    /**
     * Gets an instance of type Porosity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Porosity getPorosity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POROSITY, DefaultPorosity.class);
    }

    /**
     * Gets all instances of Porosity from the ontology.
     */
    public Collection<? extends Porosity> getAllPorosityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POROSITY, DefaultPorosity.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PorosityDimension
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PorosityDimension", Porosity_Dimension.class, DefaultPorosity_Dimension.class);
    }

    /**
     * Creates an instance of type Porosity_Dimension.  Modifies the underlying ontology.
     */
    public Porosity_Dimension createPorosity_Dimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POROSITY_DIMENSION, DefaultPorosity_Dimension.class);
    }

    /**
     * Gets an instance of type Porosity_Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Porosity_Dimension getPorosity_Dimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POROSITY_DIMENSION, DefaultPorosity_Dimension.class);
    }

    /**
     * Gets all instances of Porosity_Dimension from the ontology.
     */
    public Collection<? extends Porosity_Dimension> getAllPorosity_DimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POROSITY_DIMENSION, DefaultPorosity_Dimension.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Potential
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Potential", Electric_Potential.class, DefaultElectric_Potential.class);
    }

    /**
     * Creates an instance of type Electric_Potential.  Modifies the underlying ontology.
     */
    public Electric_Potential createElectric_Potential(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELECTRIC_POTENTIAL, DefaultElectric_Potential.class);
    }

    /**
     * Gets an instance of type Electric_Potential with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Electric_Potential getElectric_Potential(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELECTRIC_POTENTIAL, DefaultElectric_Potential.class);
    }

    /**
     * Gets all instances of Electric_Potential from the ontology.
     */
    public Collection<? extends Electric_Potential> getAllElectric_PotentialInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELECTRIC_POTENTIAL, DefaultElectric_Potential.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Pressure
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Pressure", Pressure.class, DefaultPressure.class);
    }

    /**
     * Creates an instance of type Pressure.  Modifies the underlying ontology.
     */
    public Pressure createPressure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRESSURE, DefaultPressure.class);
    }

    /**
     * Gets an instance of type Pressure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pressure getPressure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRESSURE, DefaultPressure.class);
    }

    /**
     * Gets all instances of Pressure from the ontology.
     */
    public Collection<? extends Pressure> getAllPressureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRESSURE, DefaultPressure.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PressureDimension
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#PressureDimension", Pressure_Dimension.class, DefaultPressure_Dimension.class);
    }

    /**
     * Creates an instance of type Pressure_Dimension.  Modifies the underlying ontology.
     */
    public Pressure_Dimension createPressure_Dimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRESSURE_DIMENSION, DefaultPressure_Dimension.class);
    }

    /**
     * Gets an instance of type Pressure_Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pressure_Dimension getPressure_Dimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRESSURE_DIMENSION, DefaultPressure_Dimension.class);
    }

    /**
     * Gets all instances of Pressure_Dimension from the ontology.
     */
    public Collection<? extends Pressure_Dimension> getAllPressure_DimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRESSURE_DIMENSION, DefaultPressure_Dimension.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Rotation
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Rotation", Rotation.class, DefaultRotation.class);
    }

    /**
     * Creates an instance of type Rotation.  Modifies the underlying ontology.
     */
    public Rotation createRotation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROTATION, DefaultRotation.class);
    }

    /**
     * Gets an instance of type Rotation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Rotation getRotation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROTATION, DefaultRotation.class);
    }

    /**
     * Gets all instances of Rotation from the ontology.
     */
    public Collection<? extends Rotation> getAllRotationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROTATION, DefaultRotation.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#RungeKutta
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#RungeKutta", Runge_Kutta_Method.class, DefaultRunge_Kutta_Method.class);
    }

    /**
     * Creates an instance of type Runge_Kutta_Method.  Modifies the underlying ontology.
     */
    public Runge_Kutta_Method createRunge_Kutta_Method(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RUNGE_KUTTA_METHOD, DefaultRunge_Kutta_Method.class);
    }

    /**
     * Gets an instance of type Runge_Kutta_Method with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Runge_Kutta_Method getRunge_Kutta_Method(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RUNGE_KUTTA_METHOD, DefaultRunge_Kutta_Method.class);
    }

    /**
     * Gets all instances of Runge_Kutta_Method from the ontology.
     */
    public Collection<? extends Runge_Kutta_Method> getAllRunge_Kutta_MethodInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RUNGE_KUTTA_METHOD, DefaultRunge_Kutta_Method.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#SifemMaterialProperty
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#SifemMaterialProperty", Sifem_Material_Property.class, DefaultSifem_Material_Property.class);
    }

    /**
     * Creates an instance of type Sifem_Material_Property.  Modifies the underlying ontology.
     */
    public Sifem_Material_Property createSifem_Material_Property(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SIFEM_MATERIAL_PROPERTY, DefaultSifem_Material_Property.class);
    }

    /**
     * Gets an instance of type Sifem_Material_Property with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sifem_Material_Property getSifem_Material_Property(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SIFEM_MATERIAL_PROPERTY, DefaultSifem_Material_Property.class);
    }

    /**
     * Gets all instances of Sifem_Material_Property from the ontology.
     */
    public Collection<? extends Sifem_Material_Property> getAllSifem_Material_PropertyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SIFEM_MATERIAL_PROPERTY, DefaultSifem_Material_Property.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Solver
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Solver", Solver.class, DefaultSolver.class);
    }



    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#SpeedOfSound
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#SpeedOfSound", Speed_of_Sound.class, DefaultSpeed_of_Sound.class);
    }

    /**
     * Creates an instance of type Speed_of_Sound.  Modifies the underlying ontology.
     */
    public Speed_of_Sound createSpeed_of_Sound(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPEED_OF_SOUND, DefaultSpeed_of_Sound.class);
    }

    /**
     * Gets an instance of type Speed_of_Sound with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Speed_of_Sound getSpeed_of_Sound(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPEED_OF_SOUND, DefaultSpeed_of_Sound.class);
    }

    /**
     * Gets all instances of Speed_of_Sound from the ontology.
     */
    public Collection<? extends Speed_of_Sound> getAllSpeed_of_SoundInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPEED_OF_SOUND, DefaultSpeed_of_Sound.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Stress
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Stress", Stress.class, DefaultStress.class);
    }

    /**
     * Creates an instance of type Stress.  Modifies the underlying ontology.
     */
    public Stress createStress(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STRESS, DefaultStress.class);
    }

    /**
     * Gets an instance of type Stress with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Stress getStress(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STRESS, DefaultStress.class);
    }

    /**
     * Gets all instances of Stress from the ontology.
     */
    public Collection<? extends Stress> getAllStressInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STRESS, DefaultStress.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#SubDomain
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#SubDomain", Subdomain.class, DefaultSubdomain.class);
    }

    /**
     * Creates an instance of type Subdomain.  Modifies the underlying ontology.
     */
    public Subdomain createSubdomain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUBDOMAIN, DefaultSubdomain.class);
    }

    /**
     * Gets an instance of type Subdomain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Subdomain getSubdomain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUBDOMAIN, DefaultSubdomain.class);
    }

    /**
     * Gets all instances of Subdomain from the ontology.
     */
    public Collection<? extends Subdomain> getAllSubdomainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUBDOMAIN, DefaultSubdomain.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#SubDomainGroup
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#SubDomainGroup", Subdomain_group.class, DefaultSubdomain_group.class);
    }

    /**
     * Creates an instance of type Subdomain_group.  Modifies the underlying ontology.
     */
    public Subdomain_group createSubdomain_group(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUBDOMAIN_GROUP, DefaultSubdomain_group.class);
    }

    /**
     * Gets an instance of type Subdomain_group with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Subdomain_group getSubdomain_group(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUBDOMAIN_GROUP, DefaultSubdomain_group.class);
    }

    /**
     * Gets all instances of Subdomain_group from the ontology.
     */
    public Collection<? extends Subdomain_group> getAllSubdomain_groupInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUBDOMAIN_GROUP, DefaultSubdomain_group.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#TemperatureParameter
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#TemperatureParameter", Temperature.class, DefaultTemperature.class);
    }

    /**
     * Creates an instance of type Temperature.  Modifies the underlying ontology.
     */
    public Temperature createTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPERATURE, DefaultTemperature.class);
    }

    /**
     * Gets an instance of type Temperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Temperature getTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPERATURE, DefaultTemperature.class);
    }

    /**
     * Gets all instances of Temperature from the ontology.
     */
    public Collection<? extends Temperature> getAllTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPERATURE, DefaultTemperature.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Translation
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Translation", Translation.class, DefaultTranslation.class);
    }

    /**
     * Creates an instance of type Translation.  Modifies the underlying ontology.
     */
    public Translation createTranslation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRANSLATION, DefaultTranslation.class);
    }

    /**
     * Gets an instance of type Translation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Translation getTranslation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRANSLATION, DefaultTranslation.class);
    }

    /**
     * Gets all instances of Translation from the ontology.
     */
    public Collection<? extends Translation> getAllTranslationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRANSLATION, DefaultTranslation.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Velocity
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Velocity", Velocity.class, DefaultVelocity.class);
    }

    /**
     * Creates an instance of type Velocity.  Modifies the underlying ontology.
     */
    public Velocity createVelocity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VELOCITY, DefaultVelocity.class);
    }

    /**
     * Gets an instance of type Velocity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Velocity getVelocity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VELOCITY, DefaultVelocity.class);
    }

    /**
     * Gets all instances of Velocity from the ontology.
     */
    public Collection<? extends Velocity> getAllVelocityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VELOCITY, DefaultVelocity.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#VelocityDimension
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#VelocityDimension", Velocity_Dimension.class, DefaultVelocity_Dimension.class);
    }

    /**
     * Creates an instance of type Velocity_Dimension.  Modifies the underlying ontology.
     */
    public Velocity_Dimension createVelocity_Dimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VELOCITY_DIMENSION, DefaultVelocity_Dimension.class);
    }

    /**
     * Gets an instance of type Velocity_Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Velocity_Dimension getVelocity_Dimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VELOCITY_DIMENSION, DefaultVelocity_Dimension.class);
    }

    /**
     * Gets all instances of Velocity_Dimension from the ontology.
     */
    public Collection<? extends Velocity_Dimension> getAllVelocity_DimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VELOCITY_DIMENSION, DefaultVelocity_Dimension.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Wall
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#Wall", Wall.class, DefaultWall.class);
    }

    /**
     * Creates an instance of type Wall.  Modifies the underlying ontology.
     */
    public Wall createWall(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WALL, DefaultWall.class);
    }

    /**
     * Gets an instance of type Wall with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Wall getWall(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WALL, DefaultWall.class);
    }

    /**
     * Gets all instances of Wall from the ontology.
     */
    public Collection<? extends Wall> getAllWallInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WALL, DefaultWall.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#YoungsModulusDimension
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#YoungsModulusDimension", Youngs_Modulus_Dimension.class, DefaultYoungs_Modulus_Dimension.class);
    }

    /**
     * Creates an instance of type Youngs_Modulus_Dimension.  Modifies the underlying ontology.
     */
    public Youngs_Modulus_Dimension createYoungs_Modulus_Dimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_YOUNGS_MODULUS_DIMENSION, DefaultYoungs_Modulus_Dimension.class);
    }

    /**
     * Gets an instance of type Youngs_Modulus_Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Youngs_Modulus_Dimension getYoungs_Modulus_Dimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_YOUNGS_MODULUS_DIMENSION, DefaultYoungs_Modulus_Dimension.class);
    }

    /**
     * Gets all instances of Youngs_Modulus_Dimension from the ontology.
     */
    public Collection<? extends Youngs_Modulus_Dimension> getAllYoungs_Modulus_DimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_YOUNGS_MODULUS_DIMENSION, DefaultYoungs_Modulus_Dimension.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#DataAnalysis
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#DataAnalysis", DataAnalysis.class, DefaultDataAnalysis.class);
    }

    /**
     * Creates an instance of type DataAnalysis.  Modifies the underlying ontology.
     */
    public DataAnalysis createDataAnalysis(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATAANALYSIS, DefaultDataAnalysis.class);
    }

    /**
     * Gets an instance of type DataAnalysis with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataAnalysis getDataAnalysis(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATAANALYSIS, DefaultDataAnalysis.class);
    }

    /**
     * Gets all instances of DataAnalysis from the ontology.
     */
    public Collection<? extends DataAnalysis> getAllDataAnalysisInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATAANALYSIS, DefaultDataAnalysis.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#DataFile
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#DataFile", DataFile.class, DefaultDataFile.class);
    }

    /**
     * Creates an instance of type DataFile.  Modifies the underlying ontology.
     */
    public DataFile createDataFile(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATAFILE, DefaultDataFile.class);
    }

    /**
     * Gets an instance of type DataFile with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataFile getDataFile(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATAFILE, DefaultDataFile.class);
    }

    /**
     * Gets all instances of DataFile from the ontology.
     */
    public Collection<? extends DataFile> getAllDataFileInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATAFILE, DefaultDataFile.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#DataMapping
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#DataMapping", DataMapping.class, DefaultDataMapping.class);
    }

    /**
     * Creates an instance of type DataMapping.  Modifies the underlying ontology.
     */
    public DataMapping createDataMapping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATAMAPPING, DefaultDataMapping.class);
    }

    /**
     * Gets an instance of type DataMapping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataMapping getDataMapping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATAMAPPING, DefaultDataMapping.class);
    }

    /**
     * Gets all instances of DataMapping from the ontology.
     */
    public Collection<? extends DataMapping> getAllDataMappingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATAMAPPING, DefaultDataMapping.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#DataTransformation
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#DataTransformation", DataTransformation.class, DefaultDataTransformation.class);
    }

    /**
     * Creates an instance of type DataTransformation.  Modifies the underlying ontology.
     */
    public DataTransformation createDataTransformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATATRANSFORMATION, DefaultDataTransformation.class);
    }

    /**
     * Gets an instance of type DataTransformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataTransformation getDataTransformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATATRANSFORMATION, DefaultDataTransformation.class);
    }

    /**
     * Gets all instances of DataTransformation from the ontology.
     */
    public Collection<? extends DataTransformation> getAllDataTransformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATATRANSFORMATION, DefaultDataTransformation.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#DataViewDefinition
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#DataViewDefinition", DataViewDefinition.class, DefaultDataViewDefinition.class);
    }

    /**
     * Creates an instance of type DataViewDefinition.  Modifies the underlying ontology.
     */
    public DataViewDefinition createDataViewDefinition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATAVIEWDEFINITION, DefaultDataViewDefinition.class);
    }

    /**
     * Gets an instance of type DataViewDefinition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataViewDefinition getDataViewDefinition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATAVIEWDEFINITION, DefaultDataViewDefinition.class);
    }

    /**
     * Gets all instances of DataViewDefinition from the ontology.
     */
    public Collection<? extends DataViewDefinition> getAllDataViewDefinitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATAVIEWDEFINITION, DefaultDataViewDefinition.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#Derivation
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#Derivation", Derivation.class, DefaultDerivation.class);
    }



    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#Experimenter
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#Experimenter", Experimenter.class, DefaultExperimenter.class);
    }

    /**
     * Creates an instance of type Experimenter.  Modifies the underlying ontology.
     */
    public Experimenter createExperimenter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXPERIMENTER, DefaultExperimenter.class);
    }

    /**
     * Gets an instance of type Experimenter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Experimenter getExperimenter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXPERIMENTER, DefaultExperimenter.class);
    }

    /**
     * Gets all instances of Experimenter from the ontology.
     */
    public Collection<? extends Experimenter> getAllExperimenterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXPERIMENTER, DefaultExperimenter.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#FeatureExtraction
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#FeatureExtraction", FeatureExtraction.class, DefaultFeatureExtraction.class);
    }

    /**
     * Creates an instance of type FeatureExtraction.  Modifies the underlying ontology.
     */
    public FeatureExtraction createFeatureExtraction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FEATUREEXTRACTION, DefaultFeatureExtraction.class);
    }

    /**
     * Gets an instance of type FeatureExtraction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FeatureExtraction getFeatureExtraction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FEATUREEXTRACTION, DefaultFeatureExtraction.class);
    }

    /**
     * Gets all instances of FeatureExtraction from the ontology.
     */
    public Collection<? extends FeatureExtraction> getAllFeatureExtractionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FEATUREEXTRACTION, DefaultFeatureExtraction.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#GraphFile
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#GraphFile", GraphFile.class, DefaultGraphFile.class);
    }

    /**
     * Creates an instance of type GraphFile.  Modifies the underlying ontology.
     */
    public GraphFile createGraphFile(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GRAPHFILE, DefaultGraphFile.class);
    }

    /**
     * Gets an instance of type GraphFile with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GraphFile getGraphFile(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GRAPHFILE, DefaultGraphFile.class);
    }

    /**
     * Gets all instances of GraphFile from the ontology.
     */
    public Collection<? extends GraphFile> getAllGraphFileInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GRAPHFILE, DefaultGraphFile.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#InputDataFile
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#InputDataFile", InputDataFile.class, DefaultInputDataFile.class);
    }

    /**
     * Creates an instance of type InputDataFile.  Modifies the underlying ontology.
     */
    public InputDataFile createInputDataFile(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INPUTDATAFILE, DefaultInputDataFile.class);
    }

    /**
     * Gets an instance of type InputDataFile with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public InputDataFile getInputDataFile(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INPUTDATAFILE, DefaultInputDataFile.class);
    }

    /**
     * Gets all instances of InputDataFile from the ontology.
     */
    public Collection<? extends InputDataFile> getAllInputDataFileInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INPUTDATAFILE, DefaultInputDataFile.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#MatrixEntity
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#MatrixEntity", MatrixEntity.class, DefaultMatrixEntity.class);
    }

    /**
     * Creates an instance of type MatrixEntity.  Modifies the underlying ontology.
     */
    public MatrixEntity createMatrixEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATRIXENTITY, DefaultMatrixEntity.class);
    }

    /**
     * Gets an instance of type MatrixEntity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MatrixEntity getMatrixEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATRIXENTITY, DefaultMatrixEntity.class);
    }

    /**
     * Gets all instances of MatrixEntity from the ontology.
     */
    public Collection<? extends MatrixEntity> getAllMatrixEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATRIXENTITY, DefaultMatrixEntity.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#MatrixValue
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#MatrixValue", MatrixValue.class, DefaultMatrixValue.class);
    }

    /**
     * Creates an instance of type MatrixValue.  Modifies the underlying ontology.
     */
    public MatrixValue createMatrixValue(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATRIXVALUE, DefaultMatrixValue.class);
    }

    /**
     * Gets an instance of type MatrixValue with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MatrixValue getMatrixValue(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATRIXVALUE, DefaultMatrixValue.class);
    }

    /**
     * Gets all instances of MatrixValue from the ontology.
     */
    public Collection<? extends MatrixValue> getAllMatrixValueInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATRIXVALUE, DefaultMatrixValue.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#Method
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#Method", Method.class, DefaultMethod.class);
    }

    /**
     * Creates an instance of type Method.  Modifies the underlying ontology.
     */
    public Method createMethod(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_METHOD, DefaultMethod.class);
    }

    /**
     * Gets an instance of type Method with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Method getMethod(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_METHOD, DefaultMethod.class);
    }

    /**
     * Gets all instances of Method from the ontology.
     */
    public Collection<? extends Method> getAllMethodInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_METHOD, DefaultMethod.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#OutputDataFile
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#OutputDataFile", OutputDataFile.class, DefaultOutputDataFile.class);
    }

    /**
     * Creates an instance of type OutputDataFile.  Modifies the underlying ontology.
     */
    public OutputDataFile createOutputDataFile(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OUTPUTDATAFILE, DefaultOutputDataFile.class);
    }

    /**
     * Gets an instance of type OutputDataFile with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OutputDataFile getOutputDataFile(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OUTPUTDATAFILE, DefaultOutputDataFile.class);
    }

    /**
     * Gets all instances of OutputDataFile from the ontology.
     */
    public Collection<? extends OutputDataFile> getAllOutputDataFileInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OUTPUTDATAFILE, DefaultOutputDataFile.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#Report
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#Report", Report.class, DefaultReport.class);
    }

    /**
     * Creates an instance of type Report.  Modifies the underlying ontology.
     */
    public Report createReport(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REPORT, DefaultReport.class);
    }

    /**
     * Gets an instance of type Report with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Report getReport(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REPORT, DefaultReport.class);
    }

    /**
     * Gets all instances of Report from the ontology.
     */
    public Collection<? extends Report> getAllReportInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REPORT, DefaultReport.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#ScalarEntity
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#ScalarEntity", ScalarEntity.class, DefaultScalarEntity.class);
    }

    /**
     * Creates an instance of type ScalarEntity.  Modifies the underlying ontology.
     */
    public ScalarEntity createScalarEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCALARENTITY, DefaultScalarEntity.class);
    }

    /**
     * Gets an instance of type ScalarEntity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScalarEntity getScalarEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCALARENTITY, DefaultScalarEntity.class);
    }

    /**
     * Gets all instances of ScalarEntity from the ontology.
     */
    public Collection<? extends ScalarEntity> getAllScalarEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCALARENTITY, DefaultScalarEntity.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#ScalarValue
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#ScalarValue", ScalarValue.class, DefaultScalarValue.class);
    }

    /**
     * Creates an instance of type ScalarValue.  Modifies the underlying ontology.
     */
    public ScalarValue createScalarValue(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCALARVALUE, DefaultScalarValue.class);
    }

    /**
     * Gets an instance of type ScalarValue with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScalarValue getScalarValue(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCALARVALUE, DefaultScalarValue.class);
    }

    /**
     * Gets all instances of ScalarValue from the ontology.
     */
    public Collection<? extends ScalarValue> getAllScalarValueInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCALARVALUE, DefaultScalarValue.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#Simulation
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#Simulation", Simulation.class, DefaultSimulation.class);
    }

    /**
     * Creates an instance of type Simulation.  Modifies the underlying ontology.
     */
    public Simulation createSimulation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SIMULATION, DefaultSimulation.class);
    }

    /**
     * Gets an instance of type Simulation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Simulation getSimulation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SIMULATION, DefaultSimulation.class);
    }

    /**
     * Gets all instances of Simulation from the ontology.
     */
    public Collection<? extends Simulation> getAllSimulationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SIMULATION, DefaultSimulation.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#SimulationComponent
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#SimulationComponent", SimulationComponent.class, DefaultSimulationComponent.class);
    }

    /**
     * Creates an instance of type SimulationComponent.  Modifies the underlying ontology.
     */
    public SimulationComponent createSimulationComponent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SIMULATIONCOMPONENT, DefaultSimulationComponent.class);
    }

    /**
     * Gets an instance of type SimulationComponent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SimulationComponent getSimulationComponent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SIMULATIONCOMPONENT, DefaultSimulationComponent.class);
    }

    /**
     * Gets all instances of SimulationComponent from the ontology.
     */
    public Collection<? extends SimulationComponent> getAllSimulationComponentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SIMULATIONCOMPONENT, DefaultSimulationComponent.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#Solver
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#Solver", Solver.class, DefaultSolver.class);
    }

    /**
     * Creates an instance of type Solver.  Modifies the underlying ontology.
     */
    public Solver createSolver(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOLVER, DefaultSolver.class);
    }

    /**
     * Gets an instance of type Solver with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Solver getSolver(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOLVER, DefaultSolver.class);
    }

    /**
     * Gets all instances of Solver from the ontology.
     */
    public Collection<? extends Solver> getAllSolverInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOLVER, DefaultSolver.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#Value
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#Value", Value.class, DefaultValue.class);
    }

    /**
     * Creates an instance of type Value.  Modifies the underlying ontology.
     */
    public Value createValue(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VALUE, DefaultValue.class);
    }

    /**
     * Gets an instance of type Value with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Value getValue(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VALUE, DefaultValue.class);
    }

    /**
     * Gets all instances of Value from the ontology.
     */
    public Collection<? extends Value> getAllValueInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VALUE, DefaultValue.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#VectorEntity
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#VectorEntity", VectorEntity.class, DefaultVectorEntity.class);
    }

    /**
     * Creates an instance of type VectorEntity.  Modifies the underlying ontology.
     */
    public VectorEntity createVectorEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VECTORENTITY, DefaultVectorEntity.class);
    }

    /**
     * Gets an instance of type VectorEntity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VectorEntity getVectorEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VECTORENTITY, DefaultVectorEntity.class);
    }

    /**
     * Gets all instances of VectorEntity from the ontology.
     */
    public Collection<? extends VectorEntity> getAllVectorEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VECTORENTITY, DefaultVectorEntity.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#VectorFieldGraphFile
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#VectorFieldGraphFile", VectorFieldGraphFile.class, DefaultVectorFieldGraphFile.class);
    }

    /**
     * Creates an instance of type VectorFieldGraphFile.  Modifies the underlying ontology.
     */
    public VectorFieldGraphFile createVectorFieldGraphFile(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VECTORFIELDGRAPHFILE, DefaultVectorFieldGraphFile.class);
    }

    /**
     * Gets an instance of type VectorFieldGraphFile with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VectorFieldGraphFile getVectorFieldGraphFile(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VECTORFIELDGRAPHFILE, DefaultVectorFieldGraphFile.class);
    }

    /**
     * Gets all instances of VectorFieldGraphFile from the ontology.
     */
    public Collection<? extends VectorFieldGraphFile> getAllVectorFieldGraphFileInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VECTORFIELDGRAPHFILE, DefaultVectorFieldGraphFile.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#VectorValue
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#VectorValue", VectorValue.class, DefaultVectorValue.class);
    }

    /**
     * Creates an instance of type VectorValue.  Modifies the underlying ontology.
     */
    public VectorValue createVectorValue(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VECTORVALUE, DefaultVectorValue.class);
    }

    /**
     * Gets an instance of type VectorValue with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VectorValue getVectorValue(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VECTORVALUE, DefaultVectorValue.class);
    }

    /**
     * Gets all instances of VectorValue from the ontology.
     */
    public Collection<? extends VectorValue> getAllVectorValueInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VECTORVALUE, DefaultVectorValue.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#Visualisation
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#Visualisation", Visualisation.class, DefaultVisualisation.class);
    }

    /**
     * Creates an instance of type Visualisation.  Modifies the underlying ontology.
     */
    public Visualisation createVisualisation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VISUALISATION, DefaultVisualisation.class);
    }

    /**
     * Gets an instance of type Visualisation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Visualisation getVisualisation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VISUALISATION, DefaultVisualisation.class);
    }

    /**
     * Gets all instances of Visualisation from the ontology.
     */
    public Collection<? extends Visualisation> getAllVisualisationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VISUALISATION, DefaultVisualisation.class);
    }


    /* ***************************************************
     * Class http://www.sifemontologies.com/ontologies/Simulation.owl#2DLineGraphFile
     */

    {
        javaMapping.add("http://www.sifemontologies.com/ontologies/Simulation.owl#2DLineGraphFile", DLineGraphFile.class, DefaultDLineGraphFile.class);
    }

    /**
     * Creates an instance of type DLineGraphFile.  Modifies the underlying ontology.
     */
    public DLineGraphFile createDLineGraphFile(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DLINEGRAPHFILE, DefaultDLineGraphFile.class);
    }

    /**
     * Gets an instance of type DLineGraphFile with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DLineGraphFile getDLineGraphFile(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DLINEGRAPHFILE, DefaultDLineGraphFile.class);
    }

    /**
     * Gets all instances of DLineGraphFile from the ontology.
     */
    public Collection<? extends DLineGraphFile> getAllDLineGraphFileInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DLINEGRAPHFILE, DefaultDLineGraphFile.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Activity
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Activity", Activity.class, DefaultActivity.class);
    }

    /**
     * Creates an instance of type Activity.  Modifies the underlying ontology.
     */
    public Activity createActivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }

    /**
     * Gets an instance of type Activity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Activity getActivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }

    /**
     * Gets all instances of Activity from the ontology.
     */
    public Collection<? extends Activity> getAllActivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#ActivityInfluence
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#ActivityInfluence", ActivityInfluence.class, DefaultActivityInfluence.class);
    }

    /**
     * Creates an instance of type ActivityInfluence.  Modifies the underlying ontology.
     */
    public ActivityInfluence createActivityInfluence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTIVITYINFLUENCE, DefaultActivityInfluence.class);
    }

    /**
     * Gets an instance of type ActivityInfluence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ActivityInfluence getActivityInfluence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTIVITYINFLUENCE, DefaultActivityInfluence.class);
    }

    /**
     * Gets all instances of ActivityInfluence from the ontology.
     */
    public Collection<? extends ActivityInfluence> getAllActivityInfluenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTIVITYINFLUENCE, DefaultActivityInfluence.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Agent
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Agent", Agent.class, DefaultAgent.class);
    }

    /**
     * Creates an instance of type Agent.  Modifies the underlying ontology.
     */
    public Agent createAgent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AGENT, DefaultAgent.class);
    }

    /**
     * Gets an instance of type Agent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Agent getAgent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AGENT, DefaultAgent.class);
    }

    /**
     * Gets all instances of Agent from the ontology.
     */
    public Collection<? extends Agent> getAllAgentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AGENT, DefaultAgent.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#AgentInfluence
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#AgentInfluence", AgentInfluence.class, DefaultAgentInfluence.class);
    }

    /**
     * Creates an instance of type AgentInfluence.  Modifies the underlying ontology.
     */
    public AgentInfluence createAgentInfluence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AGENTINFLUENCE, DefaultAgentInfluence.class);
    }

    /**
     * Gets an instance of type AgentInfluence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AgentInfluence getAgentInfluence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AGENTINFLUENCE, DefaultAgentInfluence.class);
    }

    /**
     * Gets all instances of AgentInfluence from the ontology.
     */
    public Collection<? extends AgentInfluence> getAllAgentInfluenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AGENTINFLUENCE, DefaultAgentInfluence.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Association
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Association", Association.class, DefaultAssociation.class);
    }

    /**
     * Creates an instance of type Association.  Modifies the underlying ontology.
     */
    public Association createAssociation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ASSOCIATION, DefaultAssociation.class);
    }

    /**
     * Gets an instance of type Association with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Association getAssociation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ASSOCIATION, DefaultAssociation.class);
    }

    /**
     * Gets all instances of Association from the ontology.
     */
    public Collection<? extends Association> getAllAssociationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ASSOCIATION, DefaultAssociation.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Attribution
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Attribution", Attribution.class, DefaultAttribution.class);
    }

    /**
     * Creates an instance of type Attribution.  Modifies the underlying ontology.
     */
    public Attribution createAttribution(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATTRIBUTION, DefaultAttribution.class);
    }

    /**
     * Gets an instance of type Attribution with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Attribution getAttribution(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATTRIBUTION, DefaultAttribution.class);
    }

    /**
     * Gets all instances of Attribution from the ontology.
     */
    public Collection<? extends Attribution> getAllAttributionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATTRIBUTION, DefaultAttribution.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Bundle
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Bundle", Bundle.class, DefaultBundle.class);
    }

    /**
     * Creates an instance of type Bundle.  Modifies the underlying ontology.
     */
    public Bundle createBundle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUNDLE, DefaultBundle.class);
    }

    /**
     * Gets an instance of type Bundle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bundle getBundle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUNDLE, DefaultBundle.class);
    }

    /**
     * Gets all instances of Bundle from the ontology.
     */
    public Collection<? extends Bundle> getAllBundleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUNDLE, DefaultBundle.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Collection
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Collection", Collection.class, DefaultCollection.class);
    }

    /**
     * Creates an instance of type Collection.  Modifies the underlying ontology.
     */
    public Collection createCollection(String name) {
		return (Collection) delegate.createWrappedIndividual(name, Vocabulary.CLASS_COLLECTION, DefaultCollection.class);
    }

    /**
     * Gets an instance of type Collection with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Collection getCollection(String name) {
		return (Collection) delegate.getWrappedIndividual(name, Vocabulary.CLASS_COLLECTION, DefaultCollection.class);
    }

    /**
     * Gets all instances of Collection from the ontology.
     */
    public Collection<? extends Collection> getAllCollectionInstances() {
		return (Collection<? extends Collection>) (Collection<?>) delegate.getWrappedIndividuals(Vocabulary.CLASS_COLLECTION, DefaultCollection.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Communication
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Communication", Communication.class, DefaultCommunication.class);
    }

    /**
     * Creates an instance of type Communication.  Modifies the underlying ontology.
     */
    public Communication createCommunication(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMUNICATION, DefaultCommunication.class);
    }

    /**
     * Gets an instance of type Communication with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Communication getCommunication(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMUNICATION, DefaultCommunication.class);
    }

    /**
     * Gets all instances of Communication from the ontology.
     */
    public Collection<? extends Communication> getAllCommunicationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMUNICATION, DefaultCommunication.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Delegation
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Delegation", Delegation.class, DefaultDelegation.class);
    }

    /**
     * Creates an instance of type Delegation.  Modifies the underlying ontology.
     */
    public Delegation createDelegation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DELEGATION, DefaultDelegation.class);
    }

    /**
     * Gets an instance of type Delegation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Delegation getDelegation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DELEGATION, DefaultDelegation.class);
    }

    /**
     * Gets all instances of Delegation from the ontology.
     */
    public Collection<? extends Delegation> getAllDelegationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DELEGATION, DefaultDelegation.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Derivation
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Derivation", Derivation.class, DefaultDerivation.class);
    }

    /**
     * Creates an instance of type Derivation.  Modifies the underlying ontology.
     */
    public Derivation createDerivation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DERIVATION, DefaultDerivation.class);
    }

    /**
     * Gets an instance of type Derivation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Derivation getDerivation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DERIVATION, DefaultDerivation.class);
    }

    /**
     * Gets all instances of Derivation from the ontology.
     */
    public Collection<? extends Derivation> getAllDerivationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DERIVATION, DefaultDerivation.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#EmptyCollection
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#EmptyCollection", EmptyCollection.class, DefaultEmptyCollection.class);
    }

    /**
     * Creates an instance of type EmptyCollection.  Modifies the underlying ontology.
     */
    public EmptyCollection createEmptyCollection(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EMPTYCOLLECTION, DefaultEmptyCollection.class);
    }

    /**
     * Gets an instance of type EmptyCollection with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EmptyCollection getEmptyCollection(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EMPTYCOLLECTION, DefaultEmptyCollection.class);
    }

    /**
     * Gets all instances of EmptyCollection from the ontology.
     */
    public Collection<? extends EmptyCollection> getAllEmptyCollectionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EMPTYCOLLECTION, DefaultEmptyCollection.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#End
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#End", End.class, DefaultEnd.class);
    }

    /**
     * Creates an instance of type End.  Modifies the underlying ontology.
     */
    public End createEnd(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_END, DefaultEnd.class);
    }

    /**
     * Gets an instance of type End with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public End getEnd(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_END, DefaultEnd.class);
    }

    /**
     * Gets all instances of End from the ontology.
     */
    public Collection<? extends End> getAllEndInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_END, DefaultEnd.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Entity
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Entity", Entity.class, DefaultEntity.class);
    }

    /**
     * Creates an instance of type Entity.  Modifies the underlying ontology.
     */
    public Entity createEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }

    /**
     * Gets an instance of type Entity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Entity getEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }

    /**
     * Gets all instances of Entity from the ontology.
     */
    public Collection<? extends Entity> getAllEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#EntityInfluence
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#EntityInfluence", EntityInfluence.class, DefaultEntityInfluence.class);
    }

    /**
     * Creates an instance of type EntityInfluence.  Modifies the underlying ontology.
     */
    public EntityInfluence createEntityInfluence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENTITYINFLUENCE, DefaultEntityInfluence.class);
    }

    /**
     * Gets an instance of type EntityInfluence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EntityInfluence getEntityInfluence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENTITYINFLUENCE, DefaultEntityInfluence.class);
    }

    /**
     * Gets all instances of EntityInfluence from the ontology.
     */
    public Collection<? extends EntityInfluence> getAllEntityInfluenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENTITYINFLUENCE, DefaultEntityInfluence.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Generation
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Generation", Generation.class, DefaultGeneration.class);
    }

    /**
     * Creates an instance of type Generation.  Modifies the underlying ontology.
     */
    public Generation createGeneration(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GENERATION, DefaultGeneration.class);
    }

    /**
     * Gets an instance of type Generation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Generation getGeneration(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GENERATION, DefaultGeneration.class);
    }

    /**
     * Gets all instances of Generation from the ontology.
     */
    public Collection<? extends Generation> getAllGenerationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GENERATION, DefaultGeneration.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Influence
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Influence", Influence.class, DefaultInfluence.class);
    }

    /**
     * Creates an instance of type Influence.  Modifies the underlying ontology.
     */
    public Influence createInfluence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INFLUENCE, DefaultInfluence.class);
    }

    /**
     * Gets an instance of type Influence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Influence getInfluence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INFLUENCE, DefaultInfluence.class);
    }

    /**
     * Gets all instances of Influence from the ontology.
     */
    public Collection<? extends Influence> getAllInfluenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INFLUENCE, DefaultInfluence.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#InstantaneousEvent
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#InstantaneousEvent", InstantaneousEvent.class, DefaultInstantaneousEvent.class);
    }

    /**
     * Creates an instance of type InstantaneousEvent.  Modifies the underlying ontology.
     */
    public InstantaneousEvent createInstantaneousEvent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INSTANTANEOUSEVENT, DefaultInstantaneousEvent.class);
    }

    /**
     * Gets an instance of type InstantaneousEvent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public InstantaneousEvent getInstantaneousEvent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INSTANTANEOUSEVENT, DefaultInstantaneousEvent.class);
    }

    /**
     * Gets all instances of InstantaneousEvent from the ontology.
     */
    public Collection<? extends InstantaneousEvent> getAllInstantaneousEventInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INSTANTANEOUSEVENT, DefaultInstantaneousEvent.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Invalidation
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Invalidation", Invalidation.class, DefaultInvalidation.class);
    }

    /**
     * Creates an instance of type Invalidation.  Modifies the underlying ontology.
     */
    public Invalidation createInvalidation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INVALIDATION, DefaultInvalidation.class);
    }

    /**
     * Gets an instance of type Invalidation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Invalidation getInvalidation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INVALIDATION, DefaultInvalidation.class);
    }

    /**
     * Gets all instances of Invalidation from the ontology.
     */
    public Collection<? extends Invalidation> getAllInvalidationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INVALIDATION, DefaultInvalidation.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Location
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Location", Location.class, DefaultLocation.class);
    }

    /**
     * Creates an instance of type Location.  Modifies the underlying ontology.
     */
    public Location createLocation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOCATION, DefaultLocation.class);
    }

    /**
     * Gets an instance of type Location with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Location getLocation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOCATION, DefaultLocation.class);
    }

    /**
     * Gets all instances of Location from the ontology.
     */
    public Collection<? extends Location> getAllLocationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOCATION, DefaultLocation.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Organization
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Organization", Organization.class, DefaultOrganization.class);
    }

    /**
     * Creates an instance of type Organization.  Modifies the underlying ontology.
     */
    public Organization createOrganization(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ORGANIZATION, DefaultOrganization.class);
    }

    /**
     * Gets an instance of type Organization with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Organization getOrganization(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ORGANIZATION, DefaultOrganization.class);
    }

    /**
     * Gets all instances of Organization from the ontology.
     */
    public Collection<? extends Organization> getAllOrganizationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ORGANIZATION, DefaultOrganization.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Person
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Person", Person.class, DefaultPerson.class);
    }

    /**
     * Creates an instance of type Person.  Modifies the underlying ontology.
     */
    public Person createPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets an instance of type Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Person getPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets all instances of Person from the ontology.
     */
    public Collection<? extends Person> getAllPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Plan
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Plan", Plan.class, DefaultPlan.class);
    }

    /**
     * Creates an instance of type Plan.  Modifies the underlying ontology.
     */
    public Plan createPlan(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLAN, DefaultPlan.class);
    }

    /**
     * Gets an instance of type Plan with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Plan getPlan(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLAN, DefaultPlan.class);
    }

    /**
     * Gets all instances of Plan from the ontology.
     */
    public Collection<? extends Plan> getAllPlanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLAN, DefaultPlan.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#PrimarySource
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#PrimarySource", PrimarySource.class, DefaultPrimarySource.class);
    }

    /**
     * Creates an instance of type PrimarySource.  Modifies the underlying ontology.
     */
    public PrimarySource createPrimarySource(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRIMARYSOURCE, DefaultPrimarySource.class);
    }

    /**
     * Gets an instance of type PrimarySource with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PrimarySource getPrimarySource(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRIMARYSOURCE, DefaultPrimarySource.class);
    }

    /**
     * Gets all instances of PrimarySource from the ontology.
     */
    public Collection<? extends PrimarySource> getAllPrimarySourceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRIMARYSOURCE, DefaultPrimarySource.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Quotation
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Quotation", Quotation.class, DefaultQuotation.class);
    }

    /**
     * Creates an instance of type Quotation.  Modifies the underlying ontology.
     */
    public Quotation createQuotation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QUOTATION, DefaultQuotation.class);
    }

    /**
     * Gets an instance of type Quotation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Quotation getQuotation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QUOTATION, DefaultQuotation.class);
    }

    /**
     * Gets all instances of Quotation from the ontology.
     */
    public Collection<? extends Quotation> getAllQuotationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QUOTATION, DefaultQuotation.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Revision
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Revision", Revision.class, DefaultRevision.class);
    }

    /**
     * Creates an instance of type Revision.  Modifies the underlying ontology.
     */
    public Revision createRevision(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REVISION, DefaultRevision.class);
    }

    /**
     * Gets an instance of type Revision with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Revision getRevision(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REVISION, DefaultRevision.class);
    }

    /**
     * Gets all instances of Revision from the ontology.
     */
    public Collection<? extends Revision> getAllRevisionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REVISION, DefaultRevision.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Role
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Role", Role.class, DefaultRole.class);
    }

    /**
     * Creates an instance of type Role.  Modifies the underlying ontology.
     */
    public Role createRole(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROLE, DefaultRole.class);
    }

    /**
     * Gets an instance of type Role with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Role getRole(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROLE, DefaultRole.class);
    }

    /**
     * Gets all instances of Role from the ontology.
     */
    public Collection<? extends Role> getAllRoleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROLE, DefaultRole.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#SoftwareAgent
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#SoftwareAgent", SoftwareAgent.class, DefaultSoftwareAgent.class);
    }

    /**
     * Creates an instance of type SoftwareAgent.  Modifies the underlying ontology.
     */
    public SoftwareAgent createSoftwareAgent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOFTWAREAGENT, DefaultSoftwareAgent.class);
    }

    /**
     * Gets an instance of type SoftwareAgent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SoftwareAgent getSoftwareAgent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOFTWAREAGENT, DefaultSoftwareAgent.class);
    }

    /**
     * Gets all instances of SoftwareAgent from the ontology.
     */
    public Collection<? extends SoftwareAgent> getAllSoftwareAgentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOFTWAREAGENT, DefaultSoftwareAgent.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Start
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Start", Start.class, DefaultStart.class);
    }

    /**
     * Creates an instance of type Start.  Modifies the underlying ontology.
     */
    public Start createStart(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_START, DefaultStart.class);
    }

    /**
     * Gets an instance of type Start with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Start getStart(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_START, DefaultStart.class);
    }

    /**
     * Gets all instances of Start from the ontology.
     */
    public Collection<? extends Start> getAllStartInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_START, DefaultStart.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/ns/prov#Usage
     */

    {
        javaMapping.add("http://www.w3.org/ns/prov#Usage", Usage.class, DefaultUsage.class);
    }

    /**
     * Creates an instance of type Usage.  Modifies the underlying ontology.
     */
    public Usage createUsage(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USAGE, DefaultUsage.class);
    }

    /**
     * Gets an instance of type Usage with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Usage getUsage(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USAGE, DefaultUsage.class);
    }

    /**
     * Gets all instances of Usage from the ontology.
     */
    public Collection<? extends Usage> getAllUsageInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USAGE, DefaultUsage.class);
    }


}
