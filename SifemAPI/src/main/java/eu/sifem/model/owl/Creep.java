package eu.sifem.model.owl;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Creep <br>
 * @version generated on Mon May 11 16:25:18 BST 2015 by jbjares
 */

public interface Creep extends Mechanical {

    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#CreepTime
     */
     
    /**
     * Gets all property values for the CreepTime property.<p>
     * 
     * @returns a collection of values for the CreepTime property.
     */
    Collection<? extends Time> getCreepTime();

    /**
     * Checks if the class has a CreepTime property value.<p>
     * 
     * @return true if there is a CreepTime property value.
     */
    boolean hasCreepTime();

    /**
     * Adds a CreepTime property value.<p>
     * 
     * @param newCreepTime the CreepTime property value to be added
     */
    void addCreepTime(Time newCreepTime);

    /**
     * Removes a CreepTime property value.<p>
     * 
     * @param oldCreepTime the CreepTime property value to be removed.
     */
    void removeCreepTime(Time oldCreepTime);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#TestTemperature
     */
     
    /**
     * Gets all property values for the TestTemperature property.<p>
     * 
     * @returns a collection of values for the TestTemperature property.
     */
    Collection<? extends Temperature> getTestTemperature();

    /**
     * Checks if the class has a TestTemperature property value.<p>
     * 
     * @return true if there is a TestTemperature property value.
     */
    boolean hasTestTemperature();

    /**
     * Adds a TestTemperature property value.<p>
     * 
     * @param newTestTemperature the TestTemperature property value to be added
     */
    void addTestTemperature(Temperature newTestTemperature);

    /**
     * Removes a TestTemperature property value.<p>
     * 
     * @param oldTestTemperature the TestTemperature property value to be removed.
     */
    void removeTestTemperature(Temperature oldTestTemperature);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#TimeToReachTotalStrain0.5
     */
     
    /**
     * Gets all property values for the TimeToReachTotalStrain0.5 property.<p>
     * 
     * @returns a collection of values for the TimeToReachTotalStrain0.5 property.
     */
    Collection<? extends Time> getTimeToReachTotalStrain0_5();

    /**
     * Checks if the class has a TimeToReachTotalStrain0.5 property value.<p>
     * 
     * @return true if there is a TimeToReachTotalStrain0.5 property value.
     */
    boolean hasTimeToReachTotalStrain0_5();

    /**
     * Adds a TimeToReachTotalStrain0.5 property value.<p>
     * 
     * @param newTimeToReachTotalStrain0.5 the TimeToReachTotalStrain0.5 property value to be added
     */
    void addTimeToReachTotalStrain0_5(Time newTimeToReachTotalStrain0_5);

    /**
     * Removes a TimeToReachTotalStrain0.5 property value.<p>
     * 
     * @param oldTimeToReachTotalStrain0.5 the TimeToReachTotalStrain0.5 property value to be removed.
     */
    void removeTimeToReachTotalStrain0_5(Time oldTimeToReachTotalStrain0_5);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#TimeToReachTotalStrain1.0
     */
     
    /**
     * Gets all property values for the TimeToReachTotalStrain1.0 property.<p>
     * 
     * @returns a collection of values for the TimeToReachTotalStrain1.0 property.
     */
    Collection<? extends Time> getTimeToReachTotalStrain1_0();

    /**
     * Checks if the class has a TimeToReachTotalStrain1.0 property value.<p>
     * 
     * @return true if there is a TimeToReachTotalStrain1.0 property value.
     */
    boolean hasTimeToReachTotalStrain1_0();

    /**
     * Adds a TimeToReachTotalStrain1.0 property value.<p>
     * 
     * @param newTimeToReachTotalStrain1.0 the TimeToReachTotalStrain1.0 property value to be added
     */
    void addTimeToReachTotalStrain1_0(Time newTimeToReachTotalStrain1_0);

    /**
     * Removes a TimeToReachTotalStrain1.0 property value.<p>
     * 
     * @param oldTimeToReachTotalStrain1.0 the TimeToReachTotalStrain1.0 property value to be removed.
     */
    void removeTimeToReachTotalStrain1_0(Time oldTimeToReachTotalStrain1_0);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#TimeToReachTotalStrain2.0
     */
     
    /**
     * Gets all property values for the TimeToReachTotalStrain2.0 property.<p>
     * 
     * @returns a collection of values for the TimeToReachTotalStrain2.0 property.
     */
    Collection<? extends Time> getTimeToReachTotalStrain2_0();

    /**
     * Checks if the class has a TimeToReachTotalStrain2.0 property value.<p>
     * 
     * @return true if there is a TimeToReachTotalStrain2.0 property value.
     */
    boolean hasTimeToReachTotalStrain2_0();

    /**
     * Adds a TimeToReachTotalStrain2.0 property value.<p>
     * 
     * @param newTimeToReachTotalStrain2.0 the TimeToReachTotalStrain2.0 property value to be added
     */
    void addTimeToReachTotalStrain2_0(Time newTimeToReachTotalStrain2_0);

    /**
     * Removes a TimeToReachTotalStrain2.0 property value.<p>
     * 
     * @param oldTimeToReachTotalStrain2.0 the TimeToReachTotalStrain2.0 property value to be removed.
     */
    void removeTimeToReachTotalStrain2_0(Time oldTimeToReachTotalStrain2_0);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#TimeToReachTotalStrain5.0
     */
     
    /**
     * Gets all property values for the TimeToReachTotalStrain5.0 property.<p>
     * 
     * @returns a collection of values for the TimeToReachTotalStrain5.0 property.
     */
    Collection<? extends Time> getTimeToReachTotalStrain5_0();

    /**
     * Checks if the class has a TimeToReachTotalStrain5.0 property value.<p>
     * 
     * @return true if there is a TimeToReachTotalStrain5.0 property value.
     */
    boolean hasTimeToReachTotalStrain5_0();

    /**
     * Adds a TimeToReachTotalStrain5.0 property value.<p>
     * 
     * @param newTimeToReachTotalStrain5.0 the TimeToReachTotalStrain5.0 property value to be added
     */
    void addTimeToReachTotalStrain5_0(Time newTimeToReachTotalStrain5_0);

    /**
     * Removes a TimeToReachTotalStrain5.0 property value.<p>
     * 
     * @param oldTimeToReachTotalStrain5.0 the TimeToReachTotalStrain5.0 property value to be removed.
     */
    void removeTimeToReachTotalStrain5_0(Time oldTimeToReachTotalStrain5_0);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#TimeToRupture
     */
     
    /**
     * Gets all property values for the TimeToRupture property.<p>
     * 
     * @returns a collection of values for the TimeToRupture property.
     */
    Collection<? extends Time> getTimeToRupture();

    /**
     * Checks if the class has a TimeToRupture property value.<p>
     * 
     * @return true if there is a TimeToRupture property value.
     */
    boolean hasTimeToRupture();

    /**
     * Adds a TimeToRupture property value.<p>
     * 
     * @param newTimeToRupture the TimeToRupture property value to be added
     */
    void addTimeToRupture(Time newTimeToRupture);

    /**
     * Removes a TimeToRupture property value.<p>
     * 
     * @param oldTimeToRupture the TimeToRupture property value to be removed.
     */
    void removeTimeToRupture(Time oldTimeToRupture);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#TimeToSecondaryCreep
     */
     
    /**
     * Gets all property values for the TimeToSecondaryCreep property.<p>
     * 
     * @returns a collection of values for the TimeToSecondaryCreep property.
     */
    Collection<? extends Time> getTimeToSecondaryCreep();

    /**
     * Checks if the class has a TimeToSecondaryCreep property value.<p>
     * 
     * @return true if there is a TimeToSecondaryCreep property value.
     */
    boolean hasTimeToSecondaryCreep();

    /**
     * Adds a TimeToSecondaryCreep property value.<p>
     * 
     * @param newTimeToSecondaryCreep the TimeToSecondaryCreep property value to be added
     */
    void addTimeToSecondaryCreep(Time newTimeToSecondaryCreep);

    /**
     * Removes a TimeToSecondaryCreep property value.<p>
     * 
     * @param oldTimeToSecondaryCreep the TimeToSecondaryCreep property value to be removed.
     */
    void removeTimeToSecondaryCreep(Time oldTimeToSecondaryCreep);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#TimeToTertiaryCreep
     */
     
    /**
     * Gets all property values for the TimeToTertiaryCreep property.<p>
     * 
     * @returns a collection of values for the TimeToTertiaryCreep property.
     */
    Collection<? extends Time> getTimeToTertiaryCreep();

    /**
     * Checks if the class has a TimeToTertiaryCreep property value.<p>
     * 
     * @return true if there is a TimeToTertiaryCreep property value.
     */
    boolean hasTimeToTertiaryCreep();

    /**
     * Adds a TimeToTertiaryCreep property value.<p>
     * 
     * @param newTimeToTertiaryCreep the TimeToTertiaryCreep property value to be added
     */
    void addTimeToTertiaryCreep(Time newTimeToTertiaryCreep);

    /**
     * Removes a TimeToTertiaryCreep property value.<p>
     * 
     * @param oldTimeToTertiaryCreep the TimeToTertiaryCreep property value to be removed.
     */
    void removeTimeToTertiaryCreep(Time oldTimeToTertiaryCreep);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#UnitDimension
     */
     
    /**
     * Gets all property values for the UnitDimension property.<p>
     * 
     * @returns a collection of values for the UnitDimension property.
     */
    Collection<? extends UnitDimension> getUnitDimension();

    /**
     * Checks if the class has a UnitDimension property value.<p>
     * 
     * @return true if there is a UnitDimension property value.
     */
    boolean hasUnitDimension();

    /**
     * Adds a UnitDimension property value.<p>
     * 
     * @param newUnitDimension the UnitDimension property value to be added
     */
    void addUnitDimension(UnitDimension newUnitDimension);

    /**
     * Removes a UnitDimension property value.<p>
     * 
     * @param oldUnitDimension the UnitDimension property value to be removed.
     */
    void removeUnitDimension(UnitDimension oldUnitDimension);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#UnitSystem
     */
     
    /**
     * Gets all property values for the UnitSystem property.<p>
     * 
     * @returns a collection of values for the UnitSystem property.
     */
    Collection<? extends UnitSystem> getUnitSystem();

    /**
     * Checks if the class has a UnitSystem property value.<p>
     * 
     * @return true if there is a UnitSystem property value.
     */
    boolean hasUnitSystem();

    /**
     * Adds a UnitSystem property value.<p>
     * 
     * @param newUnitSystem the UnitSystem property value to be added
     */
    void addUnitSystem(UnitSystem newUnitSystem);

    /**
     * Removes a UnitSystem property value.<p>
     * 
     * @param oldUnitSystem the UnitSystem property value to be removed.
     */
    void removeUnitSystem(UnitSystem oldUnitSystem);


    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#isMaterialPropertyOf
     */
     
    /**
     * Gets all property values for the isMaterialPropertyOf property.<p>
     * 
     * @returns a collection of values for the isMaterialPropertyOf property.
     */
    Collection<? extends WrappedIndividual> getIsMaterialPropertyOf();

    /**
     * Checks if the class has a isMaterialPropertyOf property value.<p>
     * 
     * @return true if there is a isMaterialPropertyOf property value.
     */
    boolean hasIsMaterialPropertyOf();

    /**
     * Adds a isMaterialPropertyOf property value.<p>
     * 
     * @param newIsMaterialPropertyOf the isMaterialPropertyOf property value to be added
     */
    void addIsMaterialPropertyOf(WrappedIndividual newIsMaterialPropertyOf);

    /**
     * Removes a isMaterialPropertyOf property value.<p>
     * 
     * @param oldIsMaterialPropertyOf the isMaterialPropertyOf property value to be removed.
     */
    void removeIsMaterialPropertyOf(WrappedIndividual oldIsMaterialPropertyOf);


    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#isMaterialPropertyUsedBy
     */
     
    /**
     * Gets all property values for the isMaterialPropertyUsedBy property.<p>
     * 
     * @returns a collection of values for the isMaterialPropertyUsedBy property.
     */
    Collection<? extends Solver> getIsMaterialPropertyUsedBy();

    /**
     * Checks if the class has a isMaterialPropertyUsedBy property value.<p>
     * 
     * @return true if there is a isMaterialPropertyUsedBy property value.
     */
    boolean hasIsMaterialPropertyUsedBy();

    /**
     * Adds a isMaterialPropertyUsedBy property value.<p>
     * 
     * @param newIsMaterialPropertyUsedBy the isMaterialPropertyUsedBy property value to be added
     */
    void addIsMaterialPropertyUsedBy(Solver newIsMaterialPropertyUsedBy);

    /**
     * Removes a isMaterialPropertyUsedBy property value.<p>
     * 
     * @param oldIsMaterialPropertyUsedBy the isMaterialPropertyUsedBy property value to be removed.
     */
    void removeIsMaterialPropertyUsedBy(Solver oldIsMaterialPropertyUsedBy);


    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#AppliedStress
     */
     
    /**
     * Gets all property values for the AppliedStress property.<p>
     * 
     * @returns a collection of values for the AppliedStress property.
     */
    Collection<? extends Object> getAppliedStress();

    /**
     * Checks if the class has a AppliedStress property value.<p>
     * 
     * @return true if there is a AppliedStress property value.
     */
    boolean hasAppliedStress();

    /**
     * Adds a AppliedStress property value.<p>
     * 
     * @param newAppliedStress the AppliedStress property value to be added
     */
    void addAppliedStress(Object newAppliedStress);

    /**
     * Removes a AppliedStress property value.<p>
     * 
     * @param oldAppliedStress the AppliedStress property value to be removed.
     */
    void removeAppliedStress(Object oldAppliedStress);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#CreepCurve
     */
     
    /**
     * Gets all property values for the CreepCurve property.<p>
     * 
     * @returns a collection of values for the CreepCurve property.
     */
    Collection<? extends Object> getCreepCurve();

    /**
     * Checks if the class has a CreepCurve property value.<p>
     * 
     * @return true if there is a CreepCurve property value.
     */
    boolean hasCreepCurve();

    /**
     * Adds a CreepCurve property value.<p>
     * 
     * @param newCreepCurve the CreepCurve property value to be added
     */
    void addCreepCurve(Object newCreepCurve);

    /**
     * Removes a CreepCurve property value.<p>
     * 
     * @param oldCreepCurve the CreepCurve property value to be removed.
     */
    void removeCreepCurve(Object oldCreepCurve);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#CreepTestResuls
     */
     
    /**
     * Gets all property values for the CreepTestResuls property.<p>
     * 
     * @returns a collection of values for the CreepTestResuls property.
     */
    Collection<? extends Object> getCreepTestResuls();

    /**
     * Checks if the class has a CreepTestResuls property value.<p>
     * 
     * @return true if there is a CreepTestResuls property value.
     */
    boolean hasCreepTestResuls();

    /**
     * Adds a CreepTestResuls property value.<p>
     * 
     * @param newCreepTestResuls the CreepTestResuls property value to be added
     */
    void addCreepTestResuls(Object newCreepTestResuls);

    /**
     * Removes a CreepTestResuls property value.<p>
     * 
     * @param oldCreepTestResuls the CreepTestResuls property value to be removed.
     */
    void removeCreepTestResuls(Object oldCreepTestResuls);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#Elongation
     */
     
    /**
     * Gets all property values for the Elongation property.<p>
     * 
     * @returns a collection of values for the Elongation property.
     */
    Collection<? extends Object> getElongation();

    /**
     * Checks if the class has a Elongation property value.<p>
     * 
     * @return true if there is a Elongation property value.
     */
    boolean hasElongation();

    /**
     * Adds a Elongation property value.<p>
     * 
     * @param newElongation the Elongation property value to be added
     */
    void addElongation(Object newElongation);

    /**
     * Removes a Elongation property value.<p>
     * 
     * @param oldElongation the Elongation property value to be removed.
     */
    void removeElongation(Object oldElongation);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#InstantaneousStrain
     */
     
    /**
     * Gets all property values for the InstantaneousStrain property.<p>
     * 
     * @returns a collection of values for the InstantaneousStrain property.
     */
    Collection<? extends Object> getInstantaneousStrain();

    /**
     * Checks if the class has a InstantaneousStrain property value.<p>
     * 
     * @return true if there is a InstantaneousStrain property value.
     */
    boolean hasInstantaneousStrain();

    /**
     * Adds a InstantaneousStrain property value.<p>
     * 
     * @param newInstantaneousStrain the InstantaneousStrain property value to be added
     */
    void addInstantaneousStrain(Object newInstantaneousStrain);

    /**
     * Removes a InstantaneousStrain property value.<p>
     * 
     * @param oldInstantaneousStrain the InstantaneousStrain property value to be removed.
     */
    void removeInstantaneousStrain(Object oldInstantaneousStrain);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#MaximalValue
     */
     
    /**
     * Gets all property values for the MaximalValue property.<p>
     * 
     * @returns a collection of values for the MaximalValue property.
     */
    Collection<? extends Object> getMaximalValue();

    /**
     * Checks if the class has a MaximalValue property value.<p>
     * 
     * @return true if there is a MaximalValue property value.
     */
    boolean hasMaximalValue();

    /**
     * Adds a MaximalValue property value.<p>
     * 
     * @param newMaximalValue the MaximalValue property value to be added
     */
    void addMaximalValue(Object newMaximalValue);

    /**
     * Removes a MaximalValue property value.<p>
     * 
     * @param oldMaximalValue the MaximalValue property value to be removed.
     */
    void removeMaximalValue(Object oldMaximalValue);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#MinimumCreepRate
     */
     
    /**
     * Gets all property values for the MinimumCreepRate property.<p>
     * 
     * @returns a collection of values for the MinimumCreepRate property.
     */
    Collection<? extends Object> getMinimumCreepRate();

    /**
     * Checks if the class has a MinimumCreepRate property value.<p>
     * 
     * @return true if there is a MinimumCreepRate property value.
     */
    boolean hasMinimumCreepRate();

    /**
     * Adds a MinimumCreepRate property value.<p>
     * 
     * @param newMinimumCreepRate the MinimumCreepRate property value to be added
     */
    void addMinimumCreepRate(Object newMinimumCreepRate);

    /**
     * Removes a MinimumCreepRate property value.<p>
     * 
     * @param oldMinimumCreepRate the MinimumCreepRate property value to be removed.
     */
    void removeMinimumCreepRate(Object oldMinimumCreepRate);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#MinimumValue
     */
     
    /**
     * Gets all property values for the MinimumValue property.<p>
     * 
     * @returns a collection of values for the MinimumValue property.
     */
    Collection<? extends Object> getMinimumValue();

    /**
     * Checks if the class has a MinimumValue property value.<p>
     * 
     * @return true if there is a MinimumValue property value.
     */
    boolean hasMinimumValue();

    /**
     * Adds a MinimumValue property value.<p>
     * 
     * @param newMinimumValue the MinimumValue property value to be added
     */
    void addMinimumValue(Object newMinimumValue);

    /**
     * Removes a MinimumValue property value.<p>
     * 
     * @param oldMinimumValue the MinimumValue property value to be removed.
     */
    void removeMinimumValue(Object oldMinimumValue);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#ReductionOfArea
     */
     
    /**
     * Gets all property values for the ReductionOfArea property.<p>
     * 
     * @returns a collection of values for the ReductionOfArea property.
     */
    Collection<? extends Object> getReductionOfArea();

    /**
     * Checks if the class has a ReductionOfArea property value.<p>
     * 
     * @return true if there is a ReductionOfArea property value.
     */
    boolean hasReductionOfArea();

    /**
     * Adds a ReductionOfArea property value.<p>
     * 
     * @param newReductionOfArea the ReductionOfArea property value to be added
     */
    void addReductionOfArea(Object newReductionOfArea);

    /**
     * Removes a ReductionOfArea property value.<p>
     * 
     * @param oldReductionOfArea the ReductionOfArea property value to be removed.
     */
    void removeReductionOfArea(Object oldReductionOfArea);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#Strain
     */
     
    /**
     * Gets all property values for the Strain property.<p>
     * 
     * @returns a collection of values for the Strain property.
     */
    Collection<? extends Object> getStrain();

    /**
     * Checks if the class has a Strain property value.<p>
     * 
     * @return true if there is a Strain property value.
     */
    boolean hasStrain();

    /**
     * Adds a Strain property value.<p>
     * 
     * @param newStrain the Strain property value to be added
     */
    void addStrain(Object newStrain);

    /**
     * Removes a Strain property value.<p>
     * 
     * @param oldStrain the Strain property value to be removed.
     */
    void removeStrain(Object oldStrain);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#StrainAtOnsetOfTertiaryCteep
     */
     
    /**
     * Gets all property values for the StrainAtOnsetOfTertiaryCteep property.<p>
     * 
     * @returns a collection of values for the StrainAtOnsetOfTertiaryCteep property.
     */
    Collection<? extends Object> getStrainAtOnsetOfTertiaryCteep();

    /**
     * Checks if the class has a StrainAtOnsetOfTertiaryCteep property value.<p>
     * 
     * @return true if there is a StrainAtOnsetOfTertiaryCteep property value.
     */
    boolean hasStrainAtOnsetOfTertiaryCteep();

    /**
     * Adds a StrainAtOnsetOfTertiaryCteep property value.<p>
     * 
     * @param newStrainAtOnsetOfTertiaryCteep the StrainAtOnsetOfTertiaryCteep property value to be added
     */
    void addStrainAtOnsetOfTertiaryCteep(Object newStrainAtOnsetOfTertiaryCteep);

    /**
     * Removes a StrainAtOnsetOfTertiaryCteep property value.<p>
     * 
     * @param oldStrainAtOnsetOfTertiaryCteep the StrainAtOnsetOfTertiaryCteep property value to be removed.
     */
    void removeStrainAtOnsetOfTertiaryCteep(Object oldStrainAtOnsetOfTertiaryCteep);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#StrainRate
     */
     
    /**
     * Gets all property values for the StrainRate property.<p>
     * 
     * @returns a collection of values for the StrainRate property.
     */
    Collection<? extends Object> getStrainRate();

    /**
     * Checks if the class has a StrainRate property value.<p>
     * 
     * @return true if there is a StrainRate property value.
     */
    boolean hasStrainRate();

    /**
     * Adds a StrainRate property value.<p>
     * 
     * @param newStrainRate the StrainRate property value to be added
     */
    void addStrainRate(Object newStrainRate);

    /**
     * Removes a StrainRate property value.<p>
     * 
     * @param oldStrainRate the StrainRate property value to be removed.
     */
    void removeStrainRate(Object oldStrainRate);



    /* ***************************************************
     * Property http://codata.jp/OML-Property.owl#Value
     */
     
    /**
     * Gets all property values for the Value property.<p>
     * 
     * @returns a collection of values for the Value property.
     */
    Collection<? extends Object> getValue();

    /**
     * Checks if the class has a Value property value.<p>
     * 
     * @return true if there is a Value property value.
     */
    boolean hasValue();

    /**
     * Adds a Value property value.<p>
     * 
     * @param newValue the Value property value to be added
     */
    void addValue(Object newValue);

    /**
     * Removes a Value property value.<p>
     * 
     * @param oldValue the Value property value to be removed.
     */
    void removeValue(Object oldValue);



    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#hasMaterialPropertyValue
     */
     
    /**
     * Gets all property values for the hasMaterialPropertyValue property.<p>
     * 
     * @returns a collection of values for the hasMaterialPropertyValue property.
     */
    Collection<? extends Object> getHasMaterialPropertyValue();

    /**
     * Checks if the class has a hasMaterialPropertyValue property value.<p>
     * 
     * @return true if there is a hasMaterialPropertyValue property value.
     */
    boolean hasHasMaterialPropertyValue();

    /**
     * Adds a hasMaterialPropertyValue property value.<p>
     * 
     * @param newHasMaterialPropertyValue the hasMaterialPropertyValue property value to be added
     */
    void addHasMaterialPropertyValue(Object newHasMaterialPropertyValue);

    /**
     * Removes a hasMaterialPropertyValue property value.<p>
     * 
     * @param oldHasMaterialPropertyValue the hasMaterialPropertyValue property value to be removed.
     */
    void removeHasMaterialPropertyValue(Object oldHasMaterialPropertyValue);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
