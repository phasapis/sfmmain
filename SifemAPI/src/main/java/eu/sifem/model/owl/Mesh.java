package eu.sifem.model.owl;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Mesh <br>
 * @version generated on Mon May 11 16:25:20 BST 2015 by jbjares
 */

public interface Mesh extends WrappedIndividual {

    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#hasMeshSettings
     */
     
    /**
     * Gets all property values for the hasMeshSettings property.<p>
     * 
     * @returns a collection of values for the hasMeshSettings property.
     */
    Collection<? extends MeshSettings> getHasMeshSettings();

    /**
     * Checks if the class has a hasMeshSettings property value.<p>
     * 
     * @return true if there is a hasMeshSettings property value.
     */
    boolean hasHasMeshSettings();

    /**
     * Adds a hasMeshSettings property value.<p>
     * 
     * @param newHasMeshSettings the hasMeshSettings property value to be added
     */
    void addHasMeshSettings(MeshSettings newHasMeshSettings);

    /**
     * Removes a hasMeshSettings property value.<p>
     * 
     * @param oldHasMeshSettings the hasMeshSettings property value to be removed.
     */
    void removeHasMeshSettings(MeshSettings oldHasMeshSettings);


    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#discretizes
     */
     
    /**
     * Gets all property values for the discretizes property.<p>
     * 
     * @returns a collection of values for the discretizes property.
     */
    Collection<? extends Finite_Element_Model_Domain> getDiscretizes();

    /**
     * Checks if the class has a discretizes property value.<p>
     * 
     * @return true if there is a discretizes property value.
     */
    boolean hasDiscretizes();

    /**
     * Adds a discretizes property value.<p>
     * 
     * @param newDiscretizes the discretizes property value to be added
     */
    void addDiscretizes(Finite_Element_Model_Domain newDiscretizes);

    /**
     * Removes a discretizes property value.<p>
     * 
     * @param oldDiscretizes the discretizes property value to be removed.
     */
    void removeDiscretizes(Finite_Element_Model_Domain oldDiscretizes);


    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#isMeshOf
     */
     
    /**
     * Gets all property values for the isMeshOf property.<p>
     * 
     * @returns a collection of values for the isMeshOf property.
     */
    Collection<? extends Discrete_Model> getIsMeshOf();

    /**
     * Checks if the class has a isMeshOf property value.<p>
     * 
     * @return true if there is a isMeshOf property value.
     */
    boolean hasIsMeshOf();

    /**
     * Adds a isMeshOf property value.<p>
     * 
     * @param newIsMeshOf the isMeshOf property value to be added
     */
    void addIsMeshOf(Discrete_Model newIsMeshOf);

    /**
     * Removes a isMeshOf property value.<p>
     * 
     * @param oldIsMeshOf the isMeshOf property value to be removed.
     */
    void removeIsMeshOf(Discrete_Model oldIsMeshOf);


    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#hasMaximumNumberOfNodesPerElement
     */
     
    /**
     * Gets all property values for the hasMaximumNumberOfNodesPerElement property.<p>
     * 
     * @returns a collection of values for the hasMaximumNumberOfNodesPerElement property.
     */
    Collection<? extends Integer> getHasMaximumNumberOfNodesPerElement();

    /**
     * Checks if the class has a hasMaximumNumberOfNodesPerElement property value.<p>
     * 
     * @return true if there is a hasMaximumNumberOfNodesPerElement property value.
     */
    boolean hasHasMaximumNumberOfNodesPerElement();

    /**
     * Adds a hasMaximumNumberOfNodesPerElement property value.<p>
     * 
     * @param newHasMaximumNumberOfNodesPerElement the hasMaximumNumberOfNodesPerElement property value to be added
     */
    void addHasMaximumNumberOfNodesPerElement(Integer newHasMaximumNumberOfNodesPerElement);

    /**
     * Removes a hasMaximumNumberOfNodesPerElement property value.<p>
     * 
     * @param oldHasMaximumNumberOfNodesPerElement the hasMaximumNumberOfNodesPerElement property value to be removed.
     */
    void removeHasMaximumNumberOfNodesPerElement(Integer oldHasMaximumNumberOfNodesPerElement);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
