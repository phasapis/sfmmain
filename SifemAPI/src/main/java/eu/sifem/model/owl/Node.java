package eu.sifem.model.owl;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Node <br>
 * @version generated on Mon May 11 16:25:20 BST 2015 by jbjares
 */

public interface Node extends WrappedIndividual {

    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FEMSettingsPAK.owl#hasNodeSettings
     */
     
    /**
     * Gets all property values for the hasNodeSettings property.<p>
     * 
     * @returns a collection of values for the hasNodeSettings property.
     */
    Collection<? extends NodeSettings> getHasNodeSettings();

    /**
     * Checks if the class has a hasNodeSettings property value.<p>
     * 
     * @return true if there is a hasNodeSettings property value.
     */
    boolean hasHasNodeSettings();

    /**
     * Adds a hasNodeSettings property value.<p>
     * 
     * @param newHasNodeSettings the hasNodeSettings property value to be added
     */
    void addHasNodeSettings(NodeSettings newHasNodeSettings);

    /**
     * Removes a hasNodeSettings property value.<p>
     * 
     * @param oldHasNodeSettings the hasNodeSettings property value to be removed.
     */
    void removeHasNodeSettings(NodeSettings oldHasNodeSettings);


    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#isBoundaryNodeOf
     */
     
    /**
     * Gets all property values for the isBoundaryNodeOf property.<p>
     * 
     * @returns a collection of values for the isBoundaryNodeOf property.
     */
    Collection<? extends Boundary> getIsBoundaryNodeOf();

    /**
     * Checks if the class has a isBoundaryNodeOf property value.<p>
     * 
     * @return true if there is a isBoundaryNodeOf property value.
     */
    boolean hasIsBoundaryNodeOf();

    /**
     * Adds a isBoundaryNodeOf property value.<p>
     * 
     * @param newIsBoundaryNodeOf the isBoundaryNodeOf property value to be added
     */
    void addIsBoundaryNodeOf(Boundary newIsBoundaryNodeOf);

    /**
     * Removes a isBoundaryNodeOf property value.<p>
     * 
     * @param oldIsBoundaryNodeOf the isBoundaryNodeOf property value to be removed.
     */
    void removeIsBoundaryNodeOf(Boundary oldIsBoundaryNodeOf);


    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#isNodeOf
     */
     
    /**
     * Gets all property values for the isNodeOf property.<p>
     * 
     * @returns a collection of values for the isNodeOf property.
     */
    Collection<? extends Subdomain> getIsNodeOf();

    /**
     * Checks if the class has a isNodeOf property value.<p>
     * 
     * @return true if there is a isNodeOf property value.
     */
    boolean hasIsNodeOf();

    /**
     * Adds a isNodeOf property value.<p>
     * 
     * @param newIsNodeOf the isNodeOf property value to be added
     */
    void addIsNodeOf(Subdomain newIsNodeOf);

    /**
     * Removes a isNodeOf property value.<p>
     * 
     * @param oldIsNodeOf the isNodeOf property value to be removed.
     */
    void removeIsNodeOf(Subdomain oldIsNodeOf);


    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#isVertexOf
     */
     
    /**
     * Gets all property values for the isVertexOf property.<p>
     * 
     * @returns a collection of values for the isVertexOf property.
     */
    Collection<? extends Subdomain_group> getIsVertexOf();

    /**
     * Checks if the class has a isVertexOf property value.<p>
     * 
     * @return true if there is a isVertexOf property value.
     */
    boolean hasIsVertexOf();

    /**
     * Adds a isVertexOf property value.<p>
     * 
     * @param newIsVertexOf the isVertexOf property value to be added
     */
    void addIsVertexOf(Subdomain_group newIsVertexOf);

    /**
     * Removes a isVertexOf property value.<p>
     * 
     * @param oldIsVertexOf the isVertexOf property value to be removed.
     */
    void removeIsVertexOf(Subdomain_group oldIsVertexOf);


    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#hasNodeID
     */
     
    /**
     * Gets all property values for the hasNodeID property.<p>
     * 
     * @returns a collection of values for the hasNodeID property.
     */
    Collection<? extends Integer> getHasNodeID();

    /**
     * Checks if the class has a hasNodeID property value.<p>
     * 
     * @return true if there is a hasNodeID property value.
     */
    boolean hasHasNodeID();

    /**
     * Adds a hasNodeID property value.<p>
     * 
     * @param newHasNodeID the hasNodeID property value to be added
     */
    void addHasNodeID(Integer newHasNodeID);

    /**
     * Removes a hasNodeID property value.<p>
     * 
     * @param oldHasNodeID the hasNodeID property value to be removed.
     */
    void removeHasNodeID(Integer oldHasNodeID);



    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#hasXCoordinate
     */
     
    /**
     * Gets all property values for the hasXCoordinate property.<p>
     * 
     * @returns a collection of values for the hasXCoordinate property.
     */
    Collection<? extends Object> getHasXCoordinate();

    /**
     * Checks if the class has a hasXCoordinate property value.<p>
     * 
     * @return true if there is a hasXCoordinate property value.
     */
    boolean hasHasXCoordinate();

    /**
     * Adds a hasXCoordinate property value.<p>
     * 
     * @param newHasXCoordinate the hasXCoordinate property value to be added
     */
    void addHasXCoordinate(Object newHasXCoordinate);

    /**
     * Removes a hasXCoordinate property value.<p>
     * 
     * @param oldHasXCoordinate the hasXCoordinate property value to be removed.
     */
    void removeHasXCoordinate(Object oldHasXCoordinate);



    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#hasYCoordinate
     */
     
    /**
     * Gets all property values for the hasYCoordinate property.<p>
     * 
     * @returns a collection of values for the hasYCoordinate property.
     */
    Collection<? extends Object> getHasYCoordinate();

    /**
     * Checks if the class has a hasYCoordinate property value.<p>
     * 
     * @return true if there is a hasYCoordinate property value.
     */
    boolean hasHasYCoordinate();

    /**
     * Adds a hasYCoordinate property value.<p>
     * 
     * @param newHasYCoordinate the hasYCoordinate property value to be added
     */
    void addHasYCoordinate(Object newHasYCoordinate);

    /**
     * Removes a hasYCoordinate property value.<p>
     * 
     * @param oldHasYCoordinate the hasYCoordinate property value to be removed.
     */
    void removeHasYCoordinate(Object oldHasYCoordinate);



    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#hasZCoordinate
     */
     
    /**
     * Gets all property values for the hasZCoordinate property.<p>
     * 
     * @returns a collection of values for the hasZCoordinate property.
     */
    Collection<? extends Object> getHasZCoordinate();

    /**
     * Checks if the class has a hasZCoordinate property value.<p>
     * 
     * @return true if there is a hasZCoordinate property value.
     */
    boolean hasHasZCoordinate();

    /**
     * Adds a hasZCoordinate property value.<p>
     * 
     * @param newHasZCoordinate the hasZCoordinate property value to be added
     */
    void addHasZCoordinate(Object newHasZCoordinate);

    /**
     * Removes a hasZCoordinate property value.<p>
     * 
     * @param oldHasZCoordinate the hasZCoordinate property value to be removed.
     */
    void removeHasZCoordinate(Object oldHasZCoordinate);



    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#isCentralNode
     */
     
    /**
     * Gets all property values for the isCentralNode property.<p>
     * 
     * @returns a collection of values for the isCentralNode property.
     */
    Collection<? extends Boolean> getIsCentralNode();

    /**
     * Checks if the class has a isCentralNode property value.<p>
     * 
     * @return true if there is a isCentralNode property value.
     */
    boolean hasIsCentralNode();

    /**
     * Adds a isCentralNode property value.<p>
     * 
     * @param newIsCentralNode the isCentralNode property value to be added
     */
    void addIsCentralNode(Boolean newIsCentralNode);

    /**
     * Removes a isCentralNode property value.<p>
     * 
     * @param oldIsCentralNode the isCentralNode property value to be removed.
     */
    void removeIsCentralNode(Boolean oldIsCentralNode);



    /* ***************************************************
     * Property http://www.sifemontologies.com/ontologies/FiniteElementModel.owl#isMidNode
     */
     
    /**
     * Gets all property values for the isMidNode property.<p>
     * 
     * @returns a collection of values for the isMidNode property.
     */
    Collection<? extends Boolean> getIsMidNode();

    /**
     * Checks if the class has a isMidNode property value.<p>
     * 
     * @return true if there is a isMidNode property value.
     */
    boolean hasIsMidNode();

    /**
     * Adds a isMidNode property value.<p>
     * 
     * @param newIsMidNode the isMidNode property value to be added
     */
    void addIsMidNode(Boolean newIsMidNode);

    /**
     * Removes a isMidNode property value.<p>
     * 
     * @param oldIsMidNode the isMidNode property value to be removed.
     */
    void removeIsMidNode(Boolean oldIsMidNode);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
